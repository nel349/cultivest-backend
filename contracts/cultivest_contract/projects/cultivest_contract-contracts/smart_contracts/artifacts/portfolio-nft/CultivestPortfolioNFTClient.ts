/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CultivestPortfolioNFT","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the Portfolio NFT contract","events":[],"recommendations":{}},{"name":"mintPortfolio","args":[{"type":"account","name":"owner","desc":"- The Algorand address that will own this portfolio token"},{"type":"uint64","name":"level","desc":"- Initial money tree level (1-5)"},{"type":"uint64","name":"totalInvestedUSD","desc":"- Total amount invested in USD cents"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mint new portfolio token for a user\nFor MVP: Portfolio metadata is stored off-chain using the logged events\nThe contract only tracks basic state and emits detailed events for indexing","events":[],"recommendations":{}},{"name":"addPositionToPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"uint64","name":"positionTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add position token to a portfolio token\nFor MVP: This is tracked off-chain, contract just logs the assignment","events":[],"recommendations":{}},{"name":"removePositionFromPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"uint64","name":"positionTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove position token from a portfolio token","events":[],"recommendations":{}},{"name":"updatePortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"uint64","name":"newLevel"},{"type":"uint64","name":"newTotalValueUSD"},{"type":"uint64","name":"newTotalInvestedUSD"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update portfolio token values and performance\nFor MVP: Only validates token exists via ID range, metadata tracked off-chain","events":[],"recommendations":{}},{"name":"transferPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"account","name":"currentOwner"},{"type":"account","name":"newOwner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer portfolio token ownership\nFor MVP: Off-chain system tracks ownership, this logs the transfer event","events":[],"recommendations":{}},{"name":"burnPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Burn portfolio token (close portfolio)\nFor MVP: Decrements supply and logs burn event for off-chain cleanup","events":[],"recommendations":{}},{"name":"setPositionNFTApp","args":[{"type":"uint64","name":"appId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Set the Position NFT contract app ID (admin only)","events":[],"recommendations":{}},{"name":"getContractStats","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get contract statistics (read-only)","events":[],"recommendations":{}},{"name":"portfolioExists","args":[{"type":"uint64","name":"portfolioTokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if portfolio token ID is valid (read-only)\nFor MVP: Only checks if token ID is in valid range\nOff-chain system tracks full portfolio metadata","events":[],"recommendations":{}},{"name":"setAuthorizedMinter","args":[{"type":"account","name":"newMinter"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update authorized minter (admin only)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Cultivest Portfolio NFT Smart Contract\nMints individual portfolio tokens that reference Position NFT token IDs\nEach portfolio token represents a collection of position tokens owned by a user\n\nNote: For MVP, we'll store minimal state in global storage and use off-chain indexing\nfor detailed portfolio metadata. In production, we can upgrade to use box storage.","networks":{},"state":{"schema":{"global":{"ints":5,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextTokenId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dFRva2VuSWQ="},"totalSupply":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdXBwbHk="},"contractVersion":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udHJhY3RWZXJzaW9u"},"maxSupply":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4U3VwcGx5"},"positionNFTAppId":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9zaXRpb25ORlRBcHBJZA=="},"authorizedMinter":{"keyType":"AVMString","valueType":"address","key":"YXV0aG9yaXplZE1pbnRlcg=="},"contractName":{"keyType":"AVMString","valueType":"AVMString","key":"Y29udHJhY3ROYW1l"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[227,245,267,312,328,350,378,406,432,458,490],"errorMessage":"OnCompletion is not NoOp"},{"pc":[494],"errorMessage":"can only call when creating"},{"pc":[230,248,270,315,331,353,381,409,435,461],"errorMessage":"can only call when not creating"},{"pc":[600,606,611,631,641,731,777,799,869,891,962,973,1129,1148,1250,1269,1276,1349,1392,1398,1403,1408,1412,1425,1444],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEFJgkLbmV4dFRva2VuSWQQYXV0aG9yaXplZE1pbnRlcgt0b3RhbFN1cHBseRBwb3NpdGlvbk5GVEFwcElkBBUffHUJbWF4U3VwcGx5EHBvcnRmb2xpb19vd25lcjoPY29udHJhY3RWZXJzaW9uEnBvc2l0aW9uX3Rva2VuX2lkOjEbQQBUggsEuER7NgRGVVo5BPuVRjAE1dNjygTTbcYHBDTZ7ikEnNk1QASxHCsKBBta6OkEf4vo8gTNCz2hNhoAjgsBCQDpAM8AtQCZAH0AZwBXACoAFAACIkMxGRREMRhENhoBF8AciASsI0MxGRREMRhENhoBF4gEhhYnBExQsCNDMRkURDEYRIgEW08EFk8EFk8EFk8EFk8EFk8ETwRQTwNQTwJQTFAnBExQsCNDMRkURDEYRDYaAReIA/ojQzEZFEQxGEQ2GgEXNhoCF8AciAN+I0MxGRREMRhENhoBFzYaAhfAHDYaAxfAHIgC6SNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIAikjQzEZFEQxGEQ2GgEXNhoCFzYaAxfAHIgBryNDMRkURDEYRDYaARc2GgIXNhoDF8AciAE5I0MxGRREMRhENhoBF8AcNhoCFzYaAxeIAHEWJwRMULAjQzEZFEQxGBREiAACI0MoI2cqImcnByNnJwWBoI0GZysiZykxAGeCAgxjb250cmFjdE5hbWUVQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUZ4AacG9ydGZvbGlvX2NvbnRyYWN0X2NyZWF0ZWSwiYoDATEAIillRBJEIiplRCInBWVEDESL/kEAj4v+JA5BAIgjRCIoZURJIwgoTGciKmVEIwgqTGdJFoARcG9ydGZvbGlvX21pbnRlZDpMULAnBov9ULCL/haAEHBvcnRmb2xpb19sZXZlbDpMULCL/xaAE3BvcnRmb2xpb19pbnZlc3RlZDpMULAiK2VEFoAXcG9ydGZvbGlvX3Bvc2l0aW9uX2FwcDpMULCJIkL/dYoDAIv9QQBQIihlRIv9DUEARiNEi/5EMQCL/xIxACIpZUQSEUSL/RaAHHBvc2l0aW9uX2FkZGVkX3RvX3BvcnRmb2xpbzpMULCL/hYnCExQsCcGi/9QsIkiQv+3igMAi/1BAFQiKGVEi/0NQQBKI0SL/kQxAIv/EjEAIillRBIRRIv9FoAgcG9zaXRpb25fcmVtb3ZlZF9mcm9tX3BvcnRmb2xpbzpMULCL/hYnCExQsCcGi/9QsIkiQv+zigQAMQAiKWVEEkSL/EEAkCIoZUSL/A1BAIYjRIv9QQB7i/0kDkEAdCNEi/wWgBJwb3J0Zm9saW9fdXBkYXRlZDpMULCL/RaAFHBvcnRmb2xpb19uZXdfbGV2ZWw6TFCwi/4WgBRwb3J0Zm9saW9fbmV3X3ZhbHVlOkxQsIv/FoAXcG9ydGZvbGlvX25ld19pbnZlc3RlZDpMULCJIkL/iSJC/3eKAwCL/UEAbSIoZUSL/Q1BAGMjRDEAi/4SMQAiKWVEEhFEi/0WgBZwb3J0Zm9saW9fdHJhbnNmZXJyZWQ6TFCwgBRwb3J0Zm9saW9fb2xkX293bmVyOov+ULCAFHBvcnRmb2xpb19uZXdfb3duZXI6i/9QsIkiQv+aigIAi/5BAFoiKGVEi/4NQQBQI0QxAIv/EjEAIillRBIRRCIqZUQjCSpMZ4v+FoARcG9ydGZvbGlvX2J1cm5lZDpMULCAF3BvcnRmb2xpb19idXJuZWRfb3duZXI6i/9QsIkiQv+tigEAMQAiKWVEEkSL/0Qri/9ni/8WgBVwb3NpdGlvbl9uZnRfYXBwX3NldDpMULCJIihlRCMJIiplRCInBWVEIicHZUQiK2VEiYoBAYv/QQAMIihlRIv/DUEAAiOJIomKAQAxACIpZUQSRCmL/2eAD21pbnRlcl91cGRhdGVkOov/ULCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CultivestPortfolioNft contract
 */
export type CultivestPortfolioNftArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'mintPortfolio(account,uint64,uint64)uint64': {
      /**
       * - The Algorand address that will own this portfolio token
       */
      owner: Uint8Array | string
      /**
       * - Initial money tree level (1-5)
       */
      level: bigint | number
      /**
       * - Total amount invested in USD cents
       */
      totalInvestedUsd: bigint | number
    }
    'addPositionToPortfolio(uint64,uint64,account)void': {
      portfolioTokenId: bigint | number
      positionTokenId: bigint | number
      owner: Uint8Array | string
    }
    'removePositionFromPortfolio(uint64,uint64,account)void': {
      portfolioTokenId: bigint | number
      positionTokenId: bigint | number
      owner: Uint8Array | string
    }
    'updatePortfolio(uint64,uint64,uint64,uint64)void': {
      portfolioTokenId: bigint | number
      newLevel: bigint | number
      newTotalValueUsd: bigint | number
      newTotalInvestedUsd: bigint | number
    }
    'transferPortfolio(uint64,account,account)void': {
      portfolioTokenId: bigint | number
      currentOwner: Uint8Array | string
      newOwner: Uint8Array | string
    }
    'burnPortfolio(uint64,account)void': {
      portfolioTokenId: bigint | number
      owner: Uint8Array | string
    }
    'setPositionNFTApp(uint64)void': {
      appId: bigint | number
    }
    'getContractStats()(uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'portfolioExists(uint64)uint64': {
      portfolioTokenId: bigint | number
    }
    'setAuthorizedMinter(account)void': {
      newMinter: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'mintPortfolio(account,uint64,uint64)uint64': [owner: Uint8Array | string, level: bigint | number, totalInvestedUsd: bigint | number]
    'addPositionToPortfolio(uint64,uint64,account)void': [portfolioTokenId: bigint | number, positionTokenId: bigint | number, owner: Uint8Array | string]
    'removePositionFromPortfolio(uint64,uint64,account)void': [portfolioTokenId: bigint | number, positionTokenId: bigint | number, owner: Uint8Array | string]
    'updatePortfolio(uint64,uint64,uint64,uint64)void': [portfolioTokenId: bigint | number, newLevel: bigint | number, newTotalValueUsd: bigint | number, newTotalInvestedUsd: bigint | number]
    'transferPortfolio(uint64,account,account)void': [portfolioTokenId: bigint | number, currentOwner: Uint8Array | string, newOwner: Uint8Array | string]
    'burnPortfolio(uint64,account)void': [portfolioTokenId: bigint | number, owner: Uint8Array | string]
    'setPositionNFTApp(uint64)void': [appId: bigint | number]
    'getContractStats()(uint64,uint64,uint64,uint64,uint64)': []
    'portfolioExists(uint64)uint64': [portfolioTokenId: bigint | number]
    'setAuthorizedMinter(account)void': [newMinter: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type CultivestPortfolioNftReturns = {
  'createApplication()void': void
  'mintPortfolio(account,uint64,uint64)uint64': bigint
  'addPositionToPortfolio(uint64,uint64,account)void': void
  'removePositionFromPortfolio(uint64,uint64,account)void': void
  'updatePortfolio(uint64,uint64,uint64,uint64)void': void
  'transferPortfolio(uint64,account,account)void': void
  'burnPortfolio(uint64,account)void': void
  'setPositionNFTApp(uint64)void': void
  'getContractStats()(uint64,uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint, bigint]
  'portfolioExists(uint64)uint64': bigint
  'setAuthorizedMinter(account)void': void
}

/**
 * Defines the types of available calls and state of the CultivestPortfolioNft smart contract.
 */
export type CultivestPortfolioNftTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CultivestPortfolioNftArgs['obj']['createApplication()void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['createApplication()void']
      returns: CultivestPortfolioNftReturns['createApplication()void']
    }>
    & Record<'mintPortfolio(account,uint64,uint64)uint64' | 'mintPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']
      returns: CultivestPortfolioNftReturns['mintPortfolio(account,uint64,uint64)uint64']
    }>
    & Record<'addPositionToPortfolio(uint64,uint64,account)void' | 'addPositionToPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']
      returns: CultivestPortfolioNftReturns['addPositionToPortfolio(uint64,uint64,account)void']
    }>
    & Record<'removePositionFromPortfolio(uint64,uint64,account)void' | 'removePositionFromPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']
      returns: CultivestPortfolioNftReturns['removePositionFromPortfolio(uint64,uint64,account)void']
    }>
    & Record<'updatePortfolio(uint64,uint64,uint64,uint64)void' | 'updatePortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']
      returns: CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'transferPortfolio(uint64,account,account)void' | 'transferPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']
      returns: CultivestPortfolioNftReturns['transferPortfolio(uint64,account,account)void']
    }>
    & Record<'burnPortfolio(uint64,account)void' | 'burnPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']
      returns: CultivestPortfolioNftReturns['burnPortfolio(uint64,account)void']
    }>
    & Record<'setPositionNFTApp(uint64)void' | 'setPositionNFTApp', {
      argsObj: CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']
      returns: CultivestPortfolioNftReturns['setPositionNFTApp(uint64)void']
    }>
    & Record<'getContractStats()(uint64,uint64,uint64,uint64,uint64)' | 'getContractStats', {
      argsObj: CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
      returns: CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'portfolioExists(uint64)uint64' | 'portfolioExists', {
      argsObj: CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']
      returns: CultivestPortfolioNftReturns['portfolioExists(uint64)uint64']
    }>
    & Record<'setAuthorizedMinter(account)void' | 'setAuthorizedMinter', {
      argsObj: CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']
      returns: CultivestPortfolioNftReturns['setAuthorizedMinter(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextTokenId: bigint
        totalSupply: bigint
        contractVersion: bigint
        maxSupply: bigint
        positionNftAppId: bigint
        authorizedMinter: string
        contractName: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CultivestPortfolioNftSignatures = keyof CultivestPortfolioNftTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CultivestPortfolioNftNonVoidMethodSignatures = keyof CultivestPortfolioNftTypes['methods'] extends infer T ? T extends keyof CultivestPortfolioNftTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CultivestPortfolioNft smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CultivestPortfolioNftSignatures> = CultivestPortfolioNftTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CultivestPortfolioNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CultivestPortfolioNftSignatures> = CultivestPortfolioNftTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CultivestPortfolioNftTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CultivestPortfolioNftCreateCallParams =
  | Expand<CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CultivestPortfolioNftDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CultivestPortfolioNftCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CultivestPortfolioNft smart contract
 */
export abstract class CultivestPortfolioNftParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CultivestPortfolioNftCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CultivestPortfolioNftParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CultivestPortfolioNFT smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mintPortfolio(account,uint64,uint64)uint64 ABI method
   *
  * Mint new portfolio token for a user
  For MVP: Portfolio metadata is stored off-chain using the logged events
  The contract only tracks basic state and emits detailed events for indexing

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintPortfolio(account,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.level, params.args.totalInvestedUsd],
    }
  }
  /**
   * Constructs a no op call for the addPositionToPortfolio(uint64,uint64,account)void ABI method
   *
  * Add position token to a portfolio token
  For MVP: This is tracked off-chain, contract just logs the assignment

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPositionToPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addPositionToPortfolio(uint64,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.positionTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the removePositionFromPortfolio(uint64,uint64,account)void ABI method
   *
   * Remove position token from a portfolio token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removePositionFromPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removePositionFromPortfolio(uint64,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.positionTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the updatePortfolio(uint64,uint64,uint64,uint64)void ABI method
   *
  * Update portfolio token values and performance
  For MVP: Only validates token exists via ID range, metadata tracked off-chain

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePortfolio(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.newLevel, params.args.newTotalValueUsd, params.args.newTotalInvestedUsd],
    }
  }
  /**
   * Constructs a no op call for the transferPortfolio(uint64,account,account)void ABI method
   *
  * Transfer portfolio token ownership
  For MVP: Off-chain system tracks ownership, this logs the transfer event

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferPortfolio(uint64,account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.currentOwner, params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the burnPortfolio(uint64,account)void ABI method
   *
  * Burn portfolio token (close portfolio)
  For MVP: Decrements supply and logs burn event for off-chain cleanup

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnPortfolio(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the setPositionNFTApp(uint64)void ABI method
   *
   * Set the Position NFT contract app ID (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPositionNftApp(params: CallParams<CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void'] | CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setPositionNFTApp(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the getContractStats()(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Get contract statistics (read-only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractStats()(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the portfolioExists(uint64)uint64 ABI method
   *
  * Check if portfolio token ID is valid (read-only)
  For MVP: Only checks if token ID is in valid range
  Off-chain system tracks full portfolio metadata

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static portfolioExists(params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'portfolioExists(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId],
    }
  }
  /**
   * Constructs a no op call for the setAuthorizedMinter(account)void ABI method
   *
   * Update authorized minter (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAuthorizedMinter(params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAuthorizedMinter(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMinter],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CultivestPortfolioNFT smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CultivestPortfolioNftFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CultivestPortfolioNftFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CultivestPortfolioNftClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CultivestPortfolioNftClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CultivestPortfolioNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CultivestPortfolioNftDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CultivestPortfolioNftParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CultivestPortfolioNftCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CultivestPortfolioNftClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize the Portfolio NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize the Portfolio NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize the Portfolio NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CultivestPortfolioNftReturns['createApplication()void']) }, appClient: new CultivestPortfolioNftClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CultivestPortfolioNFT smart contract
 */
export class CultivestPortfolioNftClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CultivestPortfolioNftClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CultivestPortfolioNft app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CultivestPortfolioNftClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CultivestPortfolioNftNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CultivestPortfolioNftClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CultivestPortfolioNftClient> {
    return new CultivestPortfolioNftClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CultivestPortfolioNftClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CultivestPortfolioNftClient> {
    return new CultivestPortfolioNftClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `mintPortfolio(account,uint64,uint64)uint64` ABI method.
     *
    * Mint new portfolio token for a user
    For MVP: Portfolio metadata is stored off-chain using the logged events
    The contract only tracks basic state and emits detailed events for indexing

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.mintPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `addPositionToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Add position token to a portfolio token
    For MVP: This is tracked off-chain, contract just logs the assignment

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addPositionToPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.addPositionToPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `removePositionFromPortfolio(uint64,uint64,account)void` ABI method.
     *
     * Remove position token from a portfolio token
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removePositionFromPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.removePositionFromPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Update portfolio token values and performance
    For MVP: Only validates token exists via ID range, metadata tracked off-chain

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferPortfolio(uint64,account,account)void` ABI method.
     *
    * Transfer portfolio token ownership
    For MVP: Off-chain system tracks ownership, this logs the transfer event

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.transferPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `burnPortfolio(uint64,account)void` ABI method.
     *
    * Burn portfolio token (close portfolio)
    For MVP: Decrements supply and logs burn event for off-chain cleanup

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.burnPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setPositionNFTApp(uint64)void` ABI method.
     *
     * Set the Position NFT contract app ID (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPositionNftApp: (params: CallParams<CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void'] | CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.setPositionNftApp(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Check if portfolio token ID is valid (read-only)
    For MVP: Only checks if token ID is in valid range
    Off-chain system tracks full portfolio metadata

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    portfolioExists: (params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAuthorizedMinter: (params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.setAuthorizedMinter(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `mintPortfolio(account,uint64,uint64)uint64` ABI method.
     *
    * Mint new portfolio token for a user
    For MVP: Portfolio metadata is stored off-chain using the logged events
    The contract only tracks basic state and emits detailed events for indexing

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.mintPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `addPositionToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Add position token to a portfolio token
    For MVP: This is tracked off-chain, contract just logs the assignment

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addPositionToPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.addPositionToPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `removePositionFromPortfolio(uint64,uint64,account)void` ABI method.
     *
     * Remove position token from a portfolio token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removePositionFromPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.removePositionFromPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Update portfolio token values and performance
    For MVP: Only validates token exists via ID range, metadata tracked off-chain

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferPortfolio(uint64,account,account)void` ABI method.
     *
    * Transfer portfolio token ownership
    For MVP: Off-chain system tracks ownership, this logs the transfer event

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.transferPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `burnPortfolio(uint64,account)void` ABI method.
     *
    * Burn portfolio token (close portfolio)
    For MVP: Decrements supply and logs burn event for off-chain cleanup

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.burnPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setPositionNFTApp(uint64)void` ABI method.
     *
     * Set the Position NFT contract app ID (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPositionNftApp: (params: CallParams<CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void'] | CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.setPositionNftApp(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Check if portfolio token ID is valid (read-only)
    For MVP: Only checks if token ID is in valid range
    Off-chain system tracks full portfolio metadata

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    portfolioExists: (params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAuthorizedMinter: (params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.setAuthorizedMinter(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `mintPortfolio(account,uint64,uint64)uint64` ABI method.
     *
    * Mint new portfolio token for a user
    For MVP: Portfolio metadata is stored off-chain using the logged events
    The contract only tracks basic state and emits detailed events for indexing

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.mintPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['mintPortfolio(account,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `addPositionToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Add position token to a portfolio token
    For MVP: This is tracked off-chain, contract just logs the assignment

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addPositionToPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.addPositionToPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['addPositionToPortfolio(uint64,uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `removePositionFromPortfolio(uint64,uint64,account)void` ABI method.
     *
     * Remove position token from a portfolio token
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removePositionFromPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.removePositionFromPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['removePositionFromPortfolio(uint64,uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Update portfolio token values and performance
    For MVP: Only validates token exists via ID range, metadata tracked off-chain

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferPortfolio(uint64,account,account)void` ABI method.
     *
    * Transfer portfolio token ownership
    For MVP: Off-chain system tracks ownership, this logs the transfer event

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.transferPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['transferPortfolio(uint64,account,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `burnPortfolio(uint64,account)void` ABI method.
     *
    * Burn portfolio token (close portfolio)
    For MVP: Decrements supply and logs burn event for off-chain cleanup

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.burnPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['burnPortfolio(uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setPositionNFTApp(uint64)void` ABI method.
     *
     * Set the Position NFT contract app ID (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPositionNftApp: async (params: CallParams<CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void'] | CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.setPositionNftApp(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['setPositionNFTApp(uint64)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Check if portfolio token ID is valid (read-only)
    For MVP: Only checks if token ID is in valid range
    Off-chain system tracks full portfolio metadata

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    portfolioExists: async (params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['portfolioExists(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAuthorizedMinter: async (params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.setAuthorizedMinter(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['setAuthorizedMinter(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CultivestPortfolioNftClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get contract statistics (read-only)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getContractStats(params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Check if portfolio token ID is valid (read-only)
  For MVP: Only checks if token ID is in valid range
  Off-chain system tracks full portfolio metadata

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async portfolioExists(params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
    return result.return as unknown as CultivestPortfolioNftReturns['portfolioExists(uint64)uint64']
  }

  /**
   * Methods to access state for the current CultivestPortfolioNFT app
   */
  state = {
    /**
     * Methods to access global state for the current CultivestPortfolioNFT app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextTokenId: result.nextTokenId,
          totalSupply: result.totalSupply,
          contractVersion: result.contractVersion,
          maxSupply: result.maxSupply,
          positionNftAppId: result.positionNFTAppId,
          authorizedMinter: result.authorizedMinter,
          contractName: result.contractName,
        }
      },
      /**
       * Get the current value of the nextTokenId key in global state
       */
      nextTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextTokenId")) as bigint | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
      /**
       * Get the current value of the contractVersion key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractVersion")) as bigint | undefined },
      /**
       * Get the current value of the maxSupply key in global state
       */
      maxSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxSupply")) as bigint | undefined },
      /**
       * Get the current value of the positionNFTAppId key in global state
       */
      positionNftAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("positionNFTAppId")) as bigint | undefined },
      /**
       * Get the current value of the authorizedMinter key in global state
       */
      authorizedMinter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("authorizedMinter")) as string | undefined },
      /**
       * Get the current value of the contractName key in global state
       */
      contractName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("contractName")) as string | undefined },
    },
  }

  public newGroup(): CultivestPortfolioNftComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mintPortfolio(account,uint64,uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      mintPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('mintPortfolio(account,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a addPositionToPortfolio(uint64,uint64,account)void method call against the CultivestPortfolioNFT contract
       */
      addPositionToPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addPositionToPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removePositionFromPortfolio(uint64,uint64,account)void method call against the CultivestPortfolioNFT contract
       */
      removePositionFromPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removePositionFromPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePortfolio(uint64,uint64,uint64,uint64)void method call against the CultivestPortfolioNFT contract
       */
      updatePortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transferPortfolio(uint64,account,account)void method call against the CultivestPortfolioNFT contract
       */
      transferPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnPortfolio(uint64,account)void method call against the CultivestPortfolioNFT contract
       */
      burnPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setPositionNFTApp(uint64)void method call against the CultivestPortfolioNFT contract
       */
      setPositionNftApp(params: CallParams<CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void'] | CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPositionNftApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getContractStats()(uint64,uint64,uint64,uint64,uint64) method call against the CultivestPortfolioNFT contract
       */
      getContractStats(params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractStats()(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a portfolioExists(uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      portfolioExists(params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.portfolioExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('portfolioExists(uint64)uint64', v))
        return this
      },
      /**
       * Add a setAuthorizedMinter(account)void method call against the CultivestPortfolioNFT contract
       */
      setAuthorizedMinter(params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAuthorizedMinter(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the CultivestPortfolioNFT contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CultivestPortfolioNftComposer
  }
}
export type CultivestPortfolioNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mintPortfolio(account,uint64,uint64)uint64 ABI method.
   *
  * Mint new portfolio token for a user
  For MVP: Portfolio metadata is stored off-chain using the logged events
  The contract only tracks basic state and emits detailed events for indexing

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['mintPortfolio(account,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the addPositionToPortfolio(uint64,uint64,account)void ABI method.
   *
  * Add position token to a portfolio token
  For MVP: This is tracked off-chain, contract just logs the assignment

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPositionToPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['addPositionToPortfolio(uint64,uint64,account)void'] | undefined]>

  /**
   * Calls the removePositionFromPortfolio(uint64,uint64,account)void ABI method.
   *
   * Remove position token from a portfolio token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removePositionFromPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['removePositionFromPortfolio(uint64,uint64,account)void'] | undefined]>

  /**
   * Calls the updatePortfolio(uint64,uint64,uint64,uint64)void ABI method.
   *
  * Update portfolio token values and performance
  For MVP: Only validates token exists via ID range, metadata tracked off-chain

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the transferPortfolio(uint64,account,account)void ABI method.
   *
  * Transfer portfolio token ownership
  For MVP: Off-chain system tracks ownership, this logs the transfer event

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['transferPortfolio(uint64,account,account)void'] | undefined]>

  /**
   * Calls the burnPortfolio(uint64,account)void ABI method.
   *
  * Burn portfolio token (close portfolio)
  For MVP: Decrements supply and logs burn event for off-chain cleanup

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['burnPortfolio(uint64,account)void'] | undefined]>

  /**
   * Calls the setPositionNFTApp(uint64)void ABI method.
   *
   * Set the Position NFT contract app ID (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPositionNftApp(params?: CallParams<CultivestPortfolioNftArgs['obj']['setPositionNFTApp(uint64)void'] | CultivestPortfolioNftArgs['tuple']['setPositionNFTApp(uint64)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['setPositionNFTApp(uint64)void'] | undefined]>

  /**
   * Calls the getContractStats()(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Get contract statistics (read-only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the portfolioExists(uint64)uint64 ABI method.
   *
  * Check if portfolio token ID is valid (read-only)
  For MVP: Only checks if token ID is in valid range
  Off-chain system tracks full portfolio metadata

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  portfolioExists(params?: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['portfolioExists(uint64)uint64'] | undefined]>

  /**
   * Calls the setAuthorizedMinter(account)void ABI method.
   *
   * Update authorized minter (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAuthorizedMinter(params?: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['setAuthorizedMinter(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CultivestPortfolioNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CultivestPortfolioNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CultivestPortfolioNftComposerResults<TReturns>>
}
export type CultivestPortfolioNftComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

