/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CultivestPortfolioNFT","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the Portfolio NFT contract","events":[],"recommendations":{}},{"name":"mintPortfolio","args":[{"type":"account","name":"owner","desc":"- The Algorand address that will own this portfolio token"},{"type":"uint64","name":"level","desc":"- Initial money tree level (1-5)"},{"type":"string","name":"metadataCID"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mint new portfolio token for a user","events":[],"recommendations":{}},{"name":"addPositionToPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"uint64","name":"positionTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add position token to a portfolio token\nProperly stores the mapping on-chain using box storage","events":[],"recommendations":{}},{"name":"removePositionFromPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"uint64","name":"positionTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove position token from a portfolio token\nProperly removes the on-chain mapping","events":[],"recommendations":{}},{"name":"getPositionPortfolio","args":[{"type":"uint64","name":"positionTokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get which portfolio a position belongs to","events":[],"recommendations":{}},{"name":"getPortfolioPositionCount","args":[{"type":"uint64","name":"portfolioTokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get number of positions in a portfolio","events":[],"recommendations":{}},{"name":"updatePortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"uint64","name":"newLevel"},{"type":"string","name":"newMetadataCID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update portfolio token values and performance","events":[],"recommendations":{}},{"name":"transferPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"account","name":"currentOwner"},{"type":"account","name":"newOwner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer portfolio token ownership","events":[],"recommendations":{}},{"name":"burnPortfolio","args":[{"type":"uint64","name":"portfolioTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Burn portfolio token (close portfolio)","events":[],"recommendations":{}},{"name":"getContractStats","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get contract statistics (read-only)","events":[],"recommendations":{}},{"name":"portfolioExists","args":[{"type":"uint64","name":"portfolioTokenId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if portfolio token ID is valid (read-only)","events":[],"recommendations":{}},{"name":"setAuthorizedMinter","args":[{"type":"account","name":"newMinter"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update authorized minter (admin only)","events":[],"recommendations":{}},{"name":"getPortfolioCountForOwner","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getPortfolioOwner","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getPortfolioLevel","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getPortfolioCreated","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getPortfolioMetadataCID","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Cultivest Portfolio NFT Smart Contract\nMints individual portfolio tokens that reference Position NFT token IDs\nEach portfolio token represents a collection of position tokens owned by a user\n\nUses box storage to maintain on-chain mappings of positions to portfolios","networks":{},"state":{"schema":{"global":{"ints":5,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextTokenId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dFRva2VuSWQ="},"totalSupply":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdXBwbHk="},"contractVersion":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udHJhY3RWZXJzaW9u"},"maxSupply":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4U3VwcGx5"},"positionNFTAppId":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9zaXRpb25ORlRBcHBJZA=="},"authorizedMinter":{"keyType":"AVMString","valueType":"address","key":"YXV0aG9yaXplZE1pbnRlcg=="},"contractName":{"keyType":"AVMString","valueType":"AVMString","key":"Y29udHJhY3ROYW1l"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"positionToPortfolio":{"keyType":"uint64","valueType":"uint64","prefix":"cG9zMnBvcnQ="},"portfolioPositionCount":{"keyType":"uint64","valueType":"uint64","prefix":"cG9ydGNvdW50"},"portfolioOwner":{"keyType":"uint64","valueType":"address","prefix":"b3duZXI="},"portfolioLevel":{"keyType":"uint64","valueType":"uint64","prefix":"bGV2ZWw="},"portfolioCreated":{"keyType":"uint64","valueType":"uint64","prefix":"Y3JlYXRlZA=="},"portfolioMetadataCID":{"keyType":"uint64","valueType":"AVMString","prefix":"aXBmcw=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1114,1242,1268,1368,1417,1978,2000,2025,2054,2080],"errorMessage":"Box must have value"},{"pc":[339,367,388,409,437,458,476,503,547,569,597,623,644,665,691,717,750],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1998],"errorMessage":"Portfolio does not exist"},{"pc":[1270],"errorMessage":"Portfolio has no positions to remove"},{"pc":[1096],"errorMessage":"Position already assigned to a portfolio"},{"pc":[1250],"errorMessage":"Position not in specified portfolio"},{"pc":[754],"errorMessage":"can only call when creating"},{"pc":[342,370,391,412,440,461,479,506,550,572,600,626,647,668,694,720],"errorMessage":"can only call when not creating"},{"pc":[861,867,872,896,906,1057,1079,1191,1213,1386,1435,1446,1607,1626,1745,1764,1771,1881,1887,1892,1897,1902,1926],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEFJhAEFR98dQtuZXh0VG9rZW5JZBBhdXRob3JpemVkTWludGVyC3RvdGFsU3VwcGx5CXBvcnRjb3VudAVvd25lcgdjcmVhdGVkBGlwZnMFbGV2ZWwIcG9zMnBvcnQJbWF4U3VwcGx5EHBvcnRmb2xpb19vd25lcjoPY29udHJhY3RWZXJzaW9uEHBvc2l0aW9uTkZUQXBwSWQScG9zaXRpb25fdG9rZW5faWQ6GXBvcnRmb2xpb19wb3NpdGlvbl9jb3VudDoxG0EAfoIRBLhEezYEPxM0tQT7lUYwBNXTY8oErQnbJgT5Mda/BB/RfzsENNnuKQSc2TVABBta6OkE4iREIQTNCz2hBOz+/VQEHaOesgTgkWbKBOaL9UAERrE/2DYaAI4RAZ0BfAFiAUgBMwEeAQQA6ADSAKYAiwB5AGQASAAzAB4AAiJDMRkURDEYRDYaAReIBq5JFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXiAZ1FihMULAjQzEZFEQxGEQ2GgEXiAZDFihMULAjQzEZFEQxGEQ2GgEXiAYcSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBF4gF4xYoTFCwI0MxGRREMRhENhoBF8AciAWnI0MxGRREMRhENhoBF4gFiYABACJPAlQoTFCwI0MxGRREMRhEiAVYTwQWTwQWTwQWTwQWTwQWTwRPBFBPA1BPAlBMUChMULAjQzEZFEQxGEQ2GgEXNhoCF8AciASSI0MxGRREMRhENhoBFzYaAhfAHDYaAxfAHIgD7CNDMRkURDEYRDYaARc2GgIXNhoDVwIAiAMpI0MxGRREMRhENhoBF4gC5BYoTFCwI0MxGRREMRhENhoBF4gCrxYoTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXwByIAewjQzEZFEQxGEQ2GgEXNhoCFzYaAxfAHIgBTiNDMRkURDEYRDYaARfAHDYaAhc2GgNXAgCIAHEWKExQsCNDMRkURDEYFESIAAIjQykjZysiZycMI2cnCoGgjQZnJw0iZyoxAGeCAgxjb250cmFjdE5hbWUVQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUZ4AacG9ydGZvbGlvX2NvbnRyYWN0X2NyZWF0ZWSwiYoDATEAIiplRBJEIitlRCInCmVEDESL/kEAoov+JA5BAJsjRIv/FUQiKWVESSMIKUxnIitlRCMIK0xnSRYnBEsBUCIWvycFSwFQi/2/JwZLAVAyBxa/JwdLAVBJvEiL/78nCEsBUIv+FkxLAb+AEXBvcnRmb2xpb19taW50ZWQ6TwJQsCcLi/1QsIAQcG9ydGZvbGlvX2xldmVsOkxQsIAXcG9ydGZvbGlvX21ldGFkYXRhX2NpZDqL/1CwiSJC/2KKAwCL/UEAeCIpZUSL/Q1BAG4jRIv+RDEAi/8SMQAiKmVEEhFEi/4WJwlLAVBJvUUBFESL/RZMSwG/JwRLAVBJvkwXTEQjCBZMSwG/gBxwb3NpdGlvbl9hZGRlZF90b19wb3J0Zm9saW86TwJQsCcOTwJQsCcLi/9QsCcPTFCwiSJC/4+KAwAiSYv9QQCWIillRIv9DUEAjCNEi/5EMQCL/xIxACIqZUQSEUSL/hZJjAEnCUxQSYwAvUUBQQBiiwC+TBdMRIv9EkEAVSNEiwC8SIv9FicESwFQSb5MF0xESUQjCRZMSwG/gCBwb3NpdGlvbl9yZW1vdmVkX2Zyb21fcG9ydGZvbGlvOk8CULAnDosBULAnC4v/ULAnD0xQsIkiQv+oIkL/cYoBAYv/RIv/FicJTFBJvUUBQQAJiwC+TBdMREyJIkyJigEBIov/QQAoIillRIv/DUEAHiNEi/8WJwRMUEmMAL1FAUEACYsAvkwXTERMiSJMiSJC/9+KAwAxACIqZUQSRIv9QQCVIillRIv9DUEAiyNEi/5BAICL/iQOQQB5I0SL/xVBAA2L/RYnB0xQSbxIi/+/i/5BAAuL/RYnCExQi/4Wv4v9FoAScG9ydGZvbGlvX3VwZGF0ZWQ6TFCwi/4WgBRwb3J0Zm9saW9fbmV3X2xldmVsOkxQsIAXcG9ydGZvbGlvX25ld19tZXRhZGF0YTqL/1CwiSJC/4QiQv9yigMAi/1BAH4iKWVEi/0NQQB0I0QxAIv+EjEAIiplRBIRRIv9FicFSwFQi/+/JwZLAVAyBxa/gBZwb3J0Zm9saW9fdHJhbnNmZXJyZWQ6TFCwgBRwb3J0Zm9saW9fb2xkX293bmVyOov+ULCAFHBvcnRmb2xpb19uZXdfb3duZXI6i/9QsIkiQv+JigIAi/5BAIQiKWVEi/4NQQB6I0QxAIv/EjEAIiplRBIRRCIrZUQjCStMZ4v+FicFSwFQvEgnBEsBULxIJwlLAVC8SCcISwFQvEgnBksBULxIJwdLAVC8SIARcG9ydGZvbGlvX2J1cm5lZDpMULCAF3BvcnRmb2xpb19idXJuZWRfb3duZXI6i/9QsIkiQv+DIillRCMJIitlRCInCmVEIicMZUQiJw1lRImKAQGL/xYnBUxQvUUBiYoBADEAIiplRBJEKov/Z4APbWludGVyX3VwZGF0ZWQ6i/9QsImKAQGL/xYnBExQSb1FAUEACYsAvkwXTERMiSJMiYoBAYv/FicFTFBJvUUBRL5EiYoBAYv/FicITFBJvUUBQQAJiwC+TBdMREyJIkyJigEBi/8WJwZMUEm9RQFBAAmLAL5MF0xETIkiTImKAQGL/xYnB0xQSb1FAUEABosAvkRMiYAATIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CultivestPortfolioNft contract
 */
export type CultivestPortfolioNftArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'mintPortfolio(account,uint64,string)uint64': {
      /**
       * - The Algorand address that will own this portfolio token
       */
      owner: Uint8Array | string
      /**
       * - Initial money tree level (1-5)
       */
      level: bigint | number
      metadataCid: string
    }
    'addPositionToPortfolio(uint64,uint64,account)void': {
      portfolioTokenId: bigint | number
      positionTokenId: bigint | number
      owner: Uint8Array | string
    }
    'removePositionFromPortfolio(uint64,uint64,account)void': {
      portfolioTokenId: bigint | number
      positionTokenId: bigint | number
      owner: Uint8Array | string
    }
    'getPositionPortfolio(uint64)uint64': {
      positionTokenId: bigint | number
    }
    'getPortfolioPositionCount(uint64)uint64': {
      portfolioTokenId: bigint | number
    }
    'updatePortfolio(uint64,uint64,string)void': {
      portfolioTokenId: bigint | number
      newLevel: bigint | number
      newMetadataCid: string
    }
    'transferPortfolio(uint64,account,account)void': {
      portfolioTokenId: bigint | number
      currentOwner: Uint8Array | string
      newOwner: Uint8Array | string
    }
    'burnPortfolio(uint64,account)void': {
      portfolioTokenId: bigint | number
      owner: Uint8Array | string
    }
    'getContractStats()(uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'portfolioExists(uint64)bool': {
      portfolioTokenId: bigint | number
    }
    'setAuthorizedMinter(account)void': {
      newMinter: Uint8Array | string
    }
    'getPortfolioCountForOwner(uint64)uint64': {
      tokenId: bigint | number
    }
    'getPortfolioOwner(uint64)byte[]': {
      tokenId: bigint | number
    }
    'getPortfolioLevel(uint64)uint64': {
      tokenId: bigint | number
    }
    'getPortfolioCreated(uint64)uint64': {
      tokenId: bigint | number
    }
    'getPortfolioMetadataCID(uint64)string': {
      tokenId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'mintPortfolio(account,uint64,string)uint64': [owner: Uint8Array | string, level: bigint | number, metadataCid: string]
    'addPositionToPortfolio(uint64,uint64,account)void': [portfolioTokenId: bigint | number, positionTokenId: bigint | number, owner: Uint8Array | string]
    'removePositionFromPortfolio(uint64,uint64,account)void': [portfolioTokenId: bigint | number, positionTokenId: bigint | number, owner: Uint8Array | string]
    'getPositionPortfolio(uint64)uint64': [positionTokenId: bigint | number]
    'getPortfolioPositionCount(uint64)uint64': [portfolioTokenId: bigint | number]
    'updatePortfolio(uint64,uint64,string)void': [portfolioTokenId: bigint | number, newLevel: bigint | number, newMetadataCid: string]
    'transferPortfolio(uint64,account,account)void': [portfolioTokenId: bigint | number, currentOwner: Uint8Array | string, newOwner: Uint8Array | string]
    'burnPortfolio(uint64,account)void': [portfolioTokenId: bigint | number, owner: Uint8Array | string]
    'getContractStats()(uint64,uint64,uint64,uint64,uint64)': []
    'portfolioExists(uint64)bool': [portfolioTokenId: bigint | number]
    'setAuthorizedMinter(account)void': [newMinter: Uint8Array | string]
    'getPortfolioCountForOwner(uint64)uint64': [tokenId: bigint | number]
    'getPortfolioOwner(uint64)byte[]': [tokenId: bigint | number]
    'getPortfolioLevel(uint64)uint64': [tokenId: bigint | number]
    'getPortfolioCreated(uint64)uint64': [tokenId: bigint | number]
    'getPortfolioMetadataCID(uint64)string': [tokenId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CultivestPortfolioNftReturns = {
  'createApplication()void': void
  'mintPortfolio(account,uint64,string)uint64': bigint
  'addPositionToPortfolio(uint64,uint64,account)void': void
  'removePositionFromPortfolio(uint64,uint64,account)void': void
  'getPositionPortfolio(uint64)uint64': bigint
  'getPortfolioPositionCount(uint64)uint64': bigint
  'updatePortfolio(uint64,uint64,string)void': void
  'transferPortfolio(uint64,account,account)void': void
  'burnPortfolio(uint64,account)void': void
  'getContractStats()(uint64,uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint, bigint]
  'portfolioExists(uint64)bool': boolean
  'setAuthorizedMinter(account)void': void
  'getPortfolioCountForOwner(uint64)uint64': bigint
  'getPortfolioOwner(uint64)byte[]': Uint8Array
  'getPortfolioLevel(uint64)uint64': bigint
  'getPortfolioCreated(uint64)uint64': bigint
  'getPortfolioMetadataCID(uint64)string': string
}

/**
 * Defines the types of available calls and state of the CultivestPortfolioNft smart contract.
 */
export type CultivestPortfolioNftTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CultivestPortfolioNftArgs['obj']['createApplication()void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['createApplication()void']
      returns: CultivestPortfolioNftReturns['createApplication()void']
    }>
    & Record<'mintPortfolio(account,uint64,string)uint64' | 'mintPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']
      returns: CultivestPortfolioNftReturns['mintPortfolio(account,uint64,string)uint64']
    }>
    & Record<'addPositionToPortfolio(uint64,uint64,account)void' | 'addPositionToPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']
      returns: CultivestPortfolioNftReturns['addPositionToPortfolio(uint64,uint64,account)void']
    }>
    & Record<'removePositionFromPortfolio(uint64,uint64,account)void' | 'removePositionFromPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']
      returns: CultivestPortfolioNftReturns['removePositionFromPortfolio(uint64,uint64,account)void']
    }>
    & Record<'getPositionPortfolio(uint64)uint64' | 'getPositionPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']
      returns: CultivestPortfolioNftReturns['getPositionPortfolio(uint64)uint64']
    }>
    & Record<'getPortfolioPositionCount(uint64)uint64' | 'getPortfolioPositionCount', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']
      returns: CultivestPortfolioNftReturns['getPortfolioPositionCount(uint64)uint64']
    }>
    & Record<'updatePortfolio(uint64,uint64,string)void' | 'updatePortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']
      returns: CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,string)void']
    }>
    & Record<'transferPortfolio(uint64,account,account)void' | 'transferPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']
      returns: CultivestPortfolioNftReturns['transferPortfolio(uint64,account,account)void']
    }>
    & Record<'burnPortfolio(uint64,account)void' | 'burnPortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']
      returns: CultivestPortfolioNftReturns['burnPortfolio(uint64,account)void']
    }>
    & Record<'getContractStats()(uint64,uint64,uint64,uint64,uint64)' | 'getContractStats', {
      argsObj: CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
      returns: CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'portfolioExists(uint64)bool' | 'portfolioExists', {
      argsObj: CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool']
      argsTuple: CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']
      returns: CultivestPortfolioNftReturns['portfolioExists(uint64)bool']
    }>
    & Record<'setAuthorizedMinter(account)void' | 'setAuthorizedMinter', {
      argsObj: CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']
      returns: CultivestPortfolioNftReturns['setAuthorizedMinter(account)void']
    }>
    & Record<'getPortfolioCountForOwner(uint64)uint64' | 'getPortfolioCountForOwner', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']
      returns: CultivestPortfolioNftReturns['getPortfolioCountForOwner(uint64)uint64']
    }>
    & Record<'getPortfolioOwner(uint64)byte[]' | 'getPortfolioOwner', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']
      returns: CultivestPortfolioNftReturns['getPortfolioOwner(uint64)byte[]']
    }>
    & Record<'getPortfolioLevel(uint64)uint64' | 'getPortfolioLevel', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']
      returns: CultivestPortfolioNftReturns['getPortfolioLevel(uint64)uint64']
    }>
    & Record<'getPortfolioCreated(uint64)uint64' | 'getPortfolioCreated', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']
      returns: CultivestPortfolioNftReturns['getPortfolioCreated(uint64)uint64']
    }>
    & Record<'getPortfolioMetadataCID(uint64)string' | 'getPortfolioMetadataCID', {
      argsObj: CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string']
      argsTuple: CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']
      returns: CultivestPortfolioNftReturns['getPortfolioMetadataCID(uint64)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextTokenId: bigint
        totalSupply: bigint
        contractVersion: bigint
        maxSupply: bigint
        positionNftAppId: bigint
        authorizedMinter: string
        contractName: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        positionToPortfolio: Map<bigint | number, bigint>
        portfolioPositionCount: Map<bigint | number, bigint>
        portfolioOwner: Map<bigint | number, string>
        portfolioLevel: Map<bigint | number, bigint>
        portfolioCreated: Map<bigint | number, bigint>
        portfolioMetadataCid: Map<bigint | number, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CultivestPortfolioNftSignatures = keyof CultivestPortfolioNftTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CultivestPortfolioNftNonVoidMethodSignatures = keyof CultivestPortfolioNftTypes['methods'] extends infer T ? T extends keyof CultivestPortfolioNftTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CultivestPortfolioNft smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CultivestPortfolioNftSignatures> = CultivestPortfolioNftTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CultivestPortfolioNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CultivestPortfolioNftSignatures> = CultivestPortfolioNftTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CultivestPortfolioNftTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CultivestPortfolioNftTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CultivestPortfolioNftCreateCallParams =
  | Expand<CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CultivestPortfolioNftDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CultivestPortfolioNftCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CultivestPortfolioNft smart contract
 */
export abstract class CultivestPortfolioNftParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CultivestPortfolioNftCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CultivestPortfolioNftParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CultivestPortfolioNFT smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mintPortfolio(account,uint64,string)uint64 ABI method
   *
   * Mint new portfolio token for a user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintPortfolio(account,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.level, params.args.metadataCid],
    }
  }
  /**
   * Constructs a no op call for the addPositionToPortfolio(uint64,uint64,account)void ABI method
   *
  * Add position token to a portfolio token
  Properly stores the mapping on-chain using box storage

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPositionToPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addPositionToPortfolio(uint64,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.positionTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the removePositionFromPortfolio(uint64,uint64,account)void ABI method
   *
  * Remove position token from a portfolio token
  Properly removes the on-chain mapping

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removePositionFromPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removePositionFromPortfolio(uint64,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.positionTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the getPositionPortfolio(uint64)uint64 ABI method
   *
   * Get which portfolio a position belongs to
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPositionPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPositionPortfolio(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.positionTokenId],
    }
  }
  /**
   * Constructs a no op call for the getPortfolioPositionCount(uint64)uint64 ABI method
   *
   * Get number of positions in a portfolio
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPortfolioPositionCount(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPortfolioPositionCount(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId],
    }
  }
  /**
   * Constructs a no op call for the updatePortfolio(uint64,uint64,string)void ABI method
   *
   * Update portfolio token values and performance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePortfolio(uint64,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.newLevel, params.args.newMetadataCid],
    }
  }
  /**
   * Constructs a no op call for the transferPortfolio(uint64,account,account)void ABI method
   *
   * Transfer portfolio token ownership
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferPortfolio(uint64,account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.currentOwner, params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the burnPortfolio(uint64,account)void ABI method
   *
   * Burn portfolio token (close portfolio)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnPortfolio(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the getContractStats()(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Get contract statistics (read-only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractStats()(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the portfolioExists(uint64)bool ABI method
   *
   * Check if portfolio token ID is valid (read-only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static portfolioExists(params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'portfolioExists(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.portfolioTokenId],
    }
  }
  /**
   * Constructs a no op call for the setAuthorizedMinter(account)void ABI method
   *
   * Update authorized minter (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAuthorizedMinter(params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAuthorizedMinter(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMinter],
    }
  }
  /**
   * Constructs a no op call for the getPortfolioCountForOwner(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPortfolioCountForOwner(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPortfolioCountForOwner(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPortfolioOwner(uint64)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPortfolioOwner(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPortfolioOwner(uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPortfolioLevel(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPortfolioLevel(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPortfolioLevel(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPortfolioCreated(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPortfolioCreated(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPortfolioCreated(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPortfolioMetadataCID(uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPortfolioMetadataCid(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPortfolioMetadataCID(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CultivestPortfolioNFT smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CultivestPortfolioNftFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CultivestPortfolioNftFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CultivestPortfolioNftClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CultivestPortfolioNftClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CultivestPortfolioNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CultivestPortfolioNftDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CultivestPortfolioNftParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CultivestPortfolioNftCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CultivestPortfolioNftClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize the Portfolio NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize the Portfolio NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize the Portfolio NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CultivestPortfolioNftReturns['createApplication()void']) }, appClient: new CultivestPortfolioNftClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CultivestPortfolioNFT smart contract
 */
export class CultivestPortfolioNftClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CultivestPortfolioNftClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CultivestPortfolioNft app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CultivestPortfolioNftClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CultivestPortfolioNftNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CultivestPortfolioNftClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CultivestPortfolioNftClient> {
    return new CultivestPortfolioNftClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CultivestPortfolioNftClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CultivestPortfolioNftClient> {
    return new CultivestPortfolioNftClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `mintPortfolio(account,uint64,string)uint64` ABI method.
     *
     * Mint new portfolio token for a user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.mintPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `addPositionToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Add position token to a portfolio token
    Properly stores the mapping on-chain using box storage

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addPositionToPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.addPositionToPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `removePositionFromPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Remove position token from a portfolio token
    Properly removes the on-chain mapping

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removePositionFromPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.removePositionFromPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPositionPortfolio(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get which portfolio a position belongs to
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPositionPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPositionPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioPositionCount(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get number of positions in a portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPortfolioPositionCount: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPortfolioPositionCount(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,string)void` ABI method.
     *
     * Update portfolio token values and performance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferPortfolio(uint64,account,account)void` ABI method.
     *
     * Transfer portfolio token ownership
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.transferPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `burnPortfolio(uint64,account)void` ABI method.
     *
     * Burn portfolio token (close portfolio)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.burnPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if portfolio token ID is valid (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    portfolioExists: (params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAuthorizedMinter: (params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.setAuthorizedMinter(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioCountForOwner(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPortfolioCountForOwner: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPortfolioCountForOwner(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioOwner(uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPortfolioOwner: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPortfolioOwner(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioLevel(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPortfolioLevel: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPortfolioLevel(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioCreated(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPortfolioCreated: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPortfolioCreated(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioMetadataCID(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPortfolioMetadataCid: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.getPortfolioMetadataCid(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `mintPortfolio(account,uint64,string)uint64` ABI method.
     *
     * Mint new portfolio token for a user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.mintPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `addPositionToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Add position token to a portfolio token
    Properly stores the mapping on-chain using box storage

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addPositionToPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.addPositionToPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `removePositionFromPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Remove position token from a portfolio token
    Properly removes the on-chain mapping

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removePositionFromPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.removePositionFromPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPositionPortfolio(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get which portfolio a position belongs to
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPositionPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPositionPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioPositionCount(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get number of positions in a portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPortfolioPositionCount: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPortfolioPositionCount(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,string)void` ABI method.
     *
     * Update portfolio token values and performance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferPortfolio(uint64,account,account)void` ABI method.
     *
     * Transfer portfolio token ownership
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.transferPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `burnPortfolio(uint64,account)void` ABI method.
     *
     * Burn portfolio token (close portfolio)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnPortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.burnPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if portfolio token ID is valid (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    portfolioExists: (params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAuthorizedMinter: (params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.setAuthorizedMinter(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioCountForOwner(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPortfolioCountForOwner: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPortfolioCountForOwner(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioOwner(uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPortfolioOwner: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPortfolioOwner(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioLevel(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPortfolioLevel: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPortfolioLevel(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioCreated(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPortfolioCreated: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPortfolioCreated(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioMetadataCID(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPortfolioMetadataCid: (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.getPortfolioMetadataCid(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `mintPortfolio(account,uint64,string)uint64` ABI method.
     *
     * Mint new portfolio token for a user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.mintPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['mintPortfolio(account,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `addPositionToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Add position token to a portfolio token
    Properly stores the mapping on-chain using box storage

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addPositionToPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.addPositionToPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['addPositionToPortfolio(uint64,uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `removePositionFromPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Remove position token from a portfolio token
    Properly removes the on-chain mapping

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removePositionFromPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.removePositionFromPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['removePositionFromPortfolio(uint64,uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPositionPortfolio(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get which portfolio a position belongs to
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPositionPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPositionPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPositionPortfolio(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioPositionCount(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get number of positions in a portfolio
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPortfolioPositionCount: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioPositionCount(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPortfolioPositionCount(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,string)void` ABI method.
     *
     * Update portfolio token values and performance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,string)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferPortfolio(uint64,account,account)void` ABI method.
     *
     * Transfer portfolio token ownership
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.transferPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['transferPortfolio(uint64,account,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `burnPortfolio(uint64,account)void` ABI method.
     *
     * Burn portfolio token (close portfolio)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnPortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.burnPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['burnPortfolio(uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if portfolio token ID is valid (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    portfolioExists: async (params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['portfolioExists(uint64)bool'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAuthorizedMinter: async (params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.setAuthorizedMinter(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['setAuthorizedMinter(account)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioCountForOwner(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPortfolioCountForOwner: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioCountForOwner(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPortfolioCountForOwner(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioOwner(uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPortfolioOwner: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioOwner(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPortfolioOwner(uint64)byte[]'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioLevel(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPortfolioLevel: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioLevel(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPortfolioLevel(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioCreated(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPortfolioCreated: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioCreated(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPortfolioCreated(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `getPortfolioMetadataCID(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPortfolioMetadataCid: async (params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioMetadataCid(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['getPortfolioMetadataCID(uint64)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CultivestPortfolioNftClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPositionPortfolio(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get which portfolio a position belongs to
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPositionPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPositionPortfolio(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPositionPortfolio(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPortfolioPositionCount(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get number of positions in a portfolio
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPortfolioPositionCount(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioPositionCount(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPortfolioPositionCount(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get contract statistics (read-only)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getContractStats(params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getContractStats(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `portfolioExists(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if portfolio token ID is valid (read-only)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async portfolioExists(params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.portfolioExists(params))
    return result.return as unknown as CultivestPortfolioNftReturns['portfolioExists(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPortfolioCountForOwner(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPortfolioCountForOwner(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioCountForOwner(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPortfolioCountForOwner(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPortfolioOwner(uint64)byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPortfolioOwner(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioOwner(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPortfolioOwner(uint64)byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPortfolioLevel(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPortfolioLevel(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioLevel(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPortfolioLevel(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPortfolioCreated(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPortfolioCreated(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioCreated(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPortfolioCreated(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPortfolioNFT smart contract using the `getPortfolioMetadataCID(uint64)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPortfolioMetadataCid(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']>) {
    const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.getPortfolioMetadataCid(params))
    return result.return as unknown as CultivestPortfolioNftReturns['getPortfolioMetadataCID(uint64)string']
  }

  /**
   * Methods to access state for the current CultivestPortfolioNFT app
   */
  state = {
    /**
     * Methods to access global state for the current CultivestPortfolioNFT app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextTokenId: result.nextTokenId,
          totalSupply: result.totalSupply,
          contractVersion: result.contractVersion,
          maxSupply: result.maxSupply,
          positionNftAppId: result.positionNFTAppId,
          authorizedMinter: result.authorizedMinter,
          contractName: result.contractName,
        }
      },
      /**
       * Get the current value of the nextTokenId key in global state
       */
      nextTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextTokenId")) as bigint | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
      /**
       * Get the current value of the contractVersion key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractVersion")) as bigint | undefined },
      /**
       * Get the current value of the maxSupply key in global state
       */
      maxSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxSupply")) as bigint | undefined },
      /**
       * Get the current value of the positionNFTAppId key in global state
       */
      positionNftAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("positionNFTAppId")) as bigint | undefined },
      /**
       * Get the current value of the authorizedMinter key in global state
       */
      authorizedMinter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("authorizedMinter")) as string | undefined },
      /**
       * Get the current value of the contractName key in global state
       */
      contractName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("contractName")) as string | undefined },
    },
    /**
     * Methods to access box state for the current CultivestPortfolioNFT app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the positionToPortfolio map in box state
       */
      positionToPortfolio: {
        /**
         * Get all current values of the positionToPortfolio map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("positionToPortfolio")) as Map<bigint, bigint> },
        /**
         * Get a current value of the positionToPortfolio map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("positionToPortfolio", key) as bigint | undefined },
      },
      /**
       * Get values from the portfolioPositionCount map in box state
       */
      portfolioPositionCount: {
        /**
         * Get all current values of the portfolioPositionCount map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("portfolioPositionCount")) as Map<bigint, bigint> },
        /**
         * Get a current value of the portfolioPositionCount map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("portfolioPositionCount", key) as bigint | undefined },
      },
      /**
       * Get values from the portfolioOwner map in box state
       */
      portfolioOwner: {
        /**
         * Get all current values of the portfolioOwner map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("portfolioOwner")) as Map<bigint, string> },
        /**
         * Get a current value of the portfolioOwner map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("portfolioOwner", key) as string | undefined },
      },
      /**
       * Get values from the portfolioLevel map in box state
       */
      portfolioLevel: {
        /**
         * Get all current values of the portfolioLevel map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("portfolioLevel")) as Map<bigint, bigint> },
        /**
         * Get a current value of the portfolioLevel map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("portfolioLevel", key) as bigint | undefined },
      },
      /**
       * Get values from the portfolioCreated map in box state
       */
      portfolioCreated: {
        /**
         * Get all current values of the portfolioCreated map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("portfolioCreated")) as Map<bigint, bigint> },
        /**
         * Get a current value of the portfolioCreated map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("portfolioCreated", key) as bigint | undefined },
      },
      /**
       * Get values from the portfolioMetadataCID map in box state
       */
      portfolioMetadataCid: {
        /**
         * Get all current values of the portfolioMetadataCID map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("portfolioMetadataCID")) as Map<bigint, string> },
        /**
         * Get a current value of the portfolioMetadataCID map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("portfolioMetadataCID", key) as string | undefined },
      },
    },
  }

  public newGroup(): CultivestPortfolioNftComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mintPortfolio(account,uint64,string)uint64 method call against the CultivestPortfolioNFT contract
       */
      mintPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('mintPortfolio(account,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a addPositionToPortfolio(uint64,uint64,account)void method call against the CultivestPortfolioNFT contract
       */
      addPositionToPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addPositionToPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removePositionFromPortfolio(uint64,uint64,account)void method call against the CultivestPortfolioNFT contract
       */
      removePositionFromPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removePositionFromPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPositionPortfolio(uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      getPositionPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPositionPortfolio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPositionPortfolio(uint64)uint64', v))
        return this
      },
      /**
       * Add a getPortfolioPositionCount(uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      getPortfolioPositionCount(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPortfolioPositionCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPortfolioPositionCount(uint64)uint64', v))
        return this
      },
      /**
       * Add a updatePortfolio(uint64,uint64,string)void method call against the CultivestPortfolioNFT contract
       */
      updatePortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transferPortfolio(uint64,account,account)void method call against the CultivestPortfolioNFT contract
       */
      transferPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnPortfolio(uint64,account)void method call against the CultivestPortfolioNFT contract
       */
      burnPortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getContractStats()(uint64,uint64,uint64,uint64,uint64) method call against the CultivestPortfolioNFT contract
       */
      getContractStats(params: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractStats()(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a portfolioExists(uint64)bool method call against the CultivestPortfolioNFT contract
       */
      portfolioExists(params: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.portfolioExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('portfolioExists(uint64)bool', v))
        return this
      },
      /**
       * Add a setAuthorizedMinter(account)void method call against the CultivestPortfolioNFT contract
       */
      setAuthorizedMinter(params: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAuthorizedMinter(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPortfolioCountForOwner(uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      getPortfolioCountForOwner(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPortfolioCountForOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPortfolioCountForOwner(uint64)uint64', v))
        return this
      },
      /**
       * Add a getPortfolioOwner(uint64)byte[] method call against the CultivestPortfolioNFT contract
       */
      getPortfolioOwner(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPortfolioOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPortfolioOwner(uint64)byte[]', v))
        return this
      },
      /**
       * Add a getPortfolioLevel(uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      getPortfolioLevel(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPortfolioLevel(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPortfolioLevel(uint64)uint64', v))
        return this
      },
      /**
       * Add a getPortfolioCreated(uint64)uint64 method call against the CultivestPortfolioNFT contract
       */
      getPortfolioCreated(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPortfolioCreated(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPortfolioCreated(uint64)uint64', v))
        return this
      },
      /**
       * Add a getPortfolioMetadataCID(uint64)string method call against the CultivestPortfolioNFT contract
       */
      getPortfolioMetadataCid(params: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPortfolioMetadataCid(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPortfolioMetadataCID(uint64)string', v))
        return this
      },
      /**
       * Add a clear state call to the CultivestPortfolioNFT contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CultivestPortfolioNftComposer
  }
}
export type CultivestPortfolioNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mintPortfolio(account,uint64,string)uint64 ABI method.
   *
   * Mint new portfolio token for a user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['mintPortfolio(account,uint64,string)uint64'] | CultivestPortfolioNftArgs['tuple']['mintPortfolio(account,uint64,string)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['mintPortfolio(account,uint64,string)uint64'] | undefined]>

  /**
   * Calls the addPositionToPortfolio(uint64,uint64,account)void ABI method.
   *
  * Add position token to a portfolio token
  Properly stores the mapping on-chain using box storage

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPositionToPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['addPositionToPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['addPositionToPortfolio(uint64,uint64,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['addPositionToPortfolio(uint64,uint64,account)void'] | undefined]>

  /**
   * Calls the removePositionFromPortfolio(uint64,uint64,account)void ABI method.
   *
  * Remove position token from a portfolio token
  Properly removes the on-chain mapping

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removePositionFromPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['removePositionFromPortfolio(uint64,uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['removePositionFromPortfolio(uint64,uint64,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['removePositionFromPortfolio(uint64,uint64,account)void'] | undefined]>

  /**
   * Calls the getPositionPortfolio(uint64)uint64 ABI method.
   *
   * Get which portfolio a position belongs to
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPositionPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPositionPortfolio(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPositionPortfolio(uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPositionPortfolio(uint64)uint64'] | undefined]>

  /**
   * Calls the getPortfolioPositionCount(uint64)uint64 ABI method.
   *
   * Get number of positions in a portfolio
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPortfolioPositionCount(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioPositionCount(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioPositionCount(uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPortfolioPositionCount(uint64)uint64'] | undefined]>

  /**
   * Calls the updatePortfolio(uint64,uint64,string)void ABI method.
   *
   * Update portfolio token values and performance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,string)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,string)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,string)void'] | undefined]>

  /**
   * Calls the transferPortfolio(uint64,account,account)void ABI method.
   *
   * Transfer portfolio token ownership
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['transferPortfolio(uint64,account,account)void'] | CultivestPortfolioNftArgs['tuple']['transferPortfolio(uint64,account,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['transferPortfolio(uint64,account,account)void'] | undefined]>

  /**
   * Calls the burnPortfolio(uint64,account)void ABI method.
   *
   * Burn portfolio token (close portfolio)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnPortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['burnPortfolio(uint64,account)void'] | CultivestPortfolioNftArgs['tuple']['burnPortfolio(uint64,account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['burnPortfolio(uint64,account)void'] | undefined]>

  /**
   * Calls the getContractStats()(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Get contract statistics (read-only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<CultivestPortfolioNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | CultivestPortfolioNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64,uint64)']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getContractStats()(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the portfolioExists(uint64)bool ABI method.
   *
   * Check if portfolio token ID is valid (read-only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  portfolioExists(params?: CallParams<CultivestPortfolioNftArgs['obj']['portfolioExists(uint64)bool'] | CultivestPortfolioNftArgs['tuple']['portfolioExists(uint64)bool']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['portfolioExists(uint64)bool'] | undefined]>

  /**
   * Calls the setAuthorizedMinter(account)void ABI method.
   *
   * Update authorized minter (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAuthorizedMinter(params?: CallParams<CultivestPortfolioNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPortfolioNftArgs['tuple']['setAuthorizedMinter(account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['setAuthorizedMinter(account)void'] | undefined]>

  /**
   * Calls the getPortfolioCountForOwner(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPortfolioCountForOwner(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCountForOwner(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCountForOwner(uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPortfolioCountForOwner(uint64)uint64'] | undefined]>

  /**
   * Calls the getPortfolioOwner(uint64)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPortfolioOwner(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioOwner(uint64)byte[]'] | CultivestPortfolioNftArgs['tuple']['getPortfolioOwner(uint64)byte[]']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPortfolioOwner(uint64)byte[]'] | undefined]>

  /**
   * Calls the getPortfolioLevel(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPortfolioLevel(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioLevel(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioLevel(uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPortfolioLevel(uint64)uint64'] | undefined]>

  /**
   * Calls the getPortfolioCreated(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPortfolioCreated(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioCreated(uint64)uint64'] | CultivestPortfolioNftArgs['tuple']['getPortfolioCreated(uint64)uint64']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPortfolioCreated(uint64)uint64'] | undefined]>

  /**
   * Calls the getPortfolioMetadataCID(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPortfolioMetadataCid(params?: CallParams<CultivestPortfolioNftArgs['obj']['getPortfolioMetadataCID(uint64)string'] | CultivestPortfolioNftArgs['tuple']['getPortfolioMetadataCID(uint64)string']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['getPortfolioMetadataCID(uint64)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CultivestPortfolioNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CultivestPortfolioNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CultivestPortfolioNftComposerResults<TReturns>>
}
export type CultivestPortfolioNftComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

