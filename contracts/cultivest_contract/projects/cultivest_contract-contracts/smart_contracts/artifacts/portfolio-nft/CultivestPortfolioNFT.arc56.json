{
    "name": "CultivestPortfolioNFT",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the Portfolio NFT contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mintPortfolio",
            "args": [
                {
                    "type": "account",
                    "name": "owner",
                    "desc": "- The Algorand address that will own this portfolio token"
                },
                {
                    "type": "uint64",
                    "name": "level",
                    "desc": "- Initial money tree level (1-5)"
                },
                {
                    "type": "string",
                    "name": "metadataCID"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint new portfolio token for a user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addPositionToPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add position token to a portfolio token\nProperly stores the mapping on-chain using box storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removePositionFromPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove position token from a portfolio token\nProperly removes the on-chain mapping",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPositionPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get which portfolio a position belongs to",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioPositionCount",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get number of positions in a portfolio",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updatePortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "uint64",
                    "name": "newLevel"
                },
                {
                    "type": "string",
                    "name": "newMetadataCID"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update portfolio token values and performance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "currentOwner"
                },
                {
                    "type": "account",
                    "name": "newOwner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer portfolio token ownership",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burnPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Burn portfolio token (close portfolio)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract statistics (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "portfolioExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if portfolio token ID is valid (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAuthorizedMinter",
            "args": [
                {
                    "type": "account",
                    "name": "newMinter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update authorized minter (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioCountForOwner",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioOwner",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioLevel",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioCreated",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioMetadataCID",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Cultivest Portfolio NFT Smart Contract\nMints individual portfolio tokens that reference Position NFT token IDs\nEach portfolio token represents a collection of position tokens owned by a user\n\nUses box storage to maintain on-chain mappings of positions to portfolios",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 5,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "nextTokenId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dFRva2VuSWQ="
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdXBwbHk="
                },
                "contractVersion": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RWZXJzaW9u"
                },
                "maxSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4U3VwcGx5"
                },
                "positionNFTAppId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9zaXRpb25ORlRBcHBJZA=="
                },
                "authorizedMinter": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXV0aG9yaXplZE1pbnRlcg=="
                },
                "contractName": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y29udHJhY3ROYW1l"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "positionToPortfolio": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "cG9zMnBvcnQ="
                },
                "portfolioPositionCount": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "cG9ydGNvdW50"
                },
                "portfolioOwner": {
                    "keyType": "uint64",
                    "valueType": "address",
                    "prefix": "b3duZXI="
                },
                "portfolioLevel": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "bGV2ZWw="
                },
                "portfolioCreated": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "Y3JlYXRlZA=="
                },
                "portfolioMetadataCID": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": "aXBmcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1114,
                        1242,
                        1268,
                        1368,
                        1417,
                        1957,
                        1979,
                        2004,
                        2033,
                        2059
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        339,
                        367,
                        388,
                        409,
                        437,
                        458,
                        476,
                        503,
                        547,
                        569,
                        597,
                        623,
                        644,
                        665,
                        691,
                        717,
                        750
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1977
                    ],
                    "errorMessage": "Portfolio does not exist"
                },
                {
                    "pc": [
                        1270
                    ],
                    "errorMessage": "Portfolio has no positions to remove"
                },
                {
                    "pc": [
                        1096
                    ],
                    "errorMessage": "Position already assigned to a portfolio"
                },
                {
                    "pc": [
                        1250
                    ],
                    "errorMessage": "Position not in specified portfolio"
                },
                {
                    "pc": [
                        754
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        342,
                        370,
                        391,
                        412,
                        440,
                        461,
                        479,
                        506,
                        550,
                        572,
                        600,
                        626,
                        647,
                        668,
                        694,
                        720
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        861,
                        867,
                        872,
                        896,
                        906,
                        1057,
                        1079,
                        1191,
                        1213,
                        1386,
                        1435,
                        1446,
                        1607,
                        1626,
                        1745,
                        1764,
                        1771,
                        1860,
                        1866,
                        1871,
                        1876,
                        1881,
                        1905
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDUKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAibmV4dFRva2VuSWQiICJhdXRob3JpemVkTWludGVyIiAidG90YWxTdXBwbHkiICJwb3J0Y291bnQiICJvd25lciIgInBvczJwb3J0IiAibWF4U3VwcGx5IiAiY3JlYXRlZCIgImlwZnMiICJsZXZlbCIgInBvcnRmb2xpb19vd25lcjoiICJjb250cmFjdFZlcnNpb24iICJwb3NpdGlvbk5GVEFwcElkIiAicG9zaXRpb25fdG9rZW5faWQ6IiAicG9ydGZvbGlvX3Bvc2l0aW9uX2NvdW50OiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjExLTIwCiAgICAvLyBAY29udHJhY3QoewogICAgLy8gICBuYW1lOiAnQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUJywKICAgIC8vICAgc3RhdGVUb3RhbHM6IHsKICAgIC8vICAgICBnbG9iYWxVaW50czogNSwgICAvLyBuZXh0VG9rZW5JZCwgdG90YWxTdXBwbHksIGNvbnRyYWN0VmVyc2lvbiwgbWF4U3VwcGx5LCBwb3NpdGlvbk5GVEFwcElkCiAgICAvLyAgICAgZ2xvYmFsQnl0ZXM6IDIsICAgLy8gYXV0aG9yaXplZE1pbnRlciwgY29udHJhY3ROYW1lCiAgICAvLyAgICAgbG9jYWxVaW50czogMCwKICAgIC8vICAgICBsb2NhbEJ5dGVzOiAwCiAgICAvLyAgIH0KICAgIC8vIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYWZ0ZXJfaWZfZWxzZUAyMwogICAgcHVzaGJ5dGVzcyAweGI4NDQ3YjM2IDB4M2YxMzM0YjUgMHhmYjk1NDYzMCAweGQ1ZDM2M2NhIDB4YWQwOWRiMjYgMHhmOTMxZDZiZiAweDFmZDE3ZjNiIDB4MzRkOWVlMjkgMHg5Y2Q5MzU0MCAweDFiNWFlOGU5IDB4ZTIyNDQ0MjEgMHhjZDBiM2RhMSAweGVjZmVmZDU0IDB4MWRhMzllYjIgMHhlMDkxNjZjYSAweGU2OGJmNTQwIDB4NDZiMTNmZDggLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIsIG1ldGhvZCAibWludFBvcnRmb2xpbyhhY2NvdW50LHVpbnQ2NCxzdHJpbmcpdWludDY0IiwgbWV0aG9kICJhZGRQb3NpdGlvblRvUG9ydGZvbGlvKHVpbnQ2NCx1aW50NjQsYWNjb3VudCl2b2lkIiwgbWV0aG9kICJyZW1vdmVQb3NpdGlvbkZyb21Qb3J0Zm9saW8odWludDY0LHVpbnQ2NCxhY2NvdW50KXZvaWQiLCBtZXRob2QgImdldFBvc2l0aW9uUG9ydGZvbGlvKHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgImdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnQodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAidXBkYXRlUG9ydGZvbGlvKHVpbnQ2NCx1aW50NjQsc3RyaW5nKXZvaWQiLCBtZXRob2QgInRyYW5zZmVyUG9ydGZvbGlvKHVpbnQ2NCxhY2NvdW50LGFjY291bnQpdm9pZCIsIG1ldGhvZCAiYnVyblBvcnRmb2xpbyh1aW50NjQsYWNjb3VudCl2b2lkIiwgbWV0aG9kICJnZXRDb250cmFjdFN0YXRzKCkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkiLCBtZXRob2QgInBvcnRmb2xpb0V4aXN0cyh1aW50NjQpYm9vbCIsIG1ldGhvZCAic2V0QXV0aG9yaXplZE1pbnRlcihhY2NvdW50KXZvaWQiLCBtZXRob2QgImdldFBvcnRmb2xpb0NvdW50Rm9yT3duZXIodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiZ2V0UG9ydGZvbGlvT3duZXIodWludDY0KWJ5dGVbXSIsIG1ldGhvZCAiZ2V0UG9ydGZvbGlvTGV2ZWwodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiZ2V0UG9ydGZvbGlvQ3JlYXRlZCh1aW50NjQpdWludDY0IiwgbWV0aG9kICJnZXRQb3J0Zm9saW9NZXRhZGF0YUNJRCh1aW50NjQpc3RyaW5nIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVBcHBsaWNhdGlvbl9yb3V0ZUAzIG1haW5fbWludFBvcnRmb2xpb19yb3V0ZUA0IG1haW5fYWRkUG9zaXRpb25Ub1BvcnRmb2xpb19yb3V0ZUA1IG1haW5fcmVtb3ZlUG9zaXRpb25Gcm9tUG9ydGZvbGlvX3JvdXRlQDYgbWFpbl9nZXRQb3NpdGlvblBvcnRmb2xpb19yb3V0ZUA3IG1haW5fZ2V0UG9ydGZvbGlvUG9zaXRpb25Db3VudF9yb3V0ZUA4IG1haW5fdXBkYXRlUG9ydGZvbGlvX3JvdXRlQDkgbWFpbl90cmFuc2ZlclBvcnRmb2xpb19yb3V0ZUAxMCBtYWluX2J1cm5Qb3J0Zm9saW9fcm91dGVAMTEgbWFpbl9nZXRDb250cmFjdFN0YXRzX3JvdXRlQDEyIG1haW5fcG9ydGZvbGlvRXhpc3RzX3JvdXRlQDEzIG1haW5fc2V0QXV0aG9yaXplZE1pbnRlcl9yb3V0ZUAxNCBtYWluX2dldFBvcnRmb2xpb0NvdW50Rm9yT3duZXJfcm91dGVAMTUgbWFpbl9nZXRQb3J0Zm9saW9Pd25lcl9yb3V0ZUAxNiBtYWluX2dldFBvcnRmb2xpb0xldmVsX3JvdXRlQDE3IG1haW5fZ2V0UG9ydGZvbGlvQ3JlYXRlZF9yb3V0ZUAxOCBtYWluX2dldFBvcnRmb2xpb01ldGFkYXRhQ0lEX3JvdXRlQDE5CgptYWluX2FmdGVyX2lmX2Vsc2VAMjM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMS0yMAogICAgLy8gQGNvbnRyYWN0KHsKICAgIC8vICAgbmFtZTogJ0N1bHRpdmVzdFBvcnRmb2xpb05GVCcsCiAgICAvLyAgIHN0YXRlVG90YWxzOiB7CiAgICAvLyAgICAgZ2xvYmFsVWludHM6IDUsICAgLy8gbmV4dFRva2VuSWQsIHRvdGFsU3VwcGx5LCBjb250cmFjdFZlcnNpb24sIG1heFN1cHBseSwgcG9zaXRpb25ORlRBcHBJZAogICAgLy8gICAgIGdsb2JhbEJ5dGVzOiAyLCAgIC8vIGF1dGhvcml6ZWRNaW50ZXIsIGNvbnRyYWN0TmFtZQogICAgLy8gICAgIGxvY2FsVWludHM6IDAsCiAgICAvLyAgICAgbG9jYWxCeXRlczogMAogICAgLy8gICB9CiAgICAvLyB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEN1bHRpdmVzdFBvcnRmb2xpb05GVCBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fZ2V0UG9ydGZvbGlvTWV0YWRhdGFDSURfcm91dGVAMTk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNjkKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMS0yMAogICAgLy8gQGNvbnRyYWN0KHsKICAgIC8vICAgbmFtZTogJ0N1bHRpdmVzdFBvcnRmb2xpb05GVCcsCiAgICAvLyAgIHN0YXRlVG90YWxzOiB7CiAgICAvLyAgICAgZ2xvYmFsVWludHM6IDUsICAgLy8gbmV4dFRva2VuSWQsIHRvdGFsU3VwcGx5LCBjb250cmFjdFZlcnNpb24sIG1heFN1cHBseSwgcG9zaXRpb25ORlRBcHBJZAogICAgLy8gICAgIGdsb2JhbEJ5dGVzOiAyLCAgIC8vIGF1dGhvcml6ZWRNaW50ZXIsIGNvbnRyYWN0TmFtZQogICAgLy8gICAgIGxvY2FsVWludHM6IDAsCiAgICAvLyAgICAgbG9jYWxCeXRlczogMAogICAgLy8gICB9CiAgICAvLyB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEN1bHRpdmVzdFBvcnRmb2xpb05GVCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM2OQogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGdldFBvcnRmb2xpb01ldGFkYXRhQ0lECiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRQb3J0Zm9saW9DcmVhdGVkX3JvdXRlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzU5CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNTkKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRQb3J0Zm9saW9DcmVhdGVkCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBvcnRmb2xpb0xldmVsX3JvdXRlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzQ5CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNDkKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRQb3J0Zm9saW9MZXZlbAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRQb3J0Zm9saW9Pd25lcl9yb3V0ZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM0MQogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjExLTIwCiAgICAvLyBAY29udHJhY3QoewogICAgLy8gICBuYW1lOiAnQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUJywKICAgIC8vICAgc3RhdGVUb3RhbHM6IHsKICAgIC8vICAgICBnbG9iYWxVaW50czogNSwgICAvLyBuZXh0VG9rZW5JZCwgdG90YWxTdXBwbHksIGNvbnRyYWN0VmVyc2lvbiwgbWF4U3VwcGx5LCBwb3NpdGlvbk5GVEFwcElkCiAgICAvLyAgICAgZ2xvYmFsQnl0ZXM6IDIsICAgLy8gYXV0aG9yaXplZE1pbnRlciwgY29udHJhY3ROYW1lCiAgICAvLyAgICAgbG9jYWxVaW50czogMCwKICAgIC8vICAgICBsb2NhbEJ5dGVzOiAwCiAgICAvLyAgIH0KICAgIC8vIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzQxCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0UG9ydGZvbGlvT3duZXIKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBvcnRmb2xpb0NvdW50Rm9yT3duZXJfcm91dGVAMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMzEKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMS0yMAogICAgLy8gQGNvbnRyYWN0KHsKICAgIC8vICAgbmFtZTogJ0N1bHRpdmVzdFBvcnRmb2xpb05GVCcsCiAgICAvLyAgIHN0YXRlVG90YWxzOiB7CiAgICAvLyAgICAgZ2xvYmFsVWludHM6IDUsICAgLy8gbmV4dFRva2VuSWQsIHRvdGFsU3VwcGx5LCBjb250cmFjdFZlcnNpb24sIG1heFN1cHBseSwgcG9zaXRpb25ORlRBcHBJZAogICAgLy8gICAgIGdsb2JhbEJ5dGVzOiAyLCAgIC8vIGF1dGhvcml6ZWRNaW50ZXIsIGNvbnRyYWN0TmFtZQogICAgLy8gICAgIGxvY2FsVWludHM6IDAsCiAgICAvLyAgICAgbG9jYWxCeXRlczogMAogICAgLy8gICB9CiAgICAvLyB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEN1bHRpdmVzdFBvcnRmb2xpb05GVCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMzMQogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGdldFBvcnRmb2xpb0NvdW50Rm9yT3duZXIKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0QXV0aG9yaXplZE1pbnRlcl9yb3V0ZUAxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMyMgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjExLTIwCiAgICAvLyBAY29udHJhY3QoewogICAgLy8gICBuYW1lOiAnQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUJywKICAgIC8vICAgc3RhdGVUb3RhbHM6IHsKICAgIC8vICAgICBnbG9iYWxVaW50czogNSwgICAvLyBuZXh0VG9rZW5JZCwgdG90YWxTdXBwbHksIGNvbnRyYWN0VmVyc2lvbiwgbWF4U3VwcGx5LCBwb3NpdGlvbk5GVEFwcElkCiAgICAvLyAgICAgZ2xvYmFsQnl0ZXM6IDIsICAgLy8gYXV0aG9yaXplZE1pbnRlciwgY29udHJhY3ROYW1lCiAgICAvLyAgICAgbG9jYWxVaW50czogMCwKICAgIC8vICAgICBsb2NhbEJ5dGVzOiAwCiAgICAvLyAgIH0KICAgIC8vIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMyMgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHNldEF1dGhvcml6ZWRNaW50ZXIKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcG9ydGZvbGlvRXhpc3RzX3JvdXRlQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzEyCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMTIKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBwb3J0Zm9saW9FeGlzdHMKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0Q29udHJhY3RTdGF0c19yb3V0ZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI5OAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0Q29udHJhY3RTdGF0cwogICAgdW5jb3ZlciA0CiAgICBpdG9iCiAgICB1bmNvdmVyIDQKICAgIGl0b2IKICAgIHVuY292ZXIgNAogICAgaXRvYgogICAgdW5jb3ZlciA0CiAgICBpdG9iCiAgICB1bmNvdmVyIDQKICAgIGl0b2IKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2J1cm5Qb3J0Zm9saW9fcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNzAKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMS0yMAogICAgLy8gQGNvbnRyYWN0KHsKICAgIC8vICAgbmFtZTogJ0N1bHRpdmVzdFBvcnRmb2xpb05GVCcsCiAgICAvLyAgIHN0YXRlVG90YWxzOiB7CiAgICAvLyAgICAgZ2xvYmFsVWludHM6IDUsICAgLy8gbmV4dFRva2VuSWQsIHRvdGFsU3VwcGx5LCBjb250cmFjdFZlcnNpb24sIG1heFN1cHBseSwgcG9zaXRpb25ORlRBcHBJZAogICAgLy8gICAgIGdsb2JhbEJ5dGVzOiAyLCAgIC8vIGF1dGhvcml6ZWRNaW50ZXIsIGNvbnRyYWN0TmFtZQogICAgLy8gICAgIGxvY2FsVWludHM6IDAsCiAgICAvLyAgICAgbG9jYWxCeXRlczogMAogICAgLy8gICB9CiAgICAvLyB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEN1bHRpdmVzdFBvcnRmb2xpb05GVCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNzAKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBidXJuUG9ydGZvbGlvCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3RyYW5zZmVyUG9ydGZvbGlvX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjQ1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI0NQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHRyYW5zZmVyUG9ydGZvbGlvCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZVBvcnRmb2xpb19yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjE3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjE3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdXBkYXRlUG9ydGZvbGlvCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnRfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIwMwogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjExLTIwCiAgICAvLyBAY29udHJhY3QoewogICAgLy8gICBuYW1lOiAnQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUJywKICAgIC8vICAgc3RhdGVUb3RhbHM6IHsKICAgIC8vICAgICBnbG9iYWxVaW50czogNSwgICAvLyBuZXh0VG9rZW5JZCwgdG90YWxTdXBwbHksIGNvbnRyYWN0VmVyc2lvbiwgbWF4U3VwcGx5LCBwb3NpdGlvbk5GVEFwcElkCiAgICAvLyAgICAgZ2xvYmFsQnl0ZXM6IDIsICAgLy8gYXV0aG9yaXplZE1pbnRlciwgY29udHJhY3ROYW1lCiAgICAvLyAgICAgbG9jYWxVaW50czogMCwKICAgIC8vICAgICBsb2NhbEJ5dGVzOiAwCiAgICAvLyAgIH0KICAgIC8vIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjAzCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0UG9ydGZvbGlvUG9zaXRpb25Db3VudAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRQb3NpdGlvblBvcnRmb2xpb19yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTg5CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxODkKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRQb3NpdGlvblBvcnRmb2xpbwogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZW1vdmVQb3NpdGlvbkZyb21Qb3J0Zm9saW9fcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE1MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjExLTIwCiAgICAvLyBAY29udHJhY3QoewogICAgLy8gICBuYW1lOiAnQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUJywKICAgIC8vICAgc3RhdGVUb3RhbHM6IHsKICAgIC8vICAgICBnbG9iYWxVaW50czogNSwgICAvLyBuZXh0VG9rZW5JZCwgdG90YWxTdXBwbHksIGNvbnRyYWN0VmVyc2lvbiwgbWF4U3VwcGx5LCBwb3NpdGlvbk5GVEFwcElkCiAgICAvLyAgICAgZ2xvYmFsQnl0ZXM6IDIsICAgLy8gYXV0aG9yaXplZE1pbnRlciwgY29udHJhY3ROYW1lCiAgICAvLyAgICAgbG9jYWxVaW50czogMCwKICAgIC8vICAgICBsb2NhbEJ5dGVzOiAwCiAgICAvLyAgIH0KICAgIC8vIH0pCiAgICAvLyBleHBvcnQgY2xhc3MgQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE1MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpbwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hZGRQb3NpdGlvblRvUG9ydGZvbGlvX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMS0yMAogICAgLy8gQGNvbnRyYWN0KHsKICAgIC8vICAgbmFtZTogJ0N1bHRpdmVzdFBvcnRmb2xpb05GVCcsCiAgICAvLyAgIHN0YXRlVG90YWxzOiB7CiAgICAvLyAgICAgZ2xvYmFsVWludHM6IDUsICAgLy8gbmV4dFRva2VuSWQsIHRvdGFsU3VwcGx5LCBjb250cmFjdFZlcnNpb24sIG1heFN1cHBseSwgcG9zaXRpb25ORlRBcHBJZAogICAgLy8gICAgIGdsb2JhbEJ5dGVzOiAyLCAgIC8vIGF1dGhvcml6ZWRNaW50ZXIsIGNvbnRyYWN0TmFtZQogICAgLy8gICAgIGxvY2FsVWludHM6IDAsCiAgICAvLyAgICAgbG9jYWxCeXRlczogMAogICAgLy8gICB9CiAgICAvLyB9KQogICAgLy8gZXhwb3J0IGNsYXNzIEN1bHRpdmVzdFBvcnRmb2xpb05GVCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBhZGRQb3NpdGlvblRvUG9ydGZvbGlvCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX21pbnRQb3J0Zm9saW9fcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjc2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTEtMjAKICAgIC8vIEBjb250cmFjdCh7CiAgICAvLyAgIG5hbWU6ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnLAogICAgLy8gICBzdGF0ZVRvdGFsczogewogICAgLy8gICAgIGdsb2JhbFVpbnRzOiA1LCAgIC8vIG5leHRUb2tlbklkLCB0b3RhbFN1cHBseSwgY29udHJhY3RWZXJzaW9uLCBtYXhTdXBwbHksIHBvc2l0aW9uTkZUQXBwSWQKICAgIC8vICAgICBnbG9iYWxCeXRlczogMiwgICAvLyBhdXRob3JpemVkTWludGVyLCBjb250cmFjdE5hbWUKICAgIC8vICAgICBsb2NhbFVpbnRzOiAwLAogICAgLy8gICAgIGxvY2FsQnl0ZXM6IDAKICAgIC8vICAgfQogICAgLy8gfSkKICAgIC8vIGV4cG9ydCBjbGFzcyBDdWx0aXZlc3RQb3J0Zm9saW9ORlQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjc2CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgbWludFBvcnRmb2xpbwogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVBcHBsaWNhdGlvbl9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NTYKICAgIC8vIEBhYmltZXRob2QoeyBvbkNyZWF0ZTogJ3JlcXVpcmUnIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjpDdWx0aXZlc3RQb3J0Zm9saW9ORlQuY3JlYXRlQXBwbGljYXRpb24oKSAtPiB2b2lkOgpjcmVhdGVBcHBsaWNhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyCiAgICAvLyBuZXh0VG9rZW5JZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGJ5dGVjXzEgLy8gIm5leHRUb2tlbklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NTgKICAgIC8vIHRoaXMubmV4dFRva2VuSWQudmFsdWUgPSAxOyAvLyBTdGFydCB0b2tlbiBJRHMgYXQgMQogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMwogICAgLy8gdG90YWxTdXBwbHkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBieXRlY18zIC8vICJ0b3RhbFN1cHBseSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjU5CiAgICAvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gMDsKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjQKICAgIC8vIGNvbnRyYWN0VmVyc2lvbiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGJ5dGVjIDEyIC8vICJjb250cmFjdFZlcnNpb24iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo2MAogICAgLy8gdGhpcy5jb250cmFjdFZlcnNpb24udmFsdWUgPSAxOwogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNQogICAgLy8gbWF4U3VwcGx5ID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgYnl0ZWMgNyAvLyAibWF4U3VwcGx5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NjEKICAgIC8vIHRoaXMubWF4U3VwcGx5LnZhbHVlID0gMTAwMDAwOyAvLyBNYXhpbXVtIHBvcnRmb2xpbyB0b2tlbnMKICAgIHB1c2hpbnQgMTAwMDAwIC8vIDEwMDAwMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI2CiAgICAvLyBwb3NpdGlvbk5GVEFwcElkID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgYnl0ZWMgMTMgLy8gInBvc2l0aW9uTkZUQXBwSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo2MgogICAgLy8gdGhpcy5wb3NpdGlvbk5GVEFwcElkLnZhbHVlID0gMDsgLy8gV2lsbCBiZSBzZXQgbGF0ZXIgdmlhIHNldFBvc2l0aW9uTkZUQXBwCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI5CiAgICAvLyBhdXRob3JpemVkTWludGVyID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oKTsKICAgIGJ5dGVjXzIgLy8gImF1dGhvcml6ZWRNaW50ZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo2MwogICAgLy8gdGhpcy5hdXRob3JpemVkTWludGVyLnZhbHVlID0gVHhuLnNlbmRlcjsKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMAogICAgLy8gY29udHJhY3ROYW1lID0gR2xvYmFsU3RhdGU8c3RyaW5nPigpOwogICAgcHVzaGJ5dGVzcyAiY29udHJhY3ROYW1lIiAiQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUIiAvLyAiY29udHJhY3ROYW1lIiwgIkN1bHRpdmVzdFBvcnRmb2xpb05GVCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjY0CiAgICAvLyB0aGlzLmNvbnRyYWN0TmFtZS52YWx1ZSA9ICdDdWx0aXZlc3RQb3J0Zm9saW9ORlQnOwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjY2CiAgICAvLyBsb2coJ3BvcnRmb2xpb19jb250cmFjdF9jcmVhdGVkJyk7CiAgICBwdXNoYnl0ZXMgInBvcnRmb2xpb19jb250cmFjdF9jcmVhdGVkIgogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULm1pbnRQb3J0Zm9saW8ob3duZXI6IGJ5dGVzLCBsZXZlbDogdWludDY0LCBtZXRhZGF0YUNJRDogYnl0ZXMpIC0+IHVpbnQ2NDoKbWludFBvcnRmb2xpbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjc2LTgxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIG1pbnRQb3J0Zm9saW8oCiAgICAvLyAgIG93bmVyOiBBY2NvdW50LAogICAgLy8gICBsZXZlbDogdWludDY0LAogICAgLy8gICBtZXRhZGF0YUNJRDogc3RyaW5nCiAgICAvLyApOiB1aW50NjQgewogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo4MwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZSk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyOQogICAgLy8gYXV0aG9yaXplZE1pbnRlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo4MwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZSk7CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMwogICAgLy8gdG90YWxTdXBwbHkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxTdXBwbHkiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjUKICAgIC8vIG1heFN1cHBseSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJtYXhTdXBwbHkiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6ODQKICAgIC8vIGFzc2VydCh0aGlzLnRvdGFsU3VwcGx5LnZhbHVlIDwgdGhpcy5tYXhTdXBwbHkudmFsdWUpOwogICAgPAogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo4NQogICAgLy8gYXNzZXJ0KGxldmVsID49IDEgJiYgbGV2ZWwgPD0gNSk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGJ6IG1pbnRQb3J0Zm9saW9fYm9vbF9mYWxzZUAzCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMiAvLyA1CiAgICA8PQogICAgYnogbWludFBvcnRmb2xpb19ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCgptaW50UG9ydGZvbGlvX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjg1CiAgICAvLyBhc3NlcnQobGV2ZWwgPj0gMSAmJiBsZXZlbCA8PSA1KTsKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6ODYKICAgIC8vIGFzc2VydChvcC5sZW4oQnl0ZXMobWV0YWRhdGFDSUQpKSA+IDApOwogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjIKICAgIC8vIG5leHRUb2tlbklkID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gIm5leHRUb2tlbklkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjkxCiAgICAvLyB0aGlzLm5leHRUb2tlbklkLnZhbHVlID0gdG9rZW5JZCArIDE7CiAgICBkdXAKICAgIGludGNfMSAvLyAxCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMgogICAgLy8gbmV4dFRva2VuSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBieXRlY18xIC8vICJuZXh0VG9rZW5JZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjkxCiAgICAvLyB0aGlzLm5leHRUb2tlbklkLnZhbHVlID0gdG9rZW5JZCArIDE7CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjMKICAgIC8vIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsU3VwcGx5IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjkyCiAgICAvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gdGhpcy50b3RhbFN1cHBseS52YWx1ZSArIDE7CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjMKICAgIC8vIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgYnl0ZWNfMyAvLyAidG90YWxTdXBwbHkiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo5MgogICAgLy8gdGhpcy50b3RhbFN1cHBseS52YWx1ZSA9IHRoaXMudG90YWxTdXBwbHkudmFsdWUgKyAxOwogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjk1CiAgICAvLyB0aGlzLnBvcnRmb2xpb1Bvc2l0aW9uQ291bnQodG9rZW5JZCkudmFsdWUgPSAwOwogICAgZHVwCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozOAogICAgLy8gcG9ydGZvbGlvUG9zaXRpb25Db3VudCA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdwb3J0Y291bnQnIH0pOwogICAgYnl0ZWMgNCAvLyAicG9ydGNvdW50IgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6OTUKICAgIC8vIHRoaXMucG9ydGZvbGlvUG9zaXRpb25Db3VudCh0b2tlbklkKS52YWx1ZSA9IDA7CiAgICBpbnRjXzAgLy8gMAogICAgaXRvYgogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NDIKICAgIC8vIHBvcnRmb2xpb093bmVyID0gQm94TWFwPHVpbnQ2NCwgQWNjb3VudD4oeyBrZXlQcmVmaXg6ICdvd25lcicgfSk7CiAgICBieXRlYyA1IC8vICJvd25lciIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjk2CiAgICAvLyB0aGlzLnBvcnRmb2xpb093bmVyKHRva2VuSWQpLnZhbHVlID0gb3duZXI7CiAgICBmcmFtZV9kaWcgLTMKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQ4CiAgICAvLyBwb3J0Zm9saW9DcmVhdGVkID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ2NyZWF0ZWQnIH0pOwogICAgYnl0ZWMgOCAvLyAiY3JlYXRlZCIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjk3CiAgICAvLyB0aGlzLnBvcnRmb2xpb0NyZWF0ZWQodG9rZW5JZCkudmFsdWUgPSBvcC5HbG9iYWwubGF0ZXN0VGltZXN0YW1wOwogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NTEKICAgIC8vIHBvcnRmb2xpb01ldGFkYXRhQ0lEID0gQm94TWFwPHVpbnQ2NCwgc3RyaW5nPih7IGtleVByZWZpeDogJ2lwZnMnIH0pOwogICAgYnl0ZWMgOSAvLyAiaXBmcyIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjk4CiAgICAvLyB0aGlzLnBvcnRmb2xpb01ldGFkYXRhQ0lEKHRva2VuSWQpLnZhbHVlID0gbWV0YWRhdGFDSUQ7CiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo0NQogICAgLy8gcG9ydGZvbGlvTGV2ZWwgPSBCb3hNYXA8dWludDY0LCB1aW50NjQ+KHsga2V5UHJlZml4OiAnbGV2ZWwnIH0pOwogICAgYnl0ZWMgMTAgLy8gImxldmVsIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6OTkKICAgIC8vIHRoaXMucG9ydGZvbGlvTGV2ZWwodG9rZW5JZCkudmFsdWUgPSBsZXZlbDsKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgc3dhcAogICAgZGlnIDEKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEwMgogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX21pbnRlZDonKSwgb3AuaXRvYih0b2tlbklkKSkpOwogICAgcHVzaGJ5dGVzICJwb3J0Zm9saW9fbWludGVkOiIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEwMwogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX293bmVyOicpLCBvd25lci5ieXRlcykpOwogICAgYnl0ZWMgMTEgLy8gInBvcnRmb2xpb19vd25lcjoiCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMDQKICAgIC8vIGxvZyhvcC5jb25jYXQoQnl0ZXMoJ3BvcnRmb2xpb19sZXZlbDonKSwgb3AuaXRvYihsZXZlbCkpKTsKICAgIHB1c2hieXRlcyAicG9ydGZvbGlvX2xldmVsOiIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMDUKICAgIC8vIGxvZyhvcC5jb25jYXQoQnl0ZXMoJ3BvcnRmb2xpb19tZXRhZGF0YV9jaWQ6JyksIEJ5dGVzKG1ldGFkYXRhQ0lEKSkpOwogICAgcHVzaGJ5dGVzICJwb3J0Zm9saW9fbWV0YWRhdGFfY2lkOiIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEwNwogICAgLy8gcmV0dXJuIHRva2VuSWQ7CiAgICByZXRzdWIKCm1pbnRQb3J0Zm9saW9fYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgbWludFBvcnRmb2xpb19ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULmFkZFBvc2l0aW9uVG9Qb3J0Zm9saW8ocG9ydGZvbGlvVG9rZW5JZDogdWludDY0LCBwb3NpdGlvblRva2VuSWQ6IHVpbnQ2NCwgb3duZXI6IGJ5dGVzKSAtPiB2b2lkOgphZGRQb3NpdGlvblRvUG9ydGZvbGlvOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTE0LTExOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBhZGRQb3NpdGlvblRvUG9ydGZvbGlvKAogICAgLy8gICBwb3J0Zm9saW9Ub2tlbklkOiB1aW50NjQsCiAgICAvLyAgIHBvc2l0aW9uVG9rZW5JZDogdWludDY0LAogICAgLy8gICBvd25lcjogQWNjb3VudAogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEyMAogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGZyYW1lX2RpZyAtMwogICAgYnogYWRkUG9zaXRpb25Ub1BvcnRmb2xpb19ib29sX2ZhbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyCiAgICAvLyBuZXh0VG9rZW5JZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJuZXh0VG9rZW5JZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMjAKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBmcmFtZV9kaWcgLTMKICAgID4KICAgIGJ6IGFkZFBvc2l0aW9uVG9Qb3J0Zm9saW9fYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKYWRkUG9zaXRpb25Ub1BvcnRmb2xpb19ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMjAKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEyMQogICAgLy8gYXNzZXJ0KHBvc2l0aW9uVG9rZW5JZCA+IDApOwogICAgZnJhbWVfZGlnIC0yCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEyNAogICAgLy8gY29uc3QgaXNPd25lciA9IFR4bi5zZW5kZXIgPT09IG93bmVyOwogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTI1CiAgICAvLyBjb25zdCBpc0F1dGhvcml6ZWQgPSBUeG4uc2VuZGVyID09PSB0aGlzLmF1dGhvcml6ZWRNaW50ZXIudmFsdWU7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyOQogICAgLy8gYXV0aG9yaXplZE1pbnRlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMjUKICAgIC8vIGNvbnN0IGlzQXV0aG9yaXplZCA9IFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZTsKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMjYKICAgIC8vIGFzc2VydChpc093bmVyIHx8IGlzQXV0aG9yaXplZCk7CiAgICB8fAogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxMjkKICAgIC8vIGNvbnN0IGV4aXN0aW5nUG9ydGZvbGlvID0gdGhpcy5wb3NpdGlvblRvUG9ydGZvbGlvKHBvc2l0aW9uVG9rZW5JZCk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM0CiAgICAvLyBwb3NpdGlvblRvUG9ydGZvbGlvID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ3BvczJwb3J0JyB9KTsKICAgIGJ5dGVjIDYgLy8gInBvczJwb3J0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTI5CiAgICAvLyBjb25zdCBleGlzdGluZ1BvcnRmb2xpbyA9IHRoaXMucG9zaXRpb25Ub1BvcnRmb2xpbyhwb3NpdGlvblRva2VuSWQpOwogICAgZGlnIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM0CiAgICAvLyBwb3NpdGlvblRvUG9ydGZvbGlvID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ3BvczJwb3J0JyB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTMwCiAgICAvLyBpZiAoZXhpc3RpbmdQb3J0Zm9saW8uZXhpc3RzKSB7CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIFBvc2l0aW9uIGFscmVhZHkgYXNzaWduZWQgdG8gYSBwb3J0Zm9saW8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEzNQogICAgLy8gdGhpcy5wb3NpdGlvblRvUG9ydGZvbGlvKHBvc2l0aW9uVG9rZW5JZCkudmFsdWUgPSBwb3J0Zm9saW9Ub2tlbklkOwogICAgZnJhbWVfZGlnIC0zCiAgICBpdG9iCiAgICBzd2FwCiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzgKICAgIC8vIHBvcnRmb2xpb1Bvc2l0aW9uQ291bnQgPSBCb3hNYXA8dWludDY0LCB1aW50NjQ+KHsga2V5UHJlZml4OiAncG9ydGNvdW50JyB9KTsKICAgIGJ5dGVjIDQgLy8gInBvcnRjb3VudCIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjEzOAogICAgLy8gY29uc3QgY3VycmVudENvdW50ID0gdGhpcy5wb3J0Zm9saW9Qb3NpdGlvbkNvdW50KHBvcnRmb2xpb1Rva2VuSWQpLnZhbHVlOwogICAgZHVwCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTM5CiAgICAvLyB0aGlzLnBvcnRmb2xpb1Bvc2l0aW9uQ291bnQocG9ydGZvbGlvVG9rZW5JZCkudmFsdWUgPSBjdXJyZW50Q291bnQgKyAxOwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGl0b2IKICAgIHN3YXAKICAgIGRpZyAxCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNDIKICAgIC8vIGxvZyhvcC5jb25jYXQoQnl0ZXMoJ3Bvc2l0aW9uX2FkZGVkX3RvX3BvcnRmb2xpbzonKSwgb3AuaXRvYihwb3J0Zm9saW9Ub2tlbklkKSkpOwogICAgcHVzaGJ5dGVzICJwb3NpdGlvbl9hZGRlZF90b19wb3J0Zm9saW86IgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTQzCiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3NpdGlvbl90b2tlbl9pZDonKSwgb3AuaXRvYihwb3NpdGlvblRva2VuSWQpKSk7CiAgICBieXRlYyAxNCAvLyAicG9zaXRpb25fdG9rZW5faWQ6IgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTQ0CiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3J0Zm9saW9fb3duZXI6JyksIG93bmVyLmJ5dGVzKSk7CiAgICBieXRlYyAxMSAvLyAicG9ydGZvbGlvX293bmVyOiIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE0NQogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX3Bvc2l0aW9uX2NvdW50OicpLCBvcC5pdG9iKGN1cnJlbnRDb3VudCArIDEpKSk7CiAgICBieXRlYyAxNSAvLyAicG9ydGZvbGlvX3Bvc2l0aW9uX2NvdW50OiIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCmFkZFBvc2l0aW9uVG9Qb3J0Zm9saW9fYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgYWRkUG9zaXRpb25Ub1BvcnRmb2xpb19ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULnJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpbyhwb3J0Zm9saW9Ub2tlbklkOiB1aW50NjQsIHBvc2l0aW9uVG9rZW5JZDogdWludDY0LCBvd25lcjogYnl0ZXMpIC0+IHZvaWQ6CnJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE1Mi0xNTcKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gcmVtb3ZlUG9zaXRpb25Gcm9tUG9ydGZvbGlvKAogICAgLy8gICBwb3J0Zm9saW9Ub2tlbklkOiB1aW50NjQsCiAgICAvLyAgIHBvc2l0aW9uVG9rZW5JZDogdWludDY0LAogICAgLy8gICBvd25lcjogQWNjb3VudAogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE1OAogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGZyYW1lX2RpZyAtMwogICAgYnogcmVtb3ZlUG9zaXRpb25Gcm9tUG9ydGZvbGlvX2Jvb2xfZmFsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjIKICAgIC8vIG5leHRUb2tlbklkID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gIm5leHRUb2tlbklkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE1OAogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGZyYW1lX2RpZyAtMwogICAgPgogICAgYnogcmVtb3ZlUG9zaXRpb25Gcm9tUG9ydGZvbGlvX2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCnJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpb19ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNTgKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE1OQogICAgLy8gYXNzZXJ0KHBvc2l0aW9uVG9rZW5JZCA+IDApOwogICAgZnJhbWVfZGlnIC0yCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE2MgogICAgLy8gY29uc3QgaXNPd25lciA9IFR4bi5zZW5kZXIgPT09IG93bmVyOwogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTYzCiAgICAvLyBjb25zdCBpc0F1dGhvcml6ZWQgPSBUeG4uc2VuZGVyID09PSB0aGlzLmF1dGhvcml6ZWRNaW50ZXIudmFsdWU7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyOQogICAgLy8gYXV0aG9yaXplZE1pbnRlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNjMKICAgIC8vIGNvbnN0IGlzQXV0aG9yaXplZCA9IFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZTsKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNjQKICAgIC8vIGFzc2VydChpc093bmVyIHx8IGlzQXV0aG9yaXplZCk7CiAgICB8fAogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNjcKICAgIC8vIGNvbnN0IGN1cnJlbnRQb3J0Zm9saW8gPSB0aGlzLnBvc2l0aW9uVG9Qb3J0Zm9saW8ocG9zaXRpb25Ub2tlbklkKTsKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM0CiAgICAvLyBwb3NpdGlvblRvUG9ydGZvbGlvID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ3BvczJwb3J0JyB9KTsKICAgIGJ5dGVjIDYgLy8gInBvczJwb3J0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTY3CiAgICAvLyBjb25zdCBjdXJyZW50UG9ydGZvbGlvID0gdGhpcy5wb3NpdGlvblRvUG9ydGZvbGlvKHBvc2l0aW9uVG9rZW5JZCk7CiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNAogICAgLy8gcG9zaXRpb25Ub1BvcnRmb2xpbyA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdwb3MycG9ydCcgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE2NwogICAgLy8gY29uc3QgY3VycmVudFBvcnRmb2xpbyA9IHRoaXMucG9zaXRpb25Ub1BvcnRmb2xpbyhwb3NpdGlvblRva2VuSWQpOwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE2OAogICAgLy8gYXNzZXJ0KGN1cnJlbnRQb3J0Zm9saW8uZXhpc3RzICYmIGN1cnJlbnRQb3J0Zm9saW8udmFsdWUgPT09IHBvcnRmb2xpb1Rva2VuSWQsCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IHJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpb19ib29sX2ZhbHNlQDcKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIC0zCiAgICA9PQogICAgYnogcmVtb3ZlUG9zaXRpb25Gcm9tUG9ydGZvbGlvX2Jvb2xfZmFsc2VANwogICAgaW50Y18xIC8vIDEKCnJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpb19ib29sX21lcmdlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNjgtMTY5CiAgICAvLyBhc3NlcnQoY3VycmVudFBvcnRmb2xpby5leGlzdHMgJiYgY3VycmVudFBvcnRmb2xpby52YWx1ZSA9PT0gcG9ydGZvbGlvVG9rZW5JZCwKICAgIC8vICAgICAgICAnUG9zaXRpb24gbm90IGluIHNwZWNpZmllZCBwb3J0Zm9saW8nKTsKICAgIGFzc2VydCAvLyBQb3NpdGlvbiBub3QgaW4gc3BlY2lmaWVkIHBvcnRmb2xpbwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTcyCiAgICAvLyB0aGlzLnBvc2l0aW9uVG9Qb3J0Zm9saW8ocG9zaXRpb25Ub2tlbklkKS5kZWxldGUoKTsKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE3NQogICAgLy8gY29uc3QgY3VycmVudENvdW50ID0gdGhpcy5wb3J0Zm9saW9Qb3NpdGlvbkNvdW50KHBvcnRmb2xpb1Rva2VuSWQpLnZhbHVlOwogICAgZnJhbWVfZGlnIC0zCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozOAogICAgLy8gcG9ydGZvbGlvUG9zaXRpb25Db3VudCA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdwb3J0Y291bnQnIH0pOwogICAgYnl0ZWMgNCAvLyAicG9ydGNvdW50IgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTc1CiAgICAvLyBjb25zdCBjdXJyZW50Q291bnQgPSB0aGlzLnBvcnRmb2xpb1Bvc2l0aW9uQ291bnQocG9ydGZvbGlvVG9rZW5JZCkudmFsdWU7CiAgICBkdXAKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxNzYKICAgIC8vIGFzc2VydChjdXJyZW50Q291bnQgPiAwLCAnUG9ydGZvbGlvIGhhcyBubyBwb3NpdGlvbnMgdG8gcmVtb3ZlJyk7CiAgICBkdXAKICAgIGFzc2VydCAvLyBQb3J0Zm9saW8gaGFzIG5vIHBvc2l0aW9ucyB0byByZW1vdmUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE3NwogICAgLy8gdGhpcy5wb3J0Zm9saW9Qb3NpdGlvbkNvdW50KHBvcnRmb2xpb1Rva2VuSWQpLnZhbHVlID0gY3VycmVudENvdW50IC0gMTsKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBpdG9iCiAgICBzd2FwCiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTgwCiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3NpdGlvbl9yZW1vdmVkX2Zyb21fcG9ydGZvbGlvOicpLCBvcC5pdG9iKHBvcnRmb2xpb1Rva2VuSWQpKSk7CiAgICBwdXNoYnl0ZXMgInBvc2l0aW9uX3JlbW92ZWRfZnJvbV9wb3J0Zm9saW86IgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTgxCiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3NpdGlvbl90b2tlbl9pZDonKSwgb3AuaXRvYihwb3NpdGlvblRva2VuSWQpKSk7CiAgICBieXRlYyAxNCAvLyAicG9zaXRpb25fdG9rZW5faWQ6IgogICAgZnJhbWVfZGlnIDEKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxODIKICAgIC8vIGxvZyhvcC5jb25jYXQoQnl0ZXMoJ3BvcnRmb2xpb19vd25lcjonKSwgb3duZXIuYnl0ZXMpKTsKICAgIGJ5dGVjIDExIC8vICJwb3J0Zm9saW9fb3duZXI6IgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTgzCiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3J0Zm9saW9fcG9zaXRpb25fY291bnQ6JyksIG9wLml0b2IoY3VycmVudENvdW50IC0gMSkpKTsKICAgIGJ5dGVjIDE1IC8vICJwb3J0Zm9saW9fcG9zaXRpb25fY291bnQ6IgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKcmVtb3ZlUG9zaXRpb25Gcm9tUG9ydGZvbGlvX2Jvb2xfZmFsc2VANzoKICAgIGludGNfMCAvLyAwCiAgICBiIHJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpb19ib29sX21lcmdlQDgKCnJlbW92ZVBvc2l0aW9uRnJvbVBvcnRmb2xpb19ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzAgLy8gMAogICAgYiByZW1vdmVQb3NpdGlvbkZyb21Qb3J0Zm9saW9fYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6OkN1bHRpdmVzdFBvcnRmb2xpb05GVC5nZXRQb3NpdGlvblBvcnRmb2xpbyhwb3NpdGlvblRva2VuSWQ6IHVpbnQ2NCkgLT4gdWludDY0OgpnZXRQb3NpdGlvblBvcnRmb2xpbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE4OS0xOTAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gZ2V0UG9zaXRpb25Qb3J0Zm9saW8ocG9zaXRpb25Ub2tlbklkOiB1aW50NjQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxOTEKICAgIC8vIGFzc2VydChwb3NpdGlvblRva2VuSWQgPiAwKTsKICAgIGZyYW1lX2RpZyAtMQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxOTMKICAgIC8vIGNvbnN0IHBvcnRmb2xpbyA9IHRoaXMucG9zaXRpb25Ub1BvcnRmb2xpbyhwb3NpdGlvblRva2VuSWQpOwogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNAogICAgLy8gcG9zaXRpb25Ub1BvcnRmb2xpbyA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdwb3MycG9ydCcgfSk7CiAgICBieXRlYyA2IC8vICJwb3MycG9ydCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE5MwogICAgLy8gY29uc3QgcG9ydGZvbGlvID0gdGhpcy5wb3NpdGlvblRvUG9ydGZvbGlvKHBvc2l0aW9uVG9rZW5JZCk7CiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNAogICAgLy8gcG9zaXRpb25Ub1BvcnRmb2xpbyA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdwb3MycG9ydCcgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE5MwogICAgLy8gY29uc3QgcG9ydGZvbGlvID0gdGhpcy5wb3NpdGlvblRvUG9ydGZvbGlvKHBvc2l0aW9uVG9rZW5JZCk7CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjE5NAogICAgLy8gaWYgKHBvcnRmb2xpby5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogZ2V0UG9zaXRpb25Qb3J0Zm9saW9fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoxOTUKICAgIC8vIHJldHVybiBwb3J0Zm9saW8udmFsdWU7CiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0UG9zaXRpb25Qb3J0Zm9saW9fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MTk3CiAgICAvLyByZXR1cm4gMDsgLy8gUG9zaXRpb24gbm90IGFzc2lnbmVkIHRvIGFueSBwb3J0Zm9saW8KICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULmdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnQocG9ydGZvbGlvVG9rZW5JZDogdWludDY0KSAtPiB1aW50NjQ6CmdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMDMtMjA0CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIGdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnQocG9ydGZvbGlvVG9rZW5JZDogdWludDY0KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIwNQogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGZyYW1lX2RpZyAtMQogICAgYnogZ2V0UG9ydGZvbGlvUG9zaXRpb25Db3VudF9ib29sX2ZhbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyCiAgICAvLyBuZXh0VG9rZW5JZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJuZXh0VG9rZW5JZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMDUKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBmcmFtZV9kaWcgLTEKICAgID4KICAgIGJ6IGdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnRfYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKZ2V0UG9ydGZvbGlvUG9zaXRpb25Db3VudF9ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMDUKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIwNwogICAgLy8gY29uc3QgY291bnQgPSB0aGlzLnBvcnRmb2xpb1Bvc2l0aW9uQ291bnQocG9ydGZvbGlvVG9rZW5JZCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM4CiAgICAvLyBwb3J0Zm9saW9Qb3NpdGlvbkNvdW50ID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ3BvcnRjb3VudCcgfSk7CiAgICBieXRlYyA0IC8vICJwb3J0Y291bnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMDcKICAgIC8vIGNvbnN0IGNvdW50ID0gdGhpcy5wb3J0Zm9saW9Qb3NpdGlvbkNvdW50KHBvcnRmb2xpb1Rva2VuSWQpOwogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzgKICAgIC8vIHBvcnRmb2xpb1Bvc2l0aW9uQ291bnQgPSBCb3hNYXA8dWludDY0LCB1aW50NjQ+KHsga2V5UHJlZml4OiAncG9ydGNvdW50JyB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjA3CiAgICAvLyBjb25zdCBjb3VudCA9IHRoaXMucG9ydGZvbGlvUG9zaXRpb25Db3VudChwb3J0Zm9saW9Ub2tlbklkKTsKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMDgKICAgIC8vIGlmIChjb3VudC5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogZ2V0UG9ydGZvbGlvUG9zaXRpb25Db3VudF9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIwOQogICAgLy8gcmV0dXJuIGNvdW50LnZhbHVlOwogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXRzdWIKCmdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnRfYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjExCiAgICAvLyByZXR1cm4gMDsgLy8gUG9ydGZvbGlvIGhhcyBubyBwb3NpdGlvbnMKICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICByZXRzdWIKCmdldFBvcnRmb2xpb1Bvc2l0aW9uQ291bnRfYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgZ2V0UG9ydGZvbGlvUG9zaXRpb25Db3VudF9ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULnVwZGF0ZVBvcnRmb2xpbyhwb3J0Zm9saW9Ub2tlbklkOiB1aW50NjQsIG5ld0xldmVsOiB1aW50NjQsIG5ld01ldGFkYXRhQ0lEOiBieXRlcykgLT4gdm9pZDoKdXBkYXRlUG9ydGZvbGlvOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjE3LTIyMgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyB1cGRhdGVQb3J0Zm9saW8oCiAgICAvLyAgIHBvcnRmb2xpb1Rva2VuSWQ6IHVpbnQ2NCwKICAgIC8vICAgbmV3TGV2ZWw6IHVpbnQ2NCwKICAgIC8vICAgbmV3TWV0YWRhdGFDSUQ6IHN0cmluZwogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyMwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZSk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyOQogICAgLy8gYXV0aG9yaXplZE1pbnRlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMjMKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSB0aGlzLmF1dGhvcml6ZWRNaW50ZXIudmFsdWUpOwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjI0CiAgICAvLyBhc3NlcnQocG9ydGZvbGlvVG9rZW5JZCA+IDAgJiYgcG9ydGZvbGlvVG9rZW5JZCA8IHRoaXMubmV4dFRva2VuSWQudmFsdWUpOwogICAgZnJhbWVfZGlnIC0zCiAgICBieiB1cGRhdGVQb3J0Zm9saW9fYm9vbF9mYWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMgogICAgLy8gbmV4dFRva2VuSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAibmV4dFRva2VuSWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjI0CiAgICAvLyBhc3NlcnQocG9ydGZvbGlvVG9rZW5JZCA+IDAgJiYgcG9ydGZvbGlvVG9rZW5JZCA8IHRoaXMubmV4dFRva2VuSWQudmFsdWUpOwogICAgZnJhbWVfZGlnIC0zCiAgICA+CiAgICBieiB1cGRhdGVQb3J0Zm9saW9fYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKdXBkYXRlUG9ydGZvbGlvX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyNAogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjI1CiAgICAvLyBhc3NlcnQobmV3TGV2ZWwgPj0gMSAmJiBuZXdMZXZlbCA8PSA1KTsKICAgIGZyYW1lX2RpZyAtMgogICAgYnogdXBkYXRlUG9ydGZvbGlvX2Jvb2xfZmFsc2VANwogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gNQogICAgPD0KICAgIGJ6IHVwZGF0ZVBvcnRmb2xpb19ib29sX2ZhbHNlQDcKICAgIGludGNfMSAvLyAxCgp1cGRhdGVQb3J0Zm9saW9fYm9vbF9tZXJnZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjI1CiAgICAvLyBhc3NlcnQobmV3TGV2ZWwgPj0gMSAmJiBuZXdMZXZlbCA8PSA1KTsKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjI3CiAgICAvLyBpZiAob3AubGVuKEJ5dGVzKG5ld01ldGFkYXRhQ0lEKSkgPiAwKSB7IC8vIElmIG1ldGFkYXRhIGlzIHByb3ZpZGVkLCB1cGRhdGUgaXQKICAgIGZyYW1lX2RpZyAtMQogICAgbGVuCiAgICBieiB1cGRhdGVQb3J0Zm9saW9fYWZ0ZXJfaWZfZWxzZUAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjI4CiAgICAvLyB0aGlzLnBvcnRmb2xpb01ldGFkYXRhQ0lEKHBvcnRmb2xpb1Rva2VuSWQpLnZhbHVlID0gbmV3TWV0YWRhdGFDSUQ7CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjUxCiAgICAvLyBwb3J0Zm9saW9NZXRhZGF0YUNJRCA9IEJveE1hcDx1aW50NjQsIHN0cmluZz4oeyBrZXlQcmVmaXg6ICdpcGZzJyB9KTsKICAgIGJ5dGVjIDkgLy8gImlwZnMiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyOAogICAgLy8gdGhpcy5wb3J0Zm9saW9NZXRhZGF0YUNJRChwb3J0Zm9saW9Ub2tlbklkKS52YWx1ZSA9IG5ld01ldGFkYXRhQ0lEOwogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAoKdXBkYXRlUG9ydGZvbGlvX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMzIKICAgIC8vIGlmIChuZXdMZXZlbCA+IDApIHsgLy8gSWYgbGV2ZWwgaXMgcHJvdmlkZWQsIHVwZGF0ZSBpdAogICAgZnJhbWVfZGlnIC0yCiAgICBieiB1cGRhdGVQb3J0Zm9saW9fYWZ0ZXJfaWZfZWxzZUAxMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjMzCiAgICAvLyB0aGlzLnBvcnRmb2xpb0xldmVsKHBvcnRmb2xpb1Rva2VuSWQpLnZhbHVlID0gbmV3TGV2ZWw7CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQ1CiAgICAvLyBwb3J0Zm9saW9MZXZlbCA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdsZXZlbCcgfSk7CiAgICBieXRlYyAxMCAvLyAibGV2ZWwiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIzMwogICAgLy8gdGhpcy5wb3J0Zm9saW9MZXZlbChwb3J0Zm9saW9Ub2tlbklkKS52YWx1ZSA9IG5ld0xldmVsOwogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBib3hfcHV0Cgp1cGRhdGVQb3J0Zm9saW9fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIzNwogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX3VwZGF0ZWQ6JyksIG9wLml0b2IocG9ydGZvbGlvVG9rZW5JZCkpKTsKICAgIGZyYW1lX2RpZyAtMwogICAgaXRvYgogICAgcHVzaGJ5dGVzICJwb3J0Zm9saW9fdXBkYXRlZDoiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjM4CiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3J0Zm9saW9fbmV3X2xldmVsOicpLCBvcC5pdG9iKG5ld0xldmVsKSkpOwogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgInBvcnRmb2xpb19uZXdfbGV2ZWw6IgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIzOQogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX25ld19tZXRhZGF0YTonKSwgQnl0ZXMobmV3TWV0YWRhdGFDSUQpKSk7CiAgICBwdXNoYnl0ZXMgInBvcnRmb2xpb19uZXdfbWV0YWRhdGE6IgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgp1cGRhdGVQb3J0Zm9saW9fYm9vbF9mYWxzZUA3OgogICAgaW50Y18wIC8vIDAKICAgIGIgdXBkYXRlUG9ydGZvbGlvX2Jvb2xfbWVyZ2VAOAoKdXBkYXRlUG9ydGZvbGlvX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIHVwZGF0ZVBvcnRmb2xpb19ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULnRyYW5zZmVyUG9ydGZvbGlvKHBvcnRmb2xpb1Rva2VuSWQ6IHVpbnQ2NCwgY3VycmVudE93bmVyOiBieXRlcywgbmV3T3duZXI6IGJ5dGVzKSAtPiB2b2lkOgp0cmFuc2ZlclBvcnRmb2xpbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI0NS0yNTAKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gdHJhbnNmZXJQb3J0Zm9saW8oCiAgICAvLyAgIHBvcnRmb2xpb1Rva2VuSWQ6IHVpbnQ2NCwKICAgIC8vICAgY3VycmVudE93bmVyOiBBY2NvdW50LAogICAgLy8gICBuZXdPd25lcjogQWNjb3VudAogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI1MgogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGZyYW1lX2RpZyAtMwogICAgYnogdHJhbnNmZXJQb3J0Zm9saW9fYm9vbF9mYWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMgogICAgLy8gbmV4dFRva2VuSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAibmV4dFRva2VuSWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjUyCiAgICAvLyBhc3NlcnQocG9ydGZvbGlvVG9rZW5JZCA+IDAgJiYgcG9ydGZvbGlvVG9rZW5JZCA8IHRoaXMubmV4dFRva2VuSWQudmFsdWUpOwogICAgZnJhbWVfZGlnIC0zCiAgICA+CiAgICBieiB0cmFuc2ZlclBvcnRmb2xpb19ib29sX2ZhbHNlQDMKICAgIGludGNfMSAvLyAxCgp0cmFuc2ZlclBvcnRmb2xpb19ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNTIKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI1MwogICAgLy8gY29uc3QgaXNPd25lciA9IFR4bi5zZW5kZXIgPT09IGN1cnJlbnRPd25lcjsKICAgIHR4biBTZW5kZXIKICAgIGZyYW1lX2RpZyAtMgogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI1NAogICAgLy8gY29uc3QgaXNBdXRob3JpemVkID0gVHhuLnNlbmRlciA9PT0gdGhpcy5hdXRob3JpemVkTWludGVyLnZhbHVlOwogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjkKICAgIC8vIGF1dGhvcml6ZWRNaW50ZXIgPSBHbG9iYWxTdGF0ZTxBY2NvdW50PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImF1dGhvcml6ZWRNaW50ZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjU0CiAgICAvLyBjb25zdCBpc0F1dGhvcml6ZWQgPSBUeG4uc2VuZGVyID09PSB0aGlzLmF1dGhvcml6ZWRNaW50ZXIudmFsdWU7CiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjU1CiAgICAvLyBhc3NlcnQoaXNPd25lciB8fCBpc0F1dGhvcml6ZWQpOwogICAgfHwKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjU4CiAgICAvLyB0aGlzLnBvcnRmb2xpb093bmVyKHBvcnRmb2xpb1Rva2VuSWQpLnZhbHVlID0gbmV3T3duZXI7CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQyCiAgICAvLyBwb3J0Zm9saW9Pd25lciA9IEJveE1hcDx1aW50NjQsIEFjY291bnQ+KHsga2V5UHJlZml4OiAnb3duZXInIH0pOwogICAgYnl0ZWMgNSAvLyAib3duZXIiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNTgKICAgIC8vIHRoaXMucG9ydGZvbGlvT3duZXIocG9ydGZvbGlvVG9rZW5JZCkudmFsdWUgPSBuZXdPd25lcjsKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NDgKICAgIC8vIHBvcnRmb2xpb0NyZWF0ZWQgPSBCb3hNYXA8dWludDY0LCB1aW50NjQ+KHsga2V5UHJlZml4OiAnY3JlYXRlZCcgfSk7CiAgICBieXRlYyA4IC8vICJjcmVhdGVkIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjU5CiAgICAvLyB0aGlzLnBvcnRmb2xpb0NyZWF0ZWQocG9ydGZvbGlvVG9rZW5JZCkudmFsdWUgPSBvcC5HbG9iYWwubGF0ZXN0VGltZXN0YW1wOwogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjYyCiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3J0Zm9saW9fdHJhbnNmZXJyZWQ6JyksIG9wLml0b2IocG9ydGZvbGlvVG9rZW5JZCkpKTsKICAgIHB1c2hieXRlcyAicG9ydGZvbGlvX3RyYW5zZmVycmVkOiIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNjMKICAgIC8vIGxvZyhvcC5jb25jYXQoQnl0ZXMoJ3BvcnRmb2xpb19vbGRfb3duZXI6JyksIGN1cnJlbnRPd25lci5ieXRlcykpOwogICAgcHVzaGJ5dGVzICJwb3J0Zm9saW9fb2xkX293bmVyOiIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI2NAogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX25ld19vd25lcjonKSwgbmV3T3duZXIuYnl0ZXMpKTsKICAgIHB1c2hieXRlcyAicG9ydGZvbGlvX25ld19vd25lcjoiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCnRyYW5zZmVyUG9ydGZvbGlvX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIHRyYW5zZmVyUG9ydGZvbGlvX2Jvb2xfbWVyZ2VANAoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjpDdWx0aXZlc3RQb3J0Zm9saW9ORlQuYnVyblBvcnRmb2xpbyhwb3J0Zm9saW9Ub2tlbklkOiB1aW50NjQsIG93bmVyOiBieXRlcykgLT4gdm9pZDoKYnVyblBvcnRmb2xpbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI3MC0yNzQKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gYnVyblBvcnRmb2xpbygKICAgIC8vICAgcG9ydGZvbGlvVG9rZW5JZDogdWludDY0LAogICAgLy8gICBvd25lcjogQWNjb3VudAogICAgLy8gKTogdm9pZCB7CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI3NQogICAgLy8gYXNzZXJ0KHBvcnRmb2xpb1Rva2VuSWQgPiAwICYmIHBvcnRmb2xpb1Rva2VuSWQgPCB0aGlzLm5leHRUb2tlbklkLnZhbHVlKTsKICAgIGZyYW1lX2RpZyAtMgogICAgYnogYnVyblBvcnRmb2xpb19ib29sX2ZhbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyCiAgICAvLyBuZXh0VG9rZW5JZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJuZXh0VG9rZW5JZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNzUKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBmcmFtZV9kaWcgLTIKICAgID4KICAgIGJ6IGJ1cm5Qb3J0Zm9saW9fYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKYnVyblBvcnRmb2xpb19ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNzUKICAgIC8vIGFzc2VydChwb3J0Zm9saW9Ub2tlbklkID4gMCAmJiBwb3J0Zm9saW9Ub2tlbklkIDwgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSk7CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI3OAogICAgLy8gY29uc3QgaXNPd25lciA9IFR4bi5zZW5kZXIgPT09IG93bmVyOwogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6Mjc5CiAgICAvLyBjb25zdCBpc0F1dGhvcml6ZWQgPSBUeG4uc2VuZGVyID09PSB0aGlzLmF1dGhvcml6ZWRNaW50ZXIudmFsdWU7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyOQogICAgLy8gYXV0aG9yaXplZE1pbnRlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNzkKICAgIC8vIGNvbnN0IGlzQXV0aG9yaXplZCA9IFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZTsKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyODAKICAgIC8vIGFzc2VydChpc093bmVyIHx8IGlzQXV0aG9yaXplZCk7CiAgICB8fAogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyMwogICAgLy8gdG90YWxTdXBwbHkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxTdXBwbHkiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjgzCiAgICAvLyB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlID0gdGhpcy50b3RhbFN1cHBseS52YWx1ZSAtIDE7CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjMKICAgIC8vIHRvdGFsU3VwcGx5ID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgYnl0ZWNfMyAvLyAidG90YWxTdXBwbHkiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyODMKICAgIC8vIHRoaXMudG90YWxTdXBwbHkudmFsdWUgPSB0aGlzLnRvdGFsU3VwcGx5LnZhbHVlIC0gMTsKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyODYKICAgIC8vIHRoaXMucG9ydGZvbGlvT3duZXIocG9ydGZvbGlvVG9rZW5JZCkuZGVsZXRlKCk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQyCiAgICAvLyBwb3J0Zm9saW9Pd25lciA9IEJveE1hcDx1aW50NjQsIEFjY291bnQ+KHsga2V5UHJlZml4OiAnb3duZXInIH0pOwogICAgYnl0ZWMgNSAvLyAib3duZXIiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyODYKICAgIC8vIHRoaXMucG9ydGZvbGlvT3duZXIocG9ydGZvbGlvVG9rZW5JZCkuZGVsZXRlKCk7CiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM4CiAgICAvLyBwb3J0Zm9saW9Qb3NpdGlvbkNvdW50ID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ3BvcnRjb3VudCcgfSk7CiAgICBieXRlYyA0IC8vICJwb3J0Y291bnQiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyODcKICAgIC8vIHRoaXMucG9ydGZvbGlvUG9zaXRpb25Db3VudChwb3J0Zm9saW9Ub2tlbklkKS5kZWxldGUoKTsKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzQKICAgIC8vIHBvc2l0aW9uVG9Qb3J0Zm9saW8gPSBCb3hNYXA8dWludDY0LCB1aW50NjQ+KHsga2V5UHJlZml4OiAncG9zMnBvcnQnIH0pOwogICAgYnl0ZWMgNiAvLyAicG9zMnBvcnQiCiAgICBkaWcgMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyODgKICAgIC8vIHRoaXMucG9zaXRpb25Ub1BvcnRmb2xpbyhwb3J0Zm9saW9Ub2tlbklkKS5kZWxldGUoKTsKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjkxCiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdwb3J0Zm9saW9fYnVybmVkOicpLCBvcC5pdG9iKHBvcnRmb2xpb1Rva2VuSWQpKSk7CiAgICBwdXNoYnl0ZXMgInBvcnRmb2xpb19idXJuZWQ6IgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjI5MgogICAgLy8gbG9nKG9wLmNvbmNhdChCeXRlcygncG9ydGZvbGlvX2J1cm5lZF9vd25lcjonKSwgb3duZXIuYnl0ZXMpKTsKICAgIHB1c2hieXRlcyAicG9ydGZvbGlvX2J1cm5lZF9vd25lcjoiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCmJ1cm5Qb3J0Zm9saW9fYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgYnVyblBvcnRmb2xpb19ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULmdldENvbnRyYWN0U3RhdHMoKSAtPiB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NDoKZ2V0Q29udHJhY3RTdGF0czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIyCiAgICAvLyBuZXh0VG9rZW5JZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJuZXh0VG9rZW5JZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMDEKICAgIC8vIHRoaXMubmV4dFRva2VuSWQudmFsdWUgLSAxLCAgLy8gVG90YWwgdG9rZW5zIG1pbnRlZAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjIzCiAgICAvLyB0b3RhbFN1cHBseSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKTsKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0b3RhbFN1cHBseSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNQogICAgLy8gbWF4U3VwcGx5ID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gIm1heFN1cHBseSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyNAogICAgLy8gY29udHJhY3RWZXJzaW9uID0gR2xvYmFsU3RhdGU8dWludDY0PigpOwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEyIC8vICJjb250cmFjdFZlcnNpb24iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjYKICAgIC8vIHBvc2l0aW9uTkZUQXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTMgLy8gInBvc2l0aW9uTkZUQXBwSWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzAwLTMwNgogICAgLy8gcmV0dXJuIFsKICAgIC8vICAgdGhpcy5uZXh0VG9rZW5JZC52YWx1ZSAtIDEsICAvLyBUb3RhbCB0b2tlbnMgbWludGVkCiAgICAvLyAgIHRoaXMudG90YWxTdXBwbHkudmFsdWUsICAgICAgLy8gQ3VycmVudCBzdXBwbHkgKG1pbnRlZCAtIGJ1cm5lZCkKICAgIC8vICAgdGhpcy5tYXhTdXBwbHkudmFsdWUsICAgICAgICAvLyBNYXhpbXVtIHN1cHBseQogICAgLy8gICB0aGlzLmNvbnRyYWN0VmVyc2lvbi52YWx1ZSwgIC8vIENvbnRyYWN0IHZlcnNpb24KICAgIC8vICAgdGhpcy5wb3NpdGlvbk5GVEFwcElkLnZhbHVlICAvLyBQb3NpdGlvbiBORlQgY29udHJhY3QgYXBwIElECiAgICAvLyBdOwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6OkN1bHRpdmVzdFBvcnRmb2xpb05GVC5wb3J0Zm9saW9FeGlzdHMocG9ydGZvbGlvVG9rZW5JZDogdWludDY0KSAtPiB1aW50NjQ6CnBvcnRmb2xpb0V4aXN0czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMxMi0zMTMKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcG9ydGZvbGlvRXhpc3RzKHBvcnRmb2xpb1Rva2VuSWQ6IHVpbnQ2NCk6IGJvb2xlYW4gewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMTUKICAgIC8vIGNvbnN0IHBvcnRmb2xpbyA9IHRoaXMucG9ydGZvbGlvT3duZXIocG9ydGZvbGlvVG9rZW5JZCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQyCiAgICAvLyBwb3J0Zm9saW9Pd25lciA9IEJveE1hcDx1aW50NjQsIEFjY291bnQ+KHsga2V5UHJlZml4OiAnb3duZXInIH0pOwogICAgYnl0ZWMgNSAvLyAib3duZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMTUKICAgIC8vIGNvbnN0IHBvcnRmb2xpbyA9IHRoaXMucG9ydGZvbGlvT3duZXIocG9ydGZvbGlvVG9rZW5JZCk7CiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo0MgogICAgLy8gcG9ydGZvbGlvT3duZXIgPSBCb3hNYXA8dWludDY0LCBBY2NvdW50Pih7IGtleVByZWZpeDogJ293bmVyJyB9KTsKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzE2CiAgICAvLyByZXR1cm4gcG9ydGZvbGlvLmV4aXN0czsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6OkN1bHRpdmVzdFBvcnRmb2xpb05GVC5zZXRBdXRob3JpemVkTWludGVyKG5ld01pbnRlcjogYnl0ZXMpIC0+IHZvaWQ6CnNldEF1dGhvcml6ZWRNaW50ZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMjItMzIzCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIHNldEF1dGhvcml6ZWRNaW50ZXIobmV3TWludGVyOiBBY2NvdW50KTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMyNAogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IHRoaXMuYXV0aG9yaXplZE1pbnRlci52YWx1ZSk7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czoyOQogICAgLy8gYXV0aG9yaXplZE1pbnRlciA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KCk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMjQKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSB0aGlzLmF1dGhvcml6ZWRNaW50ZXIudmFsdWUpOwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MjkKICAgIC8vIGF1dGhvcml6ZWRNaW50ZXIgPSBHbG9iYWxTdGF0ZTxBY2NvdW50PigpOwogICAgYnl0ZWNfMiAvLyAiYXV0aG9yaXplZE1pbnRlciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMyNQogICAgLy8gdGhpcy5hdXRob3JpemVkTWludGVyLnZhbHVlID0gbmV3TWludGVyOwogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzI3CiAgICAvLyBsb2cob3AuY29uY2F0KEJ5dGVzKCdtaW50ZXJfdXBkYXRlZDonKSwgbmV3TWludGVyLmJ5dGVzKSk7CiAgICBwdXNoYnl0ZXMgIm1pbnRlcl91cGRhdGVkOiIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjpDdWx0aXZlc3RQb3J0Zm9saW9ORlQuZ2V0UG9ydGZvbGlvQ291bnRGb3JPd25lcih0b2tlbklkOiB1aW50NjQpIC0+IHVpbnQ2NDoKZ2V0UG9ydGZvbGlvQ291bnRGb3JPd25lcjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMzMS0zMzIKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gZ2V0UG9ydGZvbGlvQ291bnRGb3JPd25lcih0b2tlbklkOiB1aW50NjQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMzMKICAgIC8vIGNvbnN0IGNvdW50ID0gdGhpcy5wb3J0Zm9saW9Qb3NpdGlvbkNvdW50KHRva2VuSWQpOwogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozOAogICAgLy8gcG9ydGZvbGlvUG9zaXRpb25Db3VudCA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdwb3J0Y291bnQnIH0pOwogICAgYnl0ZWMgNCAvLyAicG9ydGNvdW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzMzCiAgICAvLyBjb25zdCBjb3VudCA9IHRoaXMucG9ydGZvbGlvUG9zaXRpb25Db3VudCh0b2tlbklkKTsKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM4CiAgICAvLyBwb3J0Zm9saW9Qb3NpdGlvbkNvdW50ID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ3BvcnRjb3VudCcgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMzMwogICAgLy8gY29uc3QgY291bnQgPSB0aGlzLnBvcnRmb2xpb1Bvc2l0aW9uQ291bnQodG9rZW5JZCk7CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjMzNAogICAgLy8gaWYgKGNvdW50LmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBnZXRQb3J0Zm9saW9Db3VudEZvck93bmVyX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzM1CiAgICAvLyByZXR1cm4gY291bnQudmFsdWU7CiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0UG9ydGZvbGlvQ291bnRGb3JPd25lcl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozMzcKICAgIC8vIHJldHVybiAwOwogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjpDdWx0aXZlc3RQb3J0Zm9saW9ORlQuZ2V0UG9ydGZvbGlvT3duZXIodG9rZW5JZDogdWludDY0KSAtPiBieXRlczoKZ2V0UG9ydGZvbGlvT3duZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNDEtMzQyCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIGdldFBvcnRmb2xpb093bmVyKHRva2VuSWQ6IHVpbnQ2NCk6IGJ5dGVzIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzQzCiAgICAvLyBjb25zdCBvd25lciA9IHRoaXMucG9ydGZvbGlvT3duZXIodG9rZW5JZCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQyCiAgICAvLyBwb3J0Zm9saW9Pd25lciA9IEJveE1hcDx1aW50NjQsIEFjY291bnQ+KHsga2V5UHJlZml4OiAnb3duZXInIH0pOwogICAgYnl0ZWMgNSAvLyAib3duZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNDMKICAgIC8vIGNvbnN0IG93bmVyID0gdGhpcy5wb3J0Zm9saW9Pd25lcih0b2tlbklkKTsKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQyCiAgICAvLyBwb3J0Zm9saW9Pd25lciA9IEJveE1hcDx1aW50NjQsIEFjY291bnQ+KHsga2V5UHJlZml4OiAnb3duZXInIH0pOwogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNDQKICAgIC8vIGFzc2VydChvd25lci5leGlzdHMsICdQb3J0Zm9saW8gZG9lcyBub3QgZXhpc3QnKTsKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gUG9ydGZvbGlvIGRvZXMgbm90IGV4aXN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNDUKICAgIC8vIHJldHVybiBvd25lci52YWx1ZS5ieXRlczsKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULmdldFBvcnRmb2xpb0xldmVsKHRva2VuSWQ6IHVpbnQ2NCkgLT4gdWludDY0OgpnZXRQb3J0Zm9saW9MZXZlbDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM0OS0zNTAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gZ2V0UG9ydGZvbGlvTGV2ZWwodG9rZW5JZDogdWludDY0KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzUxCiAgICAvLyBjb25zdCBsZXZlbCA9IHRoaXMucG9ydGZvbGlvTGV2ZWwodG9rZW5JZCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQ1CiAgICAvLyBwb3J0Zm9saW9MZXZlbCA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdsZXZlbCcgfSk7CiAgICBieXRlYyAxMCAvLyAibGV2ZWwiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNTEKICAgIC8vIGNvbnN0IGxldmVsID0gdGhpcy5wb3J0Zm9saW9MZXZlbCh0b2tlbklkKTsKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQ1CiAgICAvLyBwb3J0Zm9saW9MZXZlbCA9IEJveE1hcDx1aW50NjQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6ICdsZXZlbCcgfSk7CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM1MQogICAgLy8gY29uc3QgbGV2ZWwgPSB0aGlzLnBvcnRmb2xpb0xldmVsKHRva2VuSWQpOwogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNTIKICAgIC8vIGlmIChsZXZlbC5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogZ2V0UG9ydGZvbGlvTGV2ZWxfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNTMKICAgIC8vIHJldHVybiBsZXZlbC52YWx1ZTsKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgc3dhcAogICAgcmV0c3ViCgpnZXRQb3J0Zm9saW9MZXZlbF9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNTUKICAgIC8vIHJldHVybiAwOwogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjpDdWx0aXZlc3RQb3J0Zm9saW9ORlQuZ2V0UG9ydGZvbGlvQ3JlYXRlZCh0b2tlbklkOiB1aW50NjQpIC0+IHVpbnQ2NDoKZ2V0UG9ydGZvbGlvQ3JlYXRlZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM1OS0zNjAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gZ2V0UG9ydGZvbGlvQ3JlYXRlZCh0b2tlbklkOiB1aW50NjQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNjEKICAgIC8vIGNvbnN0IGNyZWF0ZWQgPSB0aGlzLnBvcnRmb2xpb0NyZWF0ZWQodG9rZW5JZCk7CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQ4CiAgICAvLyBwb3J0Zm9saW9DcmVhdGVkID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ2NyZWF0ZWQnIH0pOwogICAgYnl0ZWMgOCAvLyAiY3JlYXRlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM2MQogICAgLy8gY29uc3QgY3JlYXRlZCA9IHRoaXMucG9ydGZvbGlvQ3JlYXRlZCh0b2tlbklkKTsKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjQ4CiAgICAvLyBwb3J0Zm9saW9DcmVhdGVkID0gQm94TWFwPHVpbnQ2NCwgdWludDY0Pih7IGtleVByZWZpeDogJ2NyZWF0ZWQnIH0pOwogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNjEKICAgIC8vIGNvbnN0IGNyZWF0ZWQgPSB0aGlzLnBvcnRmb2xpb0NyZWF0ZWQodG9rZW5JZCk7CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM2MgogICAgLy8gaWYgKGNyZWF0ZWQuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGdldFBvcnRmb2xpb0NyZWF0ZWRfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNjMKICAgIC8vIHJldHVybiBjcmVhdGVkLnZhbHVlOwogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBzd2FwCiAgICByZXRzdWIKCmdldFBvcnRmb2xpb0NyZWF0ZWRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzY1CiAgICAvLyByZXR1cm4gMDsKICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czo6Q3VsdGl2ZXN0UG9ydGZvbGlvTkZULmdldFBvcnRmb2xpb01ldGFkYXRhQ0lEKHRva2VuSWQ6IHVpbnQ2NCkgLT4gYnl0ZXM6CmdldFBvcnRmb2xpb01ldGFkYXRhQ0lEOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzY5LTM3MAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBnZXRQb3J0Zm9saW9NZXRhZGF0YUNJRCh0b2tlbklkOiB1aW50NjQpOiBzdHJpbmcgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNzEKICAgIC8vIGNvbnN0IG1ldGFkYXRhQ0lEID0gdGhpcy5wb3J0Zm9saW9NZXRhZGF0YUNJRCh0b2tlbklkKTsKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NTEKICAgIC8vIHBvcnRmb2xpb01ldGFkYXRhQ0lEID0gQm94TWFwPHVpbnQ2NCwgc3RyaW5nPih7IGtleVByZWZpeDogJ2lwZnMnIH0pOwogICAgYnl0ZWMgOSAvLyAiaXBmcyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wb3J0Zm9saW8tbmZ0L1BvcnRmb2xpb05GVC5hbGdvLnRzOjM3MQogICAgLy8gY29uc3QgbWV0YWRhdGFDSUQgPSB0aGlzLnBvcnRmb2xpb01ldGFkYXRhQ0lEKHRva2VuSWQpOwogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6NTEKICAgIC8vIHBvcnRmb2xpb01ldGFkYXRhQ0lEID0gQm94TWFwPHVpbnQ2NCwgc3RyaW5nPih7IGtleVByZWZpeDogJ2lwZnMnIH0pOwogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcG9ydGZvbGlvLW5mdC9Qb3J0Zm9saW9ORlQuYWxnby50czozNzEKICAgIC8vIGNvbnN0IG1ldGFkYXRhQ0lEID0gdGhpcy5wb3J0Zm9saW9NZXRhZGF0YUNJRCh0b2tlbklkKTsKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzcyCiAgICAvLyBpZiAobWV0YWRhdGFDSUQuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGdldFBvcnRmb2xpb01ldGFkYXRhQ0lEX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6MzczCiAgICAvLyByZXR1cm4gbWV0YWRhdGFDSUQudmFsdWU7CiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0UG9ydGZvbGlvTWV0YWRhdGFDSURfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BvcnRmb2xpby1uZnQvUG9ydGZvbGlvTkZULmFsZ28udHM6Mzc1CiAgICAvLyByZXR1cm4gJyc7CiAgICBwdXNoYnl0ZXMgIiIKICAgIHN3YXAKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEFJhAEFR98dQtuZXh0VG9rZW5JZBBhdXRob3JpemVkTWludGVyC3RvdGFsU3VwcGx5CXBvcnRjb3VudAVvd25lcghwb3MycG9ydAltYXhTdXBwbHkHY3JlYXRlZARpcGZzBWxldmVsEHBvcnRmb2xpb19vd25lcjoPY29udHJhY3RWZXJzaW9uEHBvc2l0aW9uTkZUQXBwSWQScG9zaXRpb25fdG9rZW5faWQ6GXBvcnRmb2xpb19wb3NpdGlvbl9jb3VudDoxG0EAfoIRBLhEezYEPxM0tQT7lUYwBNXTY8oErQnbJgT5Mda/BB/RfzsENNnuKQSc2TVABBta6OkE4iREIQTNCz2hBOz+/VQEHaOesgTgkWbKBOaL9UAERrE/2DYaAI4RAZ0BfAFiAUgBMwEeAQQA6ADSAKYAiwB5AGQASAAzAB4AAiJDMRkURDEYRDYaAReIBplJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgEXiAZgFihMULAjQzEZFEQxGEQ2GgEXiAYuFihMULAjQzEZFEQxGEQ2GgEXiAYHSRUWVwYCTFAoTFCwI0MxGRREMRhENhoBF4gFzhYoTFCwI0MxGRREMRhENhoBF8AciAWSI0MxGRREMRhENhoBF4gFdIABACJPAlQoTFCwI0MxGRREMRhEiAVDTwQWTwQWTwQWTwQWTwQWTwRPBFBPA1BPAlBMUChMULAjQzEZFEQxGEQ2GgEXNhoCF8AciASSI0MxGRREMRhENhoBFzYaAhfAHDYaAxfAHIgD7CNDMRkURDEYRDYaARc2GgIXNhoDVwIAiAMpI0MxGRREMRhENhoBF4gC5BYoTFCwI0MxGRREMRhENhoBF4gCrxYoTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXwByIAewjQzEZFEQxGEQ2GgEXNhoCFzYaAxfAHIgBTiNDMRkURDEYRDYaARfAHDYaAhc2GgNXAgCIAHEWKExQsCNDMRkURDEYFESIAAIjQykjZysiZycMI2cnB4GgjQZnJw0iZyoxAGeCAgxjb250cmFjdE5hbWUVQ3VsdGl2ZXN0UG9ydGZvbGlvTkZUZ4AacG9ydGZvbGlvX2NvbnRyYWN0X2NyZWF0ZWSwiYoDATEAIiplRBJEIitlRCInB2VEDESL/kEAoov+JA5BAJsjRIv/FUQiKWVESSMIKUxnIitlRCMIK0xnSRYnBEsBUCIWvycFSwFQi/2/JwhLAVAyBxa/JwlLAVBJvEiL/78nCksBUIv+FkxLAb+AEXBvcnRmb2xpb19taW50ZWQ6TwJQsCcLi/1QsIAQcG9ydGZvbGlvX2xldmVsOkxQsIAXcG9ydGZvbGlvX21ldGFkYXRhX2NpZDqL/1CwiSJC/2KKAwCL/UEAeCIpZUSL/Q1BAG4jRIv+RDEAi/8SMQAiKmVEEhFEi/4WJwZLAVBJvUUBFESL/RZMSwG/JwRLAVBJvkwXTEQjCBZMSwG/gBxwb3NpdGlvbl9hZGRlZF90b19wb3J0Zm9saW86TwJQsCcOTwJQsCcLi/9QsCcPTFCwiSJC/4+KAwAiSYv9QQCWIillRIv9DUEAjCNEi/5EMQCL/xIxACIqZUQSEUSL/hZJjAEnBkxQSYwAvUUBQQBiiwC+TBdMRIv9EkEAVSNEiwC8SIv9FicESwFQSb5MF0xESUQjCRZMSwG/gCBwb3NpdGlvbl9yZW1vdmVkX2Zyb21fcG9ydGZvbGlvOk8CULAnDosBULAnC4v/ULAnD0xQsIkiQv+oIkL/cYoBAYv/RIv/FicGTFBJvUUBQQAJiwC+TBdMREyJIkyJigEBIov/QQAoIillRIv/DUEAHiNEi/8WJwRMUEmMAL1FAUEACYsAvkwXTERMiSJMiSJC/9+KAwAxACIqZUQSRIv9QQCVIillRIv9DUEAiyNEi/5BAICL/iQOQQB5I0SL/xVBAA2L/RYnCUxQSbxIi/+/i/5BAAuL/RYnCkxQi/4Wv4v9FoAScG9ydGZvbGlvX3VwZGF0ZWQ6TFCwi/4WgBRwb3J0Zm9saW9fbmV3X2xldmVsOkxQsIAXcG9ydGZvbGlvX25ld19tZXRhZGF0YTqL/1CwiSJC/4QiQv9yigMAi/1BAH4iKWVEi/0NQQB0I0QxAIv+EjEAIiplRBIRRIv9FicFSwFQi/+/JwhLAVAyBxa/gBZwb3J0Zm9saW9fdHJhbnNmZXJyZWQ6TFCwgBRwb3J0Zm9saW9fb2xkX293bmVyOov+ULCAFHBvcnRmb2xpb19uZXdfb3duZXI6i/9QsIkiQv+JigIAi/5BAG8iKWVEi/4NQQBlI0QxAIv/EjEAIiplRBIRRCIrZUQjCStMZ4v+FicFSwFQvEgnBEsBULxIJwZLAVC8SIARcG9ydGZvbGlvX2J1cm5lZDpMULCAF3BvcnRmb2xpb19idXJuZWRfb3duZXI6i/9QsIkiQv+YIillRCMJIitlRCInB2VEIicMZUQiJw1lRImKAQGL/xYnBUxQvUUBiYoBADEAIiplRBJEKov/Z4APbWludGVyX3VwZGF0ZWQ6i/9QsImKAQGL/xYnBExQSb1FAUEACYsAvkwXTERMiSJMiYoBAYv/FicFTFBJvUUBRL5EiYoBAYv/FicKTFBJvUUBQQAJiwC+TBdMREyJIkyJigEBi/8WJwhMUEm9RQFBAAmLAL5MF0xETIkiTImKAQGL/xYnCUxQSb1FAUEABosAvkRMiYAATIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}