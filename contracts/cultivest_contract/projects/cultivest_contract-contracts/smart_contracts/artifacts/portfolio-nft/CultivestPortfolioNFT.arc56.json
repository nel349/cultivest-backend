{
    "name": "CultivestPortfolioNFT",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the Portfolio NFT contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mintPortfolio",
            "args": [
                {
                    "type": "account",
                    "name": "owner",
                    "desc": "- The Algorand address that will own this portfolio token"
                },
                {
                    "type": "uint64",
                    "name": "level",
                    "desc": "- Initial money tree level (1-5)"
                },
                {
                    "type": "string",
                    "name": "metadataCID"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint new portfolio token for a user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addPositionToPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add position token to a portfolio token\nProperly stores the mapping on-chain using box storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removePositionFromPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove position token from a portfolio token\nProperly removes the on-chain mapping",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPositionPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get which portfolio a position belongs to",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioPositionCount",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get number of positions in a portfolio",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updatePortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "uint64",
                    "name": "newLevel"
                },
                {
                    "type": "string",
                    "name": "newMetadataCID"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update portfolio token values and performance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "currentOwner"
                },
                {
                    "type": "account",
                    "name": "newOwner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer portfolio token ownership",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burnPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Burn portfolio token (close portfolio)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract statistics (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "portfolioExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if portfolio token ID is valid (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAuthorizedMinter",
            "args": [
                {
                    "type": "account",
                    "name": "newMinter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update authorized minter (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioCountForOwner",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioOwner",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioLevel",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioCreated",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPortfolioMetadataCID",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Cultivest Portfolio NFT Smart Contract\nMints individual portfolio tokens that reference Position NFT token IDs\nEach portfolio token represents a collection of position tokens owned by a user\n\nUses box storage to maintain on-chain mappings of positions to portfolios",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 5,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "nextTokenId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dFRva2VuSWQ="
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdXBwbHk="
                },
                "contractVersion": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RWZXJzaW9u"
                },
                "maxSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4U3VwcGx5"
                },
                "positionNFTAppId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9zaXRpb25ORlRBcHBJZA=="
                },
                "authorizedMinter": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXV0aG9yaXplZE1pbnRlcg=="
                },
                "contractName": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y29udHJhY3ROYW1l"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "positionToPortfolio": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "cG9zMnBvcnQ="
                },
                "portfolioPositionCount": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "cG9ydGNvdW50"
                },
                "portfolioOwner": {
                    "keyType": "uint64",
                    "valueType": "address",
                    "prefix": "b3duZXI="
                },
                "portfolioLevel": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "bGV2ZWw="
                },
                "portfolioCreated": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "Y3JlYXRlZA=="
                },
                "portfolioMetadataCID": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": "aXBmcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1114,
                        1242,
                        1268,
                        1368,
                        1417,
                        1978,
                        2000,
                        2025,
                        2054,
                        2080
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        339,
                        367,
                        388,
                        409,
                        437,
                        458,
                        476,
                        503,
                        547,
                        569,
                        597,
                        623,
                        644,
                        665,
                        691,
                        717,
                        750
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1998
                    ],
                    "errorMessage": "Portfolio does not exist"
                },
                {
                    "pc": [
                        1270
                    ],
                    "errorMessage": "Portfolio has no positions to remove"
                },
                {
                    "pc": [
                        1096
                    ],
                    "errorMessage": "Position already assigned to a portfolio"
                },
                {
                    "pc": [
                        1250
                    ],
                    "errorMessage": "Position not in specified portfolio"
                },
                {
                    "pc": [
                        754
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        342,
                        370,
                        391,
                        412,
                        440,
                        461,
                        479,
                        506,
                        550,
                        572,
                        600,
                        626,
                        647,
                        668,
                        694,
                        720
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        861,
                        867,
                        872,
                        896,
                        906,
                        1057,
                        1079,
                        1191,
                        1213,
                        1386,
                        1435,
                        1446,
                        1607,
                        1626,
                        1745,
                        1764,
                        1771,
                        1881,
                        1887,
                        1892,
                        1897,
                        1902,
                        1926
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}