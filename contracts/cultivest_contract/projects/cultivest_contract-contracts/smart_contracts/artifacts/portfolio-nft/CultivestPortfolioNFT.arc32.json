{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "updatePortfolio(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "recordInvestment(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferOwnership(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPortfolioInfo()(uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "algoHoldings": {
                    "type": "uint64",
                    "key": "algoHoldings"
                },
                "authorizedUpdater": {
                    "type": "bytes",
                    "key": "authorizedUpdater"
                },
                "btcHoldings": {
                    "type": "uint64",
                    "key": "btcHoldings"
                },
                "createdAt": {
                    "type": "uint64",
                    "key": "createdAt"
                },
                "isLocked": {
                    "type": "uint64",
                    "key": "isLocked"
                },
                "lastUpdate": {
                    "type": "uint64",
                    "key": "lastUpdate"
                },
                "level": {
                    "type": "uint64",
                    "key": "level"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "totalInvested": {
                    "type": "uint64",
                    "key": "totalInvested"
                },
                "totalValueUSD": {
                    "type": "uint64",
                    "key": "totalValueUSD"
                },
                "unrealizedPnL": {
                    "type": "uint64",
                    "key": "unrealizedPnL"
                },
                "usdcHoldings": {
                    "type": "uint64",
                    "key": "usdcHoldings"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CultivestPortfolioNFT",
        "desc": "Cultivest Portfolio NFT Smart Contract\nTracks multi-chain investment portfolio with Bitcoin-first approach",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize a new Portfolio NFT"
            },
            {
                "name": "updatePortfolio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newBtcHoldings"
                    },
                    {
                        "type": "uint64",
                        "name": "newAlgoHoldings"
                    },
                    {
                        "type": "uint64",
                        "name": "newUsdcHoldings"
                    },
                    {
                        "type": "uint64",
                        "name": "newTotalValueUSD"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update portfolio holdings and values"
            },
            {
                "name": "recordInvestment",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amountUSD"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Record new investment"
            },
            {
                "name": "transferOwnership",
                "args": [
                    {
                        "type": "account",
                        "name": "newOwner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer portfolio ownership"
            },
            {
                "name": "getPortfolioInfo",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Get portfolio information (read-only)"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}