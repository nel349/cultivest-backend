{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "mintPortfolio(account,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addPositionToPortfolio(uint64,uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removePositionFromPortfolio(uint64,uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePortfolio(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferPortfolio(uint64,account,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "burnPortfolio(uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setPositionNFTApp(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getContractStats()(uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "portfolioExists(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setAuthorizedMinter(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 5
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "authorizedMinter": {
                    "type": "bytes",
                    "key": "authorizedMinter"
                },
                "contractName": {
                    "type": "bytes",
                    "key": "contractName"
                },
                "contractVersion": {
                    "type": "uint64",
                    "key": "contractVersion"
                },
                "maxSupply": {
                    "type": "uint64",
                    "key": "maxSupply"
                },
                "nextTokenId": {
                    "type": "uint64",
                    "key": "nextTokenId"
                },
                "positionNFTAppId": {
                    "type": "uint64",
                    "key": "positionNFTAppId"
                },
                "totalSupply": {
                    "type": "uint64",
                    "key": "totalSupply"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CultivestPortfolioNFT",
        "desc": "Cultivest Portfolio NFT Smart Contract\nMints individual portfolio tokens that reference Position NFT token IDs\nEach portfolio token represents a collection of position tokens owned by a user\n\nNote: For MVP, we'll store minimal state in global storage and use off-chain indexing\nfor detailed portfolio metadata. In production, we can upgrade to use box storage.",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the Portfolio NFT contract"
            },
            {
                "name": "mintPortfolio",
                "args": [
                    {
                        "type": "account",
                        "name": "owner",
                        "desc": "- The Algorand address that will own this portfolio token"
                    },
                    {
                        "type": "uint64",
                        "name": "level",
                        "desc": "- Initial money tree level (1-5)"
                    },
                    {
                        "type": "uint64",
                        "name": "totalInvestedUSD",
                        "desc": "- Total amount invested in USD cents"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Mint new portfolio token for a user\nFor MVP: Portfolio metadata is stored off-chain using the logged events\nThe contract only tracks basic state and emits detailed events for indexing"
            },
            {
                "name": "addPositionToPortfolio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "portfolioTokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "positionTokenId"
                    },
                    {
                        "type": "account",
                        "name": "owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add position token to a portfolio token\nFor MVP: This is tracked off-chain, contract just logs the assignment"
            },
            {
                "name": "removePositionFromPortfolio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "portfolioTokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "positionTokenId"
                    },
                    {
                        "type": "account",
                        "name": "owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove position token from a portfolio token"
            },
            {
                "name": "updatePortfolio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "portfolioTokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "newLevel"
                    },
                    {
                        "type": "uint64",
                        "name": "newTotalValueUSD"
                    },
                    {
                        "type": "uint64",
                        "name": "newTotalInvestedUSD"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update portfolio token values and performance\nFor MVP: Only validates token exists via ID range, metadata tracked off-chain"
            },
            {
                "name": "transferPortfolio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "portfolioTokenId"
                    },
                    {
                        "type": "account",
                        "name": "currentOwner"
                    },
                    {
                        "type": "account",
                        "name": "newOwner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer portfolio token ownership\nFor MVP: Off-chain system tracks ownership, this logs the transfer event"
            },
            {
                "name": "burnPortfolio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "portfolioTokenId"
                    },
                    {
                        "type": "account",
                        "name": "owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Burn portfolio token (close portfolio)\nFor MVP: Decrements supply and logs burn event for off-chain cleanup"
            },
            {
                "name": "setPositionNFTApp",
                "args": [
                    {
                        "type": "uint64",
                        "name": "appId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the Position NFT contract app ID (admin only)"
            },
            {
                "name": "getContractStats",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Get contract statistics (read-only)"
            },
            {
                "name": "portfolioExists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "portfolioTokenId"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Check if portfolio token ID is valid (read-only)\nFor MVP: Only checks if token ID is in valid range\nOff-chain system tracks full portfolio metadata"
            },
            {
                "name": "setAuthorizedMinter",
                "args": [
                    {
                        "type": "account",
                        "name": "newMinter"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update authorized minter (admin only)"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}