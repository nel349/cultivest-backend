{
    "name": "CultivestPositionNFT",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the Position NFT contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mintPosition",
            "args": [
                {
                    "type": "account",
                    "name": "owner",
                    "desc": "- The Algorand address that will own this position token"
                },
                {
                    "type": "uint64",
                    "name": "assetType",
                    "desc": "- Asset type: 1=Bitcoin, 2=Algorand, 3=USDC"
                },
                {
                    "type": "uint64",
                    "name": "holdings",
                    "desc": "- Amount held in smallest units (sats, microALGO, microUSDC)"
                },
                {
                    "type": "uint64",
                    "name": "purchaseValueUSD",
                    "desc": "- Purchase value in USD cents (e.g., 100 = $1.00)"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint new position token for an asset holding\nAsset types: 1=Bitcoin, 2=Algorand, 3=USDC\n\nFor MVP: Token metadata is stored off-chain using the logged events\nThe contract only tracks basic state and emits detailed events for indexing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updatePosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "uint64",
                    "name": "newHoldings"
                },
                {
                    "type": "uint64",
                    "name": "newCurrentValueUSD"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update position token holdings and current value\nFor MVP: Only validates token exists via ID range, metadata tracked off-chain",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferPosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId",
                    "desc": "- The token ID to transfer"
                },
                {
                    "type": "account",
                    "name": "currentOwner",
                    "desc": "- Current owner's Algorand address"
                },
                {
                    "type": "account",
                    "name": "newOwner",
                    "desc": "- New owner's Algorand address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer position token ownership (triggers key re-encryption)\nFor MVP: Off-chain system tracks ownership, this logs the transfer event",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assignToPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Assign position token to a portfolio token\nFor MVP: This is tracked off-chain, contract just logs the assignment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burnPosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId",
                    "desc": "- The token ID to burn"
                },
                {
                    "type": "account",
                    "name": "owner",
                    "desc": "- Owner's Algorand address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Burn position token (sell/withdraw all holdings)\nFor MVP: Decrements supply and logs burn event for off-chain cleanup",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract statistics (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tokenExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if token ID is valid (read-only)\nFor MVP: Only checks if token ID is in valid range\nOff-chain system tracks full token metadata",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAuthorizedMinter",
            "args": [
                {
                    "type": "account",
                    "name": "newMinter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update authorized minter (admin only)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Cultivest Position NFT Smart Contract\nMints individual position tokens for Bitcoin, Algorand, and USDC holdings\nEach token represents a claim to custodial assets with encrypted private key references\n\nNote: For MVP, we'll store minimal state in global storage and use off-chain indexing\nfor detailed token metadata. In production, we can upgrade to use box storage.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "nextTokenId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dFRva2VuSWQ="
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdXBwbHk="
                },
                "contractVersion": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RWZXJzaW9u"
                },
                "maxSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4U3VwcGx5"
                },
                "authorizedMinter": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXV0aG9yaXplZE1pbnRlcg=="
                },
                "contractName": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y29udHJhY3ROYW1l"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        159,
                        177,
                        198,
                        236,
                        258,
                        284,
                        312,
                        336,
                        371
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        375
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        162,
                        180,
                        201,
                        239,
                        261,
                        287,
                        315,
                        339
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        476,
                        482,
                        487,
                        514,
                        524,
                        673,
                        684,
                        797,
                        816,
                        915,
                        937,
                        1040,
                        1059,
                        1066,
                        1132,
                        1138,
                        1143,
                        1148,
                        1161,
                        1180
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBgtuZXh0VG9rZW5JZBBhdXRob3JpemVkTWludGVyC3RvdGFsU3VwcGx5BBUffHUJbWF4U3VwcGx5D2NvbnRyYWN0VmVyc2lvbjEbQQBGggkEuER7NgQ6vcuhBCKR9ZUEXMGuYAT0ewX0BFjo/9ME3atDswRgIuf2BM0LPaE2GgCOCQDWALMAmwB/AGUATwApABQAAiJDMRkURDEYRDYaARfAHIgD6CNDMRkURDEYRDYaAReIA8IWK0xQsCNDMRkURDEYRIgDnE8DFk8DFk8DFk8DFk8DTwNQTwJQTFArTFCwI0MxGRREMRhENhoBFzYaAhfAHIgDCCNDMRkURDEYRDYaARc2GgIXNhoDF8AciAJxI0MxGRREMRhENhoBFzYaAhfAHDYaAxfAHIgB3yNDMRkURDEYRDYaARc2GgIXNhoDF4gBTiNDMRkURDEYRDYaARfAHDYaAhc2GgMXNhoEF4gAaxYrTFCwI0MxGRREMRgURIgAAiNDKCNnKiJnJwUjZycEgaCNBmcpMQBnggIMY29udHJhY3ROYW1lFEN1bHRpdmVzdFBvc2l0aW9uTkZUZ4AZcG9zaXRpb25fY29udHJhY3RfY3JlYXRlZLCJigQBMQAiKWVEEkQiKmVEIicEZUQMRIv9QQCmi/2BAw5BAJ4jRIv+RIv/RCIoZURJIwgoTGciKmVEIwgqTGdJFoAQcG9zaXRpb25fbWludGVkOkxQsIv9FoAUcG9zaXRpb25fYXNzZXRfdHlwZTpMULCL/haAEnBvc2l0aW9uX2hvbGRpbmdzOkxQsIv/FoAYcG9zaXRpb25fcHVyY2hhc2VfdmFsdWU6TFCwgA9wb3NpdGlvbl9vd25lcjqL/FCwiSJC/1+KAwAxACIpZUQSRIv9QQBlIihlRIv9DUEAWyNEi/5Ei/9Ei/0WgBFwb3NpdGlvbl91cGRhdGVkOkxQsIv+FoAWcG9zaXRpb25fbmV3X2hvbGRpbmdzOkxQsIv/FoATcG9zaXRpb25fbmV3X3ZhbHVlOkxQsIkiQv+iigMAi/1BAGoiKGVEi/0NQQBgI0QxAIv+EjEAIillRBIRRIv9FoAVcG9zaXRpb25fdHJhbnNmZXJyZWQ6TFCwgBNwb3NpdGlvbl9vbGRfb3duZXI6i/5QsIATcG9zaXRpb25fbmV3X293bmVyOov/ULCJIkL/nYoDAIv9QQBxIihlRIv9DUEAZyNEi/5EMQCL/xIxACIpZUQSEUSL/RaAEnBvc2l0aW9uX2Fzc2lnbmVkOkxQsIv+FoATcG9zaXRpb25fcG9ydGZvbGlvOkxQsIAYcG9zaXRpb25fYXNzaWduZWRfb3duZXI6i/9QsIkiQv+WigIAi/5BAFgiKGVEi/4NQQBOI0QxAIv/EjEAIillRBIRRCIqZUQjCSpMZ4v+FoAQcG9zaXRpb25fYnVybmVkOkxQsIAWcG9zaXRpb25fYnVybmVkX293bmVyOov/ULCJIkL/ryIoZUQjCSIqZUQiJwRlRCInBWVEiYoBAYv/QQAMIihlRIv/DUEAAiOJIomKAQAxACIpZUQSRCmL/2eAD21pbnRlcl91cGRhdGVkOov/ULCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}