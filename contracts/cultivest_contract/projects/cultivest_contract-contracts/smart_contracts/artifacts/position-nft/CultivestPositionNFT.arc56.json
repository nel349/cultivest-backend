{
    "name": "CultivestPositionNFT",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the Position NFT contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mintPosition",
            "args": [
                {
                    "type": "account",
                    "name": "owner",
                    "desc": "- The Algorand address that will own this position token"
                },
                {
                    "type": "uint64",
                    "name": "assetType",
                    "desc": "- Asset type: 1=Bitcoin, 2=Algorand, 3=USDC"
                },
                {
                    "type": "uint64",
                    "name": "holdings",
                    "desc": "- Amount held in smallest units (sats, microALGO, microUSDC)"
                },
                {
                    "type": "uint64",
                    "name": "purchaseValueUSD",
                    "desc": "- Purchase value in USD cents (e.g., 100 = $1.00)"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint new position token for an asset holding\nAsset types: 1=Bitcoin, 2=Algorand, 3=USDC\n\nStores essential position data on-chain using BoxMap storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updatePosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "uint64",
                    "name": "newHoldings"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update position token holdings (when user buys/sells more of the asset)\nNote: Current value is calculated off-chain using market prices",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferPosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId",
                    "desc": "- The token ID to transfer"
                },
                {
                    "type": "account",
                    "name": "currentOwner",
                    "desc": "- Current owner's Algorand address"
                },
                {
                    "type": "account",
                    "name": "newOwner",
                    "desc": "- New owner's Algorand address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer position token ownership (triggers key re-encryption)\nFor MVP: Off-chain system tracks ownership, this logs the transfer event",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assignToPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Assign position token to a portfolio token\nFor MVP: This is tracked off-chain, contract just logs the assignment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burnPosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId",
                    "desc": "- The token ID to burn"
                },
                {
                    "type": "account",
                    "name": "owner",
                    "desc": "- Owner's Algorand address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Burn position token (sell/withdraw all holdings)\nFor MVP: Decrements supply and logs burn event for off-chain cleanup",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract statistics (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tokenExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if token ID is valid (read-only)\nFor MVP: Only checks if token ID is in valid range\nOff-chain system tracks full token metadata",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAuthorizedMinter",
            "args": [
                {
                    "type": "account",
                    "name": "newMinter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update authorized minter (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPositionOwner",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get position owner",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPositionAssetType",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get position asset type",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPositionHoldings",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get position holdings amount",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPositionPurchaseValue",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get position purchase value",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "positionExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if position exists",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Cultivest Position NFT Smart Contract\nMints individual position tokens for Bitcoin, Algorand, and USDC holdings\nEach token represents a claim to custodial assets with encrypted private key references\n\nNote: For MVP, we'll store minimal state in global storage and use off-chain indexing\nfor detailed token metadata. In production, we can upgrade to use box storage.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "nextTokenId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dFRva2VuSWQ="
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdXBwbHk="
                },
                "contractVersion": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RWZXJzaW9u"
                },
                "maxSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4U3VwcGx5"
                },
                "authorizedMinter": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXV0aG9yaXplZE1pbnRlcg=="
                },
                "contractName": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y29udHJhY3ROYW1l"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "positionOwner": {
                    "keyType": "uint64",
                    "valueType": "address",
                    "prefix": "b3duZXI="
                },
                "positionAssetType": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "YXNzZXQ="
                },
                "positionHoldings": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "aG9sZGluZ3M="
                },
                "positionPurchaseValue": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "prefix": "cHVyY2hhc2U="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1431,
                        1456,
                        1485,
                        1514
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        224,
                        251,
                        272,
                        293,
                        314,
                        342,
                        360,
                        381,
                        419,
                        441,
                        467,
                        495,
                        515,
                        550
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        924,
                        1429
                    ],
                    "errorMessage": "Position does not exist"
                },
                {
                    "pc": [
                        554
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        227,
                        254,
                        275,
                        296,
                        317,
                        345,
                        363,
                        384,
                        422,
                        444,
                        470,
                        498,
                        518
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        655,
                        661,
                        666,
                        693,
                        703,
                        890,
                        901,
                        1003,
                        1022,
                        1121,
                        1143,
                        1246,
                        1265,
                        1272,
                        1338,
                        1344,
                        1349,
                        1354,
                        1367,
                        1386
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}