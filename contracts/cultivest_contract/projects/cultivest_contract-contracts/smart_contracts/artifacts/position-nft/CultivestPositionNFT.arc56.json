{
    "name": "CultivestPositionNFT",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the Position NFT contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mintPosition",
            "args": [
                {
                    "type": "account",
                    "name": "owner"
                },
                {
                    "type": "uint64",
                    "name": "assetType"
                },
                {
                    "type": "uint64",
                    "name": "holdings"
                },
                {
                    "type": "uint64",
                    "name": "purchaseValueUSD"
                },
                {
                    "type": "string",
                    "name": "privateKeyRef"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint new position token for an asset holding\nAsset types: 1=Bitcoin, 2=Algorand, 3=USDC\n\nFor MVP: Token metadata is stored off-chain using the logged events\nThe contract only tracks basic state and emits detailed events for indexing",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updatePosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "uint64",
                    "name": "newHoldings"
                },
                {
                    "type": "uint64",
                    "name": "newCurrentValueUSD"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update position token holdings and current value\nFor MVP: Only validates token exists via ID range, metadata tracked off-chain",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transferPosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "account",
                    "name": "currentOwner"
                },
                {
                    "type": "account",
                    "name": "newOwner"
                },
                {
                    "type": "string",
                    "name": "privateKeyRef"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer position token ownership (triggers key re-encryption)\nFor MVP: Off-chain system tracks ownership, this logs the transfer event",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assignToPortfolio",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "uint64",
                    "name": "portfolioTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Assign position token to a portfolio token\nFor MVP: This is tracked off-chain, contract just logs the assignment",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burnPosition",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                },
                {
                    "type": "account",
                    "name": "owner"
                },
                {
                    "type": "string",
                    "name": "privateKeyRef"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Burn position token (sell/withdraw all holdings)\nFor MVP: Decrements supply and logs burn event for off-chain cleanup",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract statistics (read-only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "tokenExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "positionTokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Check if token ID is valid (read-only)\nFor MVP: Only checks if token ID is in valid range\nOff-chain system tracks full token metadata",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAuthorizedMinter",
            "args": [
                {
                    "type": "account",
                    "name": "newMinter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update authorized minter (admin only)",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Cultivest Position NFT Smart Contract\nMints individual position tokens for Bitcoin, Algorand, and USDC holdings\nEach token represents a claim to custodial assets with encrypted private key references\n\nNote: For MVP, we'll store minimal state in global storage and use off-chain indexing\nfor detailed token metadata. In production, we can upgrade to use box storage.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "nextTokenId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dFRva2VuSWQ="
                },
                "totalSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdXBwbHk="
                },
                "contractVersion": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29udHJhY3RWZXJzaW9u"
                },
                "maxSupply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4U3VwcGx5"
                },
                "authorizedMinter": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YXV0aG9yaXplZE1pbnRlcg=="
                },
                "contractName": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y29udHJhY3ROYW1l"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        159,
                        177,
                        198,
                        236,
                        264,
                        290,
                        324,
                        348,
                        389
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        393
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        162,
                        180,
                        201,
                        239,
                        267,
                        293,
                        327,
                        351
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        494,
                        500,
                        505,
                        532,
                        542,
                        714,
                        725,
                        838,
                        857,
                        985,
                        1007,
                        1110,
                        1129,
                        1136,
                        1229,
                        1235,
                        1240,
                        1245,
                        1258,
                        1277
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBgtuZXh0VG9rZW5JZBBhdXRob3JpemVkTWludGVyC3RvdGFsU3VwcGx5BBUffHUJbWF4U3VwcGx5D2NvbnRyYWN0VmVyc2lvbjEbQQBGggkEuER7NgSEHzZQBCKR9ZUEC+9yowT0ewX0BJVxiGcE3atDswRgIuf2BM0LPaE2GgCOCQDoAL8ApwCFAGsATwApABQAAiJDMRkURDEYRDYaARfAHIgESSNDMRkURDEYRDYaAReIBCMWK0xQsCNDMRkURDEYRIgD/U8DFk8DFk8DFk8DFk8DTwNQTwJQTFArTFCwI0MxGRREMRhENhoBFzYaAhfAHDYaA1cCAIgDSCNDMRkURDEYRDYaARc2GgIXNhoDF8AciAKxI0MxGRREMRhENhoBFzYaAhfAHDYaAxfAHDYaBFcCAIgB/CNDMRkURDEYRDYaARc2GgIXNhoDF4gBayNDMRkURDEYRDYaARfAHDYaAhc2GgMXNhoEFzYaBVcCAIgAaxYrTFCwI0MxGRREMRgURIgAAiNDKCNnKiJnJwUjZycEgaCNBmcpMQBnggIMY29udHJhY3ROYW1lFEN1bHRpdmVzdFBvc2l0aW9uTkZUZ4AZcG9zaXRpb25fY29udHJhY3RfY3JlYXRlZLCJigUBMQAiKWVEEkQiKmVEIicEZUQMRIv8QQC9i/yBAw5BALUjRIv9RIv+RCIoZURJIwgoTGciKmVEIwgqTGdJFoAQcG9zaXRpb25fbWludGVkOkxQsIv8FoAUcG9zaXRpb25fYXNzZXRfdHlwZTpMULCL/RaAEnBvc2l0aW9uX2hvbGRpbmdzOkxQsIv+FoAYcG9zaXRpb25fcHVyY2hhc2VfdmFsdWU6TFCwgA9wb3NpdGlvbl9vd25lcjqL+1CwgBFwb3NpdGlvbl9rZXlfcmVmOov/ULCJIkL/SIoDADEAIillRBJEi/1BAGUiKGVEi/0NQQBbI0SL/kSL/0SL/RaAEXBvc2l0aW9uX3VwZGF0ZWQ6TFCwi/4WgBZwb3NpdGlvbl9uZXdfaG9sZGluZ3M6TFCwi/8WgBNwb3NpdGlvbl9uZXdfdmFsdWU6TFCwiSJC/6KKBACL/EEAhyIoZUSL/A1BAH0jRDEAi/0SMQAiKWVEEhFEi/wWgBVwb3NpdGlvbl90cmFuc2ZlcnJlZDpMULCAE3Bvc2l0aW9uX29sZF9vd25lcjqL/VCwgBNwb3NpdGlvbl9uZXdfb3duZXI6i/5QsIAXcG9zaXRpb25fa2V5X3JlZW5jcnlwdDqL/1CwiSJC/4CKAwCL/UEAcSIoZUSL/Q1BAGcjRIv+RDEAi/8SMQAiKWVEEhFEi/0WgBJwb3NpdGlvbl9hc3NpZ25lZDpMULCL/haAE3Bvc2l0aW9uX3BvcnRmb2xpbzpMULCAGHBvc2l0aW9uX2Fzc2lnbmVkX293bmVyOov/ULCJIkL/looDAIv9QQBzIihlRIv9DUEAaSNEMQCL/hIxACIpZUQSEUQiKmVEIwkqTGeL/RaAEHBvc2l0aW9uX2J1cm5lZDpMULCAFnBvc2l0aW9uX2J1cm5lZF9vd25lcjqL/lCwgBVwb3NpdGlvbl9rZXlfY2xlYW51cDqL/1CwiSJC/5QiKGVEIwkiKmVEIicEZUQiJwVlRImKAQGL/0EADCIoZUSL/w1BAAIjiSKJigEAMQAiKWVEEkQpi/9ngA9taW50ZXJfdXBkYXRlZDqL/1CwiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}