// @ts-nocheck
/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CultivestPositionNFT","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the Position NFT contract","events":[],"recommendations":{}},{"name":"mintPosition","args":[{"type":"account","name":"owner","desc":"- The Algorand address that will own this position token"},{"type":"uint64","name":"assetType","desc":"- Asset type: 1=Bitcoin, 2=Algorand, 3=USDC"},{"type":"uint64","name":"holdings","desc":"- Amount held in smallest units (sats, microALGO, microUSDC)"},{"type":"uint64","name":"purchaseValueUSD","desc":"- Purchase value in USD cents (e.g., 100 = $1.00)"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mint new position token for an asset holding\nAsset types: 1=Bitcoin, 2=Algorand, 3=USDC\n\nStores essential position data on-chain using BoxMap storage","events":[],"recommendations":{}},{"name":"updatePosition","args":[{"type":"uint64","name":"positionTokenId"},{"type":"uint64","name":"newHoldings"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update position token holdings (when user buys/sells more of the asset)\nNote: Current value is calculated off-chain using market prices","events":[],"recommendations":{}},{"name":"transferPosition","args":[{"type":"uint64","name":"positionTokenId","desc":"- The token ID to transfer"},{"type":"account","name":"currentOwner","desc":"- Current owner's Algorand address"},{"type":"account","name":"newOwner","desc":"- New owner's Algorand address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer position token ownership (triggers key re-encryption)\nFor MVP: Off-chain system tracks ownership, this logs the transfer event","events":[],"recommendations":{}},{"name":"assignToPortfolio","args":[{"type":"uint64","name":"positionTokenId"},{"type":"uint64","name":"portfolioTokenId"},{"type":"account","name":"owner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Assign position token to a portfolio token\nFor MVP: This is tracked off-chain, contract just logs the assignment","events":[],"recommendations":{}},{"name":"burnPosition","args":[{"type":"uint64","name":"positionTokenId","desc":"- The token ID to burn"},{"type":"account","name":"owner","desc":"- Owner's Algorand address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Burn position token (sell/withdraw all holdings)\nFor MVP: Decrements supply and logs burn event for off-chain cleanup","events":[],"recommendations":{}},{"name":"getContractStats","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get contract statistics (read-only)","events":[],"recommendations":{}},{"name":"tokenExists","args":[{"type":"uint64","name":"positionTokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if token ID is valid (read-only)\nFor MVP: Only checks if token ID is in valid range\nOff-chain system tracks full token metadata","events":[],"recommendations":{}},{"name":"setAuthorizedMinter","args":[{"type":"account","name":"newMinter"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update authorized minter (admin only)","events":[],"recommendations":{}},{"name":"getPositionOwner","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get position owner","events":[],"recommendations":{}},{"name":"getPositionAssetType","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get position asset type","events":[],"recommendations":{}},{"name":"getPositionHoldings","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get position holdings amount","events":[],"recommendations":{}},{"name":"getPositionPurchaseValue","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get position purchase value","events":[],"recommendations":{}},{"name":"positionExists","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Check if position exists","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Cultivest Position NFT Smart Contract\nMints individual position tokens for Bitcoin, Algorand, and USDC holdings\nEach token represents a claim to custodial assets with encrypted private key references\n\nNote: For MVP, we'll store minimal state in global storage and use off-chain indexing\nfor detailed token metadata. In production, we can upgrade to use box storage.","networks":{},"state":{"schema":{"global":{"ints":4,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextTokenId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dFRva2VuSWQ="},"totalSupply":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdXBwbHk="},"contractVersion":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udHJhY3RWZXJzaW9u"},"maxSupply":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4U3VwcGx5"},"authorizedMinter":{"keyType":"AVMString","valueType":"address","key":"YXV0aG9yaXplZE1pbnRlcg=="},"contractName":{"keyType":"AVMString","valueType":"AVMString","key":"Y29udHJhY3ROYW1l"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"positionOwner":{"keyType":"uint64","valueType":"address","prefix":"b3duZXI="},"positionAssetType":{"keyType":"uint64","valueType":"uint64","prefix":"YXNzZXQ="},"positionHoldings":{"keyType":"uint64","valueType":"uint64","prefix":"aG9sZGluZ3M="},"positionPurchaseValue":{"keyType":"uint64","valueType":"uint64","prefix":"cHVyY2hhc2U="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1431,1456,1485,1514],"errorMessage":"Box must have value"},{"pc":[224,251,272,293,314,342,360,381,419,441,467,495,515,550],"errorMessage":"OnCompletion is not NoOp"},{"pc":[924,1429],"errorMessage":"Position does not exist"},{"pc":[554],"errorMessage":"can only call when creating"},{"pc":[227,254,275,296,317,345,363,384,422,444,470,498,518],"errorMessage":"can only call when not creating"},{"pc":[655,661,666,693,703,890,901,1003,1022,1121,1143,1246,1265,1272,1338,1344,1349,1354,1367,1386],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmCgtuZXh0VG9rZW5JZAQVH3x1EGF1dGhvcml6ZWRNaW50ZXILdG90YWxTdXBwbHkFb3duZXIJbWF4U3VwcGx5CGhvbGRpbmdzD2NvbnRyYWN0VmVyc2lvbgVhc3NldAhwdXJjaGFzZTEbQQBpgg4EuER7NgQ6vcuhBPSZe+cEXMGuYAT0ewX0BFjo/9ME3atDswRgIuf2BM0LPaEEF/OqxgQnBtDYBOIQC8cEk8v68gSWx+9XNhoAjg4BSAElAREA9QDbAMUAnwCKAHgAXABHADIAHQACIkMxGRREMRhENhoBF4gFBYABACJPAlQpTFCwI0MxGRREMRhENhoBF4gEzRYpTFCwI0MxGRREMRhENhoBF4gEmxYpTFCwI0MxGRREMRhENhoBF4gEaRYpTFCwI0MxGRREMRhENhoBF4gEQkkVFlcGAkxQKUxQsCNDMRkURDEYRDYaARfAHIgD/yNDMRkURDEYRDYaAReIA9kWKUxQsCNDMRkURDEYRIgDs08DFk8DFk8DFk8DFk8DTwNQTwJQTFApTFCwI0MxGRREMRhENhoBFzYaAhfAHIgDHyNDMRkURDEYRDYaARc2GgIXNhoDF8AciAKII0MxGRREMRhENhoBFzYaAhfAHDYaAxfAHIgB9iNDMRkURDEYRDYaARc2GgIXiAF0I0MxGRREMRhENhoBF8AcNhoCFzYaAxc2GgQXiABrFilMULAjQzEZFEQxGBREiAACI0MoI2crImcnByNnJwWBoI0GZyoxAGeCAgxjb250cmFjdE5hbWUUQ3VsdGl2ZXN0UG9zaXRpb25ORlRngBlwb3NpdGlvbl9jb250cmFjdF9jcmVhdGVksImKBAExACIqZUQSRCIrZUQiJwVlRAxEi/1BAMyL/YEDDkEAxCNEi/5Ei/9EIihlREkjCChMZyIrZUQjCCtMZ0kWJwRLAVCL/L8nCEsBUIv9FkxLAb8nBksCUIv+FkxLAb8nCUsDUIv/FkxLAb+AEHBvc2l0aW9uX21pbnRlZDpPBFCwgBRwb3NpdGlvbl9hc3NldF90eXBlOk8DULCAEnBvc2l0aW9uX2hvbGRpbmdzOk8CULCAGHBvc2l0aW9uX3B1cmNoYXNlX3ZhbHVlOkxQsIAPcG9zaXRpb25fb3duZXI6i/xQsIkiQv85igIAMQAiKmVEEkSL/kEAWiIoZUSL/g1BAFAjRIv/RIv+FicESwFQvUUBRCcGSwFQi/8WTEsBv4ARcG9zaXRpb25fdXBkYXRlZDpPAlCwgBZwb3NpdGlvbl9uZXdfaG9sZGluZ3M6TFCwiSJC/62KAwCL/UEAaiIoZUSL/Q1BAGAjRDEAi/4SMQAiKmVEEhFEi/0WgBVwb3NpdGlvbl90cmFuc2ZlcnJlZDpMULCAE3Bvc2l0aW9uX29sZF9vd25lcjqL/lCwgBNwb3NpdGlvbl9uZXdfb3duZXI6i/9QsIkiQv+digMAi/1BAHEiKGVEi/0NQQBnI0SL/kQxAIv/EjEAIiplRBIRRIv9FoAScG9zaXRpb25fYXNzaWduZWQ6TFCwi/4WgBNwb3NpdGlvbl9wb3J0Zm9saW86TFCwgBhwb3NpdGlvbl9hc3NpZ25lZF9vd25lcjqL/1CwiSJC/5aKAgCL/kEAWCIoZUSL/g1BAE4jRDEAi/8SMQAiKmVEEhFEIitlRCMJK0xni/4WgBBwb3NpdGlvbl9idXJuZWQ6TFCwgBZwb3NpdGlvbl9idXJuZWRfb3duZXI6i/9QsIkiQv+vIihlRCMJIitlRCInBWVEIicHZUSJigEBi/9BAAwiKGVEi/8NQQACI4kiiYoBADEAIiplRBJEKov/Z4APbWludGVyX3VwZGF0ZWQ6i/9QsImKAQGL/xYnBExQSb1FAUS+RImKAQGL/xYnCExQSb1FAUEACYsAvkwXTERMiSJMiYoBAYv/FicGTFBJvUUBQQAJiwC+TBdMREyJIkyJigEBi/8WJwlMUEm9RQFBAAmLAL5MF0xETIkiTImKAQGL/xYnBExQvUUBiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CultivestPositionNft contract
 */
export type CultivestPositionNftArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'mintPosition(account,uint64,uint64,uint64)uint64': {
      /**
       * - The Algorand address that will own this position token
       */
      owner: Uint8Array | string
      /**
       * - Asset type: 1=Bitcoin, 2=Algorand, 3=USDC
       */
      assetType: bigint | number
      /**
       * - Amount held in smallest units (sats, microALGO, microUSDC)
       */
      holdings: bigint | number
      /**
       * - Purchase value in USD cents (e.g., 100 = $1.00)
       */
      purchaseValueUsd: bigint | number
    }
    'updatePosition(uint64,uint64)void': {
      positionTokenId: bigint | number
      newHoldings: bigint | number
    }
    'transferPosition(uint64,account,account)void': {
      /**
       * - The token ID to transfer
       */
      positionTokenId: bigint | number
      /**
       * - Current owner's Algorand address
       */
      currentOwner: Uint8Array | string
      /**
       * - New owner's Algorand address
       */
      newOwner: Uint8Array | string
    }
    'assignToPortfolio(uint64,uint64,account)void': {
      positionTokenId: bigint | number
      portfolioTokenId: bigint | number
      owner: Uint8Array | string
    }
    'burnPosition(uint64,account)void': {
      /**
       * - The token ID to burn
       */
      positionTokenId: bigint | number
      /**
       * - Owner's Algorand address
       */
      owner: Uint8Array | string
    }
    'getContractStats()(uint64,uint64,uint64,uint64)': Record<string, never>
    'tokenExists(uint64)uint64': {
      positionTokenId: bigint | number
    }
    'setAuthorizedMinter(account)void': {
      newMinter: Uint8Array | string
    }
    'getPositionOwner(uint64)byte[]': {
      tokenId: bigint | number
    }
    'getPositionAssetType(uint64)uint64': {
      tokenId: bigint | number
    }
    'getPositionHoldings(uint64)uint64': {
      tokenId: bigint | number
    }
    'getPositionPurchaseValue(uint64)uint64': {
      tokenId: bigint | number
    }
    'positionExists(uint64)bool': {
      tokenId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'mintPosition(account,uint64,uint64,uint64)uint64': [owner: Uint8Array | string, assetType: bigint | number, holdings: bigint | number, purchaseValueUsd: bigint | number]
    'updatePosition(uint64,uint64)void': [positionTokenId: bigint | number, newHoldings: bigint | number]
    'transferPosition(uint64,account,account)void': [positionTokenId: bigint | number, currentOwner: Uint8Array | string, newOwner: Uint8Array | string]
    'assignToPortfolio(uint64,uint64,account)void': [positionTokenId: bigint | number, portfolioTokenId: bigint | number, owner: Uint8Array | string]
    'burnPosition(uint64,account)void': [positionTokenId: bigint | number, owner: Uint8Array | string]
    'getContractStats()(uint64,uint64,uint64,uint64)': []
    'tokenExists(uint64)uint64': [positionTokenId: bigint | number]
    'setAuthorizedMinter(account)void': [newMinter: Uint8Array | string]
    'getPositionOwner(uint64)byte[]': [tokenId: bigint | number]
    'getPositionAssetType(uint64)uint64': [tokenId: bigint | number]
    'getPositionHoldings(uint64)uint64': [tokenId: bigint | number]
    'getPositionPurchaseValue(uint64)uint64': [tokenId: bigint | number]
    'positionExists(uint64)bool': [tokenId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CultivestPositionNftReturns = {
  'createApplication()void': void
  'mintPosition(account,uint64,uint64,uint64)uint64': bigint
  'updatePosition(uint64,uint64)void': void
  'transferPosition(uint64,account,account)void': void
  'assignToPortfolio(uint64,uint64,account)void': void
  'burnPosition(uint64,account)void': void
  'getContractStats()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'tokenExists(uint64)uint64': bigint
  'setAuthorizedMinter(account)void': void
  'getPositionOwner(uint64)byte[]': Uint8Array
  'getPositionAssetType(uint64)uint64': bigint
  'getPositionHoldings(uint64)uint64': bigint
  'getPositionPurchaseValue(uint64)uint64': bigint
  'positionExists(uint64)bool': boolean
}

/**
 * Defines the types of available calls and state of the CultivestPositionNft smart contract.
 */
export type CultivestPositionNftTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CultivestPositionNftArgs['obj']['createApplication()void']
      argsTuple: CultivestPositionNftArgs['tuple']['createApplication()void']
      returns: CultivestPositionNftReturns['createApplication()void']
    }>
    & Record<'mintPosition(account,uint64,uint64,uint64)uint64' | 'mintPosition', {
      argsObj: CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64']
      argsTuple: CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']
      returns: CultivestPositionNftReturns['mintPosition(account,uint64,uint64,uint64)uint64']
    }>
    & Record<'updatePosition(uint64,uint64)void' | 'updatePosition', {
      argsObj: CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void']
      argsTuple: CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']
      returns: CultivestPositionNftReturns['updatePosition(uint64,uint64)void']
    }>
    & Record<'transferPosition(uint64,account,account)void' | 'transferPosition', {
      argsObj: CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void']
      argsTuple: CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']
      returns: CultivestPositionNftReturns['transferPosition(uint64,account,account)void']
    }>
    & Record<'assignToPortfolio(uint64,uint64,account)void' | 'assignToPortfolio', {
      argsObj: CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void']
      argsTuple: CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']
      returns: CultivestPositionNftReturns['assignToPortfolio(uint64,uint64,account)void']
    }>
    & Record<'burnPosition(uint64,account)void' | 'burnPosition', {
      argsObj: CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void']
      argsTuple: CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']
      returns: CultivestPositionNftReturns['burnPosition(uint64,account)void']
    }>
    & Record<'getContractStats()(uint64,uint64,uint64,uint64)' | 'getContractStats', {
      argsObj: CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)']
      argsTuple: CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']
      returns: CultivestPositionNftReturns['getContractStats()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'tokenExists(uint64)uint64' | 'tokenExists', {
      argsObj: CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64']
      argsTuple: CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']
      returns: CultivestPositionNftReturns['tokenExists(uint64)uint64']
    }>
    & Record<'setAuthorizedMinter(account)void' | 'setAuthorizedMinter', {
      argsObj: CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void']
      argsTuple: CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']
      returns: CultivestPositionNftReturns['setAuthorizedMinter(account)void']
    }>
    & Record<'getPositionOwner(uint64)byte[]' | 'getPositionOwner', {
      argsObj: CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]']
      argsTuple: CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']
      returns: CultivestPositionNftReturns['getPositionOwner(uint64)byte[]']
    }>
    & Record<'getPositionAssetType(uint64)uint64' | 'getPositionAssetType', {
      argsObj: CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64']
      argsTuple: CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']
      returns: CultivestPositionNftReturns['getPositionAssetType(uint64)uint64']
    }>
    & Record<'getPositionHoldings(uint64)uint64' | 'getPositionHoldings', {
      argsObj: CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64']
      argsTuple: CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']
      returns: CultivestPositionNftReturns['getPositionHoldings(uint64)uint64']
    }>
    & Record<'getPositionPurchaseValue(uint64)uint64' | 'getPositionPurchaseValue', {
      argsObj: CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64']
      argsTuple: CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']
      returns: CultivestPositionNftReturns['getPositionPurchaseValue(uint64)uint64']
    }>
    & Record<'positionExists(uint64)bool' | 'positionExists', {
      argsObj: CultivestPositionNftArgs['obj']['positionExists(uint64)bool']
      argsTuple: CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']
      returns: CultivestPositionNftReturns['positionExists(uint64)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextTokenId: bigint
        totalSupply: bigint
        contractVersion: bigint
        maxSupply: bigint
        authorizedMinter: string
        contractName: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        positionOwner: Map<bigint | number, string>
        positionAssetType: Map<bigint | number, bigint>
        positionHoldings: Map<bigint | number, bigint>
        positionPurchaseValue: Map<bigint | number, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CultivestPositionNftSignatures = keyof CultivestPositionNftTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CultivestPositionNftNonVoidMethodSignatures = keyof CultivestPositionNftTypes['methods'] extends infer T ? T extends keyof CultivestPositionNftTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CultivestPositionNft smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CultivestPositionNftSignatures> = CultivestPositionNftTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CultivestPositionNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CultivestPositionNftSignatures> = CultivestPositionNftTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CultivestPositionNftTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CultivestPositionNftTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CultivestPositionNftCreateCallParams =
  | Expand<CallParams<CultivestPositionNftArgs['obj']['createApplication()void'] | CultivestPositionNftArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CultivestPositionNftArgs['obj']['createApplication()void'] | CultivestPositionNftArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CultivestPositionNftDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CultivestPositionNftCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CultivestPositionNft smart contract
 */
export abstract class CultivestPositionNftParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CultivestPositionNftCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CultivestPositionNftParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CultivestPositionNFT smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CultivestPositionNftArgs['obj']['createApplication()void'] | CultivestPositionNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mintPosition(account,uint64,uint64,uint64)uint64 ABI method
   *
  * Mint new position token for an asset holding
  Asset types: 1=Bitcoin, 2=Algorand, 3=USDC
  
  Stores essential position data on-chain using BoxMap storage

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintPosition(params: CallParams<CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64'] | CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mintPosition(account,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.assetType, params.args.holdings, params.args.purchaseValueUsd],
    }
  }
  /**
   * Constructs a no op call for the updatePosition(uint64,uint64)void ABI method
   *
  * Update position token holdings (when user buys/sells more of the asset)
  Note: Current value is calculated off-chain using market prices

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePosition(params: CallParams<CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void'] | CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePosition(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.positionTokenId, params.args.newHoldings],
    }
  }
  /**
   * Constructs a no op call for the transferPosition(uint64,account,account)void ABI method
   *
  * Transfer position token ownership (triggers key re-encryption)
  For MVP: Off-chain system tracks ownership, this logs the transfer event

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferPosition(params: CallParams<CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void'] | CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferPosition(uint64,account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.positionTokenId, params.args.currentOwner, params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the assignToPortfolio(uint64,uint64,account)void ABI method
   *
  * Assign position token to a portfolio token
  For MVP: This is tracked off-chain, contract just logs the assignment

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignToPortfolio(params: CallParams<CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void'] | CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignToPortfolio(uint64,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.positionTokenId, params.args.portfolioTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the burnPosition(uint64,account)void ABI method
   *
  * Burn position token (sell/withdraw all holdings)
  For MVP: Decrements supply and logs burn event for off-chain cleanup

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnPosition(params: CallParams<CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void'] | CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnPosition(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.positionTokenId, params.args.owner],
    }
  }
  /**
   * Constructs a no op call for the getContractStats()(uint64,uint64,uint64,uint64) ABI method
   *
   * Get contract statistics (read-only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractStats()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the tokenExists(uint64)uint64 ABI method
   *
  * Check if token ID is valid (read-only)
  For MVP: Only checks if token ID is in valid range
  Off-chain system tracks full token metadata

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static tokenExists(params: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'tokenExists(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.positionTokenId],
    }
  }
  /**
   * Constructs a no op call for the setAuthorizedMinter(account)void ABI method
   *
   * Update authorized minter (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAuthorizedMinter(params: CallParams<CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAuthorizedMinter(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMinter],
    }
  }
  /**
   * Constructs a no op call for the getPositionOwner(uint64)byte[] ABI method
   *
   * Get position owner
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPositionOwner(params: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPositionOwner(uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPositionAssetType(uint64)uint64 ABI method
   *
   * Get position asset type
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPositionAssetType(params: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPositionAssetType(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPositionHoldings(uint64)uint64 ABI method
   *
   * Get position holdings amount
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPositionHoldings(params: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPositionHoldings(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the getPositionPurchaseValue(uint64)uint64 ABI method
   *
   * Get position purchase value
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPositionPurchaseValue(params: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPositionPurchaseValue(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the positionExists(uint64)bool ABI method
   *
   * Check if position exists
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static positionExists(params: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'positionExists(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CultivestPositionNFT smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CultivestPositionNftFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CultivestPositionNftFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CultivestPositionNftClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CultivestPositionNftClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CultivestPositionNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CultivestPositionNftDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CultivestPositionNftParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CultivestPositionNftCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CultivestPositionNftClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPositionNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize the Position NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CultivestPositionNftArgs['obj']['createApplication()void'] | CultivestPositionNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CultivestPositionNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPositionNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize the Position NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CultivestPositionNftArgs['obj']['createApplication()void'] | CultivestPositionNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CultivestPositionNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPositionNFT smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize the Position NFT contract
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CultivestPositionNftArgs['obj']['createApplication()void'] | CultivestPositionNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CultivestPositionNftParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CultivestPositionNftReturns['createApplication()void']) }, appClient: new CultivestPositionNftClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CultivestPositionNFT smart contract
 */
export class CultivestPositionNftClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CultivestPositionNftClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CultivestPositionNft app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CultivestPositionNftClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CultivestPositionNftNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CultivestPositionNftClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CultivestPositionNftClient> {
    return new CultivestPositionNftClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CultivestPositionNftClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CultivestPositionNftClient> {
    return new CultivestPositionNftClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPositionNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `mintPosition(account,uint64,uint64,uint64)uint64` ABI method.
     *
    * Mint new position token for an asset holding
    Asset types: 1=Bitcoin, 2=Algorand, 3=USDC
    
    Stores essential position data on-chain using BoxMap storage

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintPosition: (params: CallParams<CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64'] | CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.mintPosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `updatePosition(uint64,uint64)void` ABI method.
     *
    * Update position token holdings (when user buys/sells more of the asset)
    Note: Current value is calculated off-chain using market prices

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePosition: (params: CallParams<CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void'] | CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.updatePosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `transferPosition(uint64,account,account)void` ABI method.
     *
    * Transfer position token ownership (triggers key re-encryption)
    For MVP: Off-chain system tracks ownership, this logs the transfer event

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferPosition: (params: CallParams<CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void'] | CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.transferPosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `assignToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Assign position token to a portfolio token
    For MVP: This is tracked off-chain, contract just logs the assignment

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignToPortfolio: (params: CallParams<CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void'] | CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.assignToPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `burnPosition(uint64,account)void` ABI method.
     *
    * Burn position token (sell/withdraw all holdings)
    For MVP: Decrements supply and logs burn event for off-chain cleanup

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnPosition: (params: CallParams<CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void'] | CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.burnPosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `tokenExists(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Check if token ID is valid (read-only)
    For MVP: Only checks if token ID is in valid range
    Off-chain system tracks full token metadata

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    tokenExists: (params: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.tokenExists(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAuthorizedMinter: (params: CallParams<CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.setAuthorizedMinter(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionOwner(uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position owner
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPositionOwner: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.getPositionOwner(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionAssetType(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position asset type
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPositionAssetType: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.getPositionAssetType(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionHoldings(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position holdings amount
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPositionHoldings: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.getPositionHoldings(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionPurchaseValue(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position purchase value
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPositionPurchaseValue: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.getPositionPurchaseValue(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `positionExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if position exists
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    positionExists: (params: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPositionNftParamsFactory.positionExists(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPositionNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `mintPosition(account,uint64,uint64,uint64)uint64` ABI method.
     *
    * Mint new position token for an asset holding
    Asset types: 1=Bitcoin, 2=Algorand, 3=USDC
    
    Stores essential position data on-chain using BoxMap storage

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintPosition: (params: CallParams<CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64'] | CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.mintPosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `updatePosition(uint64,uint64)void` ABI method.
     *
    * Update position token holdings (when user buys/sells more of the asset)
    Note: Current value is calculated off-chain using market prices

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePosition: (params: CallParams<CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void'] | CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.updatePosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `transferPosition(uint64,account,account)void` ABI method.
     *
    * Transfer position token ownership (triggers key re-encryption)
    For MVP: Off-chain system tracks ownership, this logs the transfer event

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferPosition: (params: CallParams<CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void'] | CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.transferPosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `assignToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Assign position token to a portfolio token
    For MVP: This is tracked off-chain, contract just logs the assignment

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignToPortfolio: (params: CallParams<CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void'] | CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.assignToPortfolio(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `burnPosition(uint64,account)void` ABI method.
     *
    * Burn position token (sell/withdraw all holdings)
    For MVP: Decrements supply and logs burn event for off-chain cleanup

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnPosition: (params: CallParams<CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void'] | CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.burnPosition(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `tokenExists(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Check if token ID is valid (read-only)
    For MVP: Only checks if token ID is in valid range
    Off-chain system tracks full token metadata

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    tokenExists: (params: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.tokenExists(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAuthorizedMinter: (params: CallParams<CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.setAuthorizedMinter(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionOwner(uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position owner
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPositionOwner: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.getPositionOwner(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionAssetType(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position asset type
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPositionAssetType: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.getPositionAssetType(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionHoldings(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position holdings amount
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPositionHoldings: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.getPositionHoldings(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionPurchaseValue(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position purchase value
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPositionPurchaseValue: (params: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.getPositionPurchaseValue(params))
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `positionExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if position exists
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    positionExists: (params: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPositionNftParamsFactory.positionExists(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPositionNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `mintPosition(account,uint64,uint64,uint64)uint64` ABI method.
     *
    * Mint new position token for an asset holding
    Asset types: 1=Bitcoin, 2=Algorand, 3=USDC
    
    Stores essential position data on-chain using BoxMap storage

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintPosition: async (params: CallParams<CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64'] | CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.mintPosition(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['mintPosition(account,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `updatePosition(uint64,uint64)void` ABI method.
     *
    * Update position token holdings (when user buys/sells more of the asset)
    Note: Current value is calculated off-chain using market prices

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePosition: async (params: CallParams<CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void'] | CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.updatePosition(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['updatePosition(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `transferPosition(uint64,account,account)void` ABI method.
     *
    * Transfer position token ownership (triggers key re-encryption)
    For MVP: Off-chain system tracks ownership, this logs the transfer event

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferPosition: async (params: CallParams<CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void'] | CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.transferPosition(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['transferPosition(uint64,account,account)void'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `assignToPortfolio(uint64,uint64,account)void` ABI method.
     *
    * Assign position token to a portfolio token
    For MVP: This is tracked off-chain, contract just logs the assignment

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignToPortfolio: async (params: CallParams<CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void'] | CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.assignToPortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['assignToPortfolio(uint64,uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `burnPosition(uint64,account)void` ABI method.
     *
    * Burn position token (sell/withdraw all holdings)
    For MVP: Decrements supply and logs burn event for off-chain cleanup

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnPosition: async (params: CallParams<CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void'] | CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.burnPosition(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['burnPosition(uint64,account)void'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract statistics (read-only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['getContractStats()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `tokenExists(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Check if token ID is valid (read-only)
    For MVP: Only checks if token ID is in valid range
    Off-chain system tracks full token metadata

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    tokenExists: async (params: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.tokenExists(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['tokenExists(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `setAuthorizedMinter(account)void` ABI method.
     *
     * Update authorized minter (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAuthorizedMinter: async (params: CallParams<CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.setAuthorizedMinter(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['setAuthorizedMinter(account)void'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionOwner(uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position owner
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPositionOwner: async (params: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionOwner(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['getPositionOwner(uint64)byte[]'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionAssetType(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position asset type
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPositionAssetType: async (params: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionAssetType(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['getPositionAssetType(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionHoldings(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position holdings amount
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPositionHoldings: async (params: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionHoldings(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['getPositionHoldings(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `getPositionPurchaseValue(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get position purchase value
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPositionPurchaseValue: async (params: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionPurchaseValue(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['getPositionPurchaseValue(uint64)uint64'])}
    },

    /**
     * Makes a call to the CultivestPositionNFT smart contract using the `positionExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Check if position exists
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    positionExists: async (params: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.positionExists(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPositionNftReturns['positionExists(uint64)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CultivestPositionNftClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `getContractStats()(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get contract statistics (read-only)
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getContractStats(params: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getContractStats(params))
    return result.return as unknown as CultivestPositionNftReturns['getContractStats()(uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `tokenExists(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Check if token ID is valid (read-only)
  For MVP: Only checks if token ID is in valid range
  Off-chain system tracks full token metadata

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async tokenExists(params: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.tokenExists(params))
    return result.return as unknown as CultivestPositionNftReturns['tokenExists(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `getPositionOwner(uint64)byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get position owner
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPositionOwner(params: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']>) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionOwner(params))
    return result.return as unknown as CultivestPositionNftReturns['getPositionOwner(uint64)byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `getPositionAssetType(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get position asset type
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPositionAssetType(params: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionAssetType(params))
    return result.return as unknown as CultivestPositionNftReturns['getPositionAssetType(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `getPositionHoldings(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get position holdings amount
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPositionHoldings(params: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionHoldings(params))
    return result.return as unknown as CultivestPositionNftReturns['getPositionHoldings(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `getPositionPurchaseValue(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get position purchase value
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPositionPurchaseValue(params: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']>) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.getPositionPurchaseValue(params))
    return result.return as unknown as CultivestPositionNftReturns['getPositionPurchaseValue(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the CultivestPositionNFT smart contract using the `positionExists(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Check if position exists
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async positionExists(params: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']>) {
    const result = await this.appClient.send.call(CultivestPositionNftParamsFactory.positionExists(params))
    return result.return as unknown as CultivestPositionNftReturns['positionExists(uint64)bool']
  }

  /**
   * Methods to access state for the current CultivestPositionNFT app
   */
  state = {
    /**
     * Methods to access global state for the current CultivestPositionNFT app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextTokenId: result.nextTokenId,
          totalSupply: result.totalSupply,
          contractVersion: result.contractVersion,
          maxSupply: result.maxSupply,
          authorizedMinter: result.authorizedMinter,
          contractName: result.contractName,
        }
      },
      /**
       * Get the current value of the nextTokenId key in global state
       */
      nextTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextTokenId")) as bigint | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
      /**
       * Get the current value of the contractVersion key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractVersion")) as bigint | undefined },
      /**
       * Get the current value of the maxSupply key in global state
       */
      maxSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxSupply")) as bigint | undefined },
      /**
       * Get the current value of the authorizedMinter key in global state
       */
      authorizedMinter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("authorizedMinter")) as string | undefined },
      /**
       * Get the current value of the contractName key in global state
       */
      contractName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("contractName")) as string | undefined },
    },
    /**
     * Methods to access box state for the current CultivestPositionNFT app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the positionOwner map in box state
       */
      positionOwner: {
        /**
         * Get all current values of the positionOwner map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("positionOwner")) as Map<bigint, string> },
        /**
         * Get a current value of the positionOwner map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("positionOwner", key) as string | undefined },
      },
      /**
       * Get values from the positionAssetType map in box state
       */
      positionAssetType: {
        /**
         * Get all current values of the positionAssetType map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("positionAssetType")) as Map<bigint, bigint> },
        /**
         * Get a current value of the positionAssetType map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("positionAssetType", key) as bigint | undefined },
      },
      /**
       * Get values from the positionHoldings map in box state
       */
      positionHoldings: {
        /**
         * Get all current values of the positionHoldings map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("positionHoldings")) as Map<bigint, bigint> },
        /**
         * Get a current value of the positionHoldings map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("positionHoldings", key) as bigint | undefined },
      },
      /**
       * Get values from the positionPurchaseValue map in box state
       */
      positionPurchaseValue: {
        /**
         * Get all current values of the positionPurchaseValue map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("positionPurchaseValue")) as Map<bigint, bigint> },
        /**
         * Get a current value of the positionPurchaseValue map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("positionPurchaseValue", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): CultivestPositionNftComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mintPosition(account,uint64,uint64,uint64)uint64 method call against the CultivestPositionNFT contract
       */
      mintPosition(params: CallParams<CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64'] | CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintPosition(params)))
        resultMappers.push((v) => client.decodeReturnValue('mintPosition(account,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a updatePosition(uint64,uint64)void method call against the CultivestPositionNFT contract
       */
      updatePosition(params: CallParams<CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void'] | CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePosition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transferPosition(uint64,account,account)void method call against the CultivestPositionNFT contract
       */
      transferPosition(params: CallParams<CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void'] | CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferPosition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assignToPortfolio(uint64,uint64,account)void method call against the CultivestPositionNFT contract
       */
      assignToPortfolio(params: CallParams<CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void'] | CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignToPortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnPosition(uint64,account)void method call against the CultivestPositionNFT contract
       */
      burnPosition(params: CallParams<CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void'] | CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnPosition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getContractStats()(uint64,uint64,uint64,uint64) method call against the CultivestPositionNFT contract
       */
      getContractStats(params: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractStats()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a tokenExists(uint64)uint64 method call against the CultivestPositionNFT contract
       */
      tokenExists(params: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.tokenExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('tokenExists(uint64)uint64', v))
        return this
      },
      /**
       * Add a setAuthorizedMinter(account)void method call against the CultivestPositionNFT contract
       */
      setAuthorizedMinter(params: CallParams<CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAuthorizedMinter(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPositionOwner(uint64)byte[] method call against the CultivestPositionNFT contract
       */
      getPositionOwner(params: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPositionOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPositionOwner(uint64)byte[]', v))
        return this
      },
      /**
       * Add a getPositionAssetType(uint64)uint64 method call against the CultivestPositionNFT contract
       */
      getPositionAssetType(params: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPositionAssetType(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPositionAssetType(uint64)uint64', v))
        return this
      },
      /**
       * Add a getPositionHoldings(uint64)uint64 method call against the CultivestPositionNFT contract
       */
      getPositionHoldings(params: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPositionHoldings(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPositionHoldings(uint64)uint64', v))
        return this
      },
      /**
       * Add a getPositionPurchaseValue(uint64)uint64 method call against the CultivestPositionNFT contract
       */
      getPositionPurchaseValue(params: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPositionPurchaseValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPositionPurchaseValue(uint64)uint64', v))
        return this
      },
      /**
       * Add a positionExists(uint64)bool method call against the CultivestPositionNFT contract
       */
      positionExists(params: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.positionExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('positionExists(uint64)bool', v))
        return this
      },
      /**
       * Add a clear state call to the CultivestPositionNFT contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CultivestPositionNftComposer
  }
}
export type CultivestPositionNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mintPosition(account,uint64,uint64,uint64)uint64 ABI method.
   *
  * Mint new position token for an asset holding
  Asset types: 1=Bitcoin, 2=Algorand, 3=USDC
  
  Stores essential position data on-chain using BoxMap storage

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintPosition(params?: CallParams<CultivestPositionNftArgs['obj']['mintPosition(account,uint64,uint64,uint64)uint64'] | CultivestPositionNftArgs['tuple']['mintPosition(account,uint64,uint64,uint64)uint64']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['mintPosition(account,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the updatePosition(uint64,uint64)void ABI method.
   *
  * Update position token holdings (when user buys/sells more of the asset)
  Note: Current value is calculated off-chain using market prices

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePosition(params?: CallParams<CultivestPositionNftArgs['obj']['updatePosition(uint64,uint64)void'] | CultivestPositionNftArgs['tuple']['updatePosition(uint64,uint64)void']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['updatePosition(uint64,uint64)void'] | undefined]>

  /**
   * Calls the transferPosition(uint64,account,account)void ABI method.
   *
  * Transfer position token ownership (triggers key re-encryption)
  For MVP: Off-chain system tracks ownership, this logs the transfer event

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferPosition(params?: CallParams<CultivestPositionNftArgs['obj']['transferPosition(uint64,account,account)void'] | CultivestPositionNftArgs['tuple']['transferPosition(uint64,account,account)void']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['transferPosition(uint64,account,account)void'] | undefined]>

  /**
   * Calls the assignToPortfolio(uint64,uint64,account)void ABI method.
   *
  * Assign position token to a portfolio token
  For MVP: This is tracked off-chain, contract just logs the assignment

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignToPortfolio(params?: CallParams<CultivestPositionNftArgs['obj']['assignToPortfolio(uint64,uint64,account)void'] | CultivestPositionNftArgs['tuple']['assignToPortfolio(uint64,uint64,account)void']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['assignToPortfolio(uint64,uint64,account)void'] | undefined]>

  /**
   * Calls the burnPosition(uint64,account)void ABI method.
   *
  * Burn position token (sell/withdraw all holdings)
  For MVP: Decrements supply and logs burn event for off-chain cleanup

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnPosition(params?: CallParams<CultivestPositionNftArgs['obj']['burnPosition(uint64,account)void'] | CultivestPositionNftArgs['tuple']['burnPosition(uint64,account)void']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['burnPosition(uint64,account)void'] | undefined]>

  /**
   * Calls the getContractStats()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get contract statistics (read-only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<CultivestPositionNftArgs['obj']['getContractStats()(uint64,uint64,uint64,uint64)'] | CultivestPositionNftArgs['tuple']['getContractStats()(uint64,uint64,uint64,uint64)']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['getContractStats()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the tokenExists(uint64)uint64 ABI method.
   *
  * Check if token ID is valid (read-only)
  For MVP: Only checks if token ID is in valid range
  Off-chain system tracks full token metadata

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tokenExists(params?: CallParams<CultivestPositionNftArgs['obj']['tokenExists(uint64)uint64'] | CultivestPositionNftArgs['tuple']['tokenExists(uint64)uint64']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['tokenExists(uint64)uint64'] | undefined]>

  /**
   * Calls the setAuthorizedMinter(account)void ABI method.
   *
   * Update authorized minter (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAuthorizedMinter(params?: CallParams<CultivestPositionNftArgs['obj']['setAuthorizedMinter(account)void'] | CultivestPositionNftArgs['tuple']['setAuthorizedMinter(account)void']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['setAuthorizedMinter(account)void'] | undefined]>

  /**
   * Calls the getPositionOwner(uint64)byte[] ABI method.
   *
   * Get position owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPositionOwner(params?: CallParams<CultivestPositionNftArgs['obj']['getPositionOwner(uint64)byte[]'] | CultivestPositionNftArgs['tuple']['getPositionOwner(uint64)byte[]']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['getPositionOwner(uint64)byte[]'] | undefined]>

  /**
   * Calls the getPositionAssetType(uint64)uint64 ABI method.
   *
   * Get position asset type
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPositionAssetType(params?: CallParams<CultivestPositionNftArgs['obj']['getPositionAssetType(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionAssetType(uint64)uint64']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['getPositionAssetType(uint64)uint64'] | undefined]>

  /**
   * Calls the getPositionHoldings(uint64)uint64 ABI method.
   *
   * Get position holdings amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPositionHoldings(params?: CallParams<CultivestPositionNftArgs['obj']['getPositionHoldings(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionHoldings(uint64)uint64']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['getPositionHoldings(uint64)uint64'] | undefined]>

  /**
   * Calls the getPositionPurchaseValue(uint64)uint64 ABI method.
   *
   * Get position purchase value
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPositionPurchaseValue(params?: CallParams<CultivestPositionNftArgs['obj']['getPositionPurchaseValue(uint64)uint64'] | CultivestPositionNftArgs['tuple']['getPositionPurchaseValue(uint64)uint64']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['getPositionPurchaseValue(uint64)uint64'] | undefined]>

  /**
   * Calls the positionExists(uint64)bool ABI method.
   *
   * Check if position exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  positionExists(params?: CallParams<CultivestPositionNftArgs['obj']['positionExists(uint64)bool'] | CultivestPositionNftArgs['tuple']['positionExists(uint64)bool']>): CultivestPositionNftComposer<[...TReturns, CultivestPositionNftReturns['positionExists(uint64)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CultivestPositionNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CultivestPositionNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CultivestPositionNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CultivestPositionNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CultivestPositionNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CultivestPositionNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CultivestPositionNftComposerResults<TReturns>>
}
export type CultivestPositionNftComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

