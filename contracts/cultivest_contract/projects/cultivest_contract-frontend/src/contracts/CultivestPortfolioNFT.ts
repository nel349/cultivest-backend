/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CultivestPortfolioNFT","structs":{},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize a new Portfolio NFT","events":[],"recommendations":{}},{"name":"updatePortfolio","args":[{"type":"uint64","name":"newBtcHoldings"},{"type":"uint64","name":"newAlgoHoldings"},{"type":"uint64","name":"newUsdcHoldings"},{"type":"uint64","name":"newTotalValueUSD"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update portfolio holdings and values","events":[],"recommendations":{}},{"name":"recordInvestment","args":[{"type":"uint64","name":"amountUSD"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Record new investment","events":[],"recommendations":{}},{"name":"transferOwnership","args":[{"type":"account","name":"newOwner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer portfolio ownership","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Cultivest Portfolio NFT Smart Contract\nTracks multi-chain investment portfolio with Bitcoin-first approach","networks":{},"state":{"schema":{"global":{"ints":10,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"owner":{"keyType":"AVMString","valueType":"address","key":"b3duZXI="},"totalValueUSD":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWYWx1ZVVTRA=="},"level":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGV2ZWw="},"btcHoldings":{"keyType":"AVMString","valueType":"AVMUint64","key":"YnRjSG9sZGluZ3M="},"algoHoldings":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWxnb0hvbGRpbmdz"},"usdcHoldings":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNkY0hvbGRpbmdz"},"totalInvested":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxJbnZlc3RlZA=="},"unrealizedPnL":{"keyType":"AVMString","valueType":"AVMUint64","key":"dW5yZWFsaXplZFBuTA=="},"createdAt":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3JlYXRlZEF0"},"lastUpdate":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFVwZGF0ZQ=="},"authorizedUpdater":{"keyType":"AVMString","valueType":"address","key":"YXV0aG9yaXplZFVwZGF0ZXI="},"isLocked":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNMb2NrZWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[182,200,216,244],"errorMessage":"OnCompletion is not NoOp"},{"pc":[248],"errorMessage":"can only call when creating"},{"pc":[185,203,219],"errorMessage":"can only call when not creating"},{"pc":[341,347,375,379,392,415,503,509,519,523,558],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmCwVsZXZlbA10b3RhbFZhbHVlVVNEDXRvdGFsSW52ZXN0ZWQIaXNMb2NrZWQFb3duZXINdW5yZWFsaXplZFBuTBFhdXRob3JpemVkVXBkYXRlcgtidGNIb2xkaW5ncwxhbGdvSG9sZGluZ3MMdXNkY0hvbGRpbmdzCmxhc3RVcGRhdGUxG0EAI4IEBLhEezYE023GBwQb9B3VBPO6onA2GgCOBABAACQAFAACIkMxGRREMRhENhoBF8AciAFiI0MxGRREMRhENhoBF4gBGyNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIAF0jQzEZFEQxGBREiAACI0MnBDEAZ4AJY3JlYXRlZEF0MgdnKCNnKSJnKiJnJwUiZycHImcnCCJnJwkiZysiZycKMgdnJwYxAGeAEXBvcnRmb2xpb19jcmVhdGVksImKBAAxACInBmVEEkQiK2VEFEQrI2cnB4v8ZycIi/1nJwmL/mcpi/9nIillRCIqZUQJJwVMZyIpZUxJTwJEgZBOD0EAKCiBBWcnCjIHZysiZyIpZUQWgBFwb3J0Zm9saW9fdXBkYXRlOkxQsImLAIGIJw9BAAcogQRnQv/MiwCBxBMPQQAHKIEDZ0L/vIsAgegHD0EAByiBAmdC/6woI2dC/6aKAQAxACInBmVEEkQiKmVEi/8IKkxnIillRCIqZUQJJwVMZ4v/FoALaW52ZXN0bWVudDpMULCJigEAMQAiJwRlRBJEJwSL/2eAEm93bmVyc2hpcF90cmFuc2ZlcrCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CultivestPortfolioNft contract
 */
export type CultivestPortfolioNftArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updatePortfolio(uint64,uint64,uint64,uint64)void': {
      newBtcHoldings: bigint | number
      newAlgoHoldings: bigint | number
      newUsdcHoldings: bigint | number
      newTotalValueUsd: bigint | number
    }
    'recordInvestment(uint64)void': {
      amountUsd: bigint | number
    }
    'transferOwnership(account)void': {
      newOwner: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updatePortfolio(uint64,uint64,uint64,uint64)void': [newBtcHoldings: bigint | number, newAlgoHoldings: bigint | number, newUsdcHoldings: bigint | number, newTotalValueUsd: bigint | number]
    'recordInvestment(uint64)void': [amountUsd: bigint | number]
    'transferOwnership(account)void': [newOwner: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type CultivestPortfolioNftReturns = {
  'createApplication()void': void
  'updatePortfolio(uint64,uint64,uint64,uint64)void': void
  'recordInvestment(uint64)void': void
  'transferOwnership(account)void': void
}

/**
 * Defines the types of available calls and state of the CultivestPortfolioNft smart contract.
 */
export type CultivestPortfolioNftTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CultivestPortfolioNftArgs['obj']['createApplication()void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['createApplication()void']
      returns: CultivestPortfolioNftReturns['createApplication()void']
    }>
    & Record<'updatePortfolio(uint64,uint64,uint64,uint64)void' | 'updatePortfolio', {
      argsObj: CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']
      returns: CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'recordInvestment(uint64)void' | 'recordInvestment', {
      argsObj: CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']
      returns: CultivestPortfolioNftReturns['recordInvestment(uint64)void']
    }>
    & Record<'transferOwnership(account)void' | 'transferOwnership', {
      argsObj: CultivestPortfolioNftArgs['obj']['transferOwnership(account)void']
      argsTuple: CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']
      returns: CultivestPortfolioNftReturns['transferOwnership(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: string
        totalValueUsd: bigint
        level: bigint
        btcHoldings: bigint
        algoHoldings: bigint
        usdcHoldings: bigint
        totalInvested: bigint
        unrealizedPnL: bigint
        createdAt: bigint
        lastUpdate: bigint
        authorizedUpdater: string
        isLocked: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CultivestPortfolioNftSignatures = keyof CultivestPortfolioNftTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CultivestPortfolioNftNonVoidMethodSignatures = keyof CultivestPortfolioNftTypes['methods'] extends infer T ? T extends keyof CultivestPortfolioNftTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CultivestPortfolioNft smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CultivestPortfolioNftSignatures> = CultivestPortfolioNftTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CultivestPortfolioNft smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CultivestPortfolioNftSignatures> = CultivestPortfolioNftTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CultivestPortfolioNftTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CultivestPortfolioNftCreateCallParams =
  | Expand<CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CultivestPortfolioNftDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CultivestPortfolioNftCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CultivestPortfolioNft smart contract
 */
export abstract class CultivestPortfolioNftParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CultivestPortfolioNftCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CultivestPortfolioNftParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CultivestPortfolioNFT smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the updatePortfolio(uint64,uint64,uint64,uint64)void ABI method
   *
   * Update portfolio holdings and values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePortfolio(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newBtcHoldings, params.args.newAlgoHoldings, params.args.newUsdcHoldings, params.args.newTotalValueUsd],
    }
  }
  /**
   * Constructs a no op call for the recordInvestment(uint64)void ABI method
   *
   * Record new investment
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordInvestment(params: CallParams<CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void'] | CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recordInvestment(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amountUsd],
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(account)void ABI method
   *
   * Transfer portfolio ownership
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferOwnership(params: CallParams<CultivestPortfolioNftArgs['obj']['transferOwnership(account)void'] | CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferOwnership(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CultivestPortfolioNFT smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CultivestPortfolioNftFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CultivestPortfolioNftFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CultivestPortfolioNftClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CultivestPortfolioNftClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CultivestPortfolioNFT smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CultivestPortfolioNftDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CultivestPortfolioNftParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CultivestPortfolioNftCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CultivestPortfolioNftClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize a new Portfolio NFT
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using the createApplication()void ABI method.
       *
       * Initialize a new Portfolio NFT
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CultivestPortfolioNFT smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initialize a new Portfolio NFT
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CultivestPortfolioNftArgs['obj']['createApplication()void'] | CultivestPortfolioNftArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CultivestPortfolioNftParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CultivestPortfolioNftReturns['createApplication()void']) }, appClient: new CultivestPortfolioNftClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CultivestPortfolioNFT smart contract
 */
export class CultivestPortfolioNftClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CultivestPortfolioNftClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CultivestPortfolioNft app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CultivestPortfolioNftClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CultivestPortfolioNftNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CultivestPortfolioNftClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CultivestPortfolioNftClient> {
    return new CultivestPortfolioNftClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CultivestPortfolioNftClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CultivestPortfolioNftClient> {
    return new CultivestPortfolioNftClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Update portfolio holdings and values
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `recordInvestment(uint64)void` ABI method.
     *
     * Record new investment
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordInvestment: (params: CallParams<CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void'] | CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.recordInvestment(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferOwnership(account)void` ABI method.
     *
     * Transfer portfolio ownership
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferOwnership: (params: CallParams<CultivestPortfolioNftArgs['obj']['transferOwnership(account)void'] | CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CultivestPortfolioNftParamsFactory.transferOwnership(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Update portfolio holdings and values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePortfolio: (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `recordInvestment(uint64)void` ABI method.
     *
     * Record new investment
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordInvestment: (params: CallParams<CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void'] | CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.recordInvestment(params))
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferOwnership(account)void` ABI method.
     *
     * Transfer portfolio ownership
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferOwnership: (params: CallParams<CultivestPortfolioNftArgs['obj']['transferOwnership(account)void'] | CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CultivestPortfolioNftParamsFactory.transferOwnership(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `updatePortfolio(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Update portfolio holdings and values
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePortfolio: async (params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.updatePortfolio(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `recordInvestment(uint64)void` ABI method.
     *
     * Record new investment
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordInvestment: async (params: CallParams<CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void'] | CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.recordInvestment(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['recordInvestment(uint64)void'])}
    },

    /**
     * Makes a call to the CultivestPortfolioNFT smart contract using the `transferOwnership(account)void` ABI method.
     *
     * Transfer portfolio ownership
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferOwnership: async (params: CallParams<CultivestPortfolioNftArgs['obj']['transferOwnership(account)void'] | CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CultivestPortfolioNftParamsFactory.transferOwnership(params))
      return {...result, return: result.return as unknown as (undefined | CultivestPortfolioNftReturns['transferOwnership(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CultivestPortfolioNftClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CultivestPortfolioNFT app
   */
  state = {
    /**
     * Methods to access global state for the current CultivestPortfolioNFT app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: result.owner,
          totalValueUsd: result.totalValueUSD,
          level: result.level,
          btcHoldings: result.btcHoldings,
          algoHoldings: result.algoHoldings,
          usdcHoldings: result.usdcHoldings,
          totalInvested: result.totalInvested,
          unrealizedPnL: result.unrealizedPnL,
          createdAt: result.createdAt,
          lastUpdate: result.lastUpdate,
          authorizedUpdater: result.authorizedUpdater,
          isLocked: result.isLocked,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the totalValueUSD key in global state
       */
      totalValueUsd: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalValueUSD")) as bigint | undefined },
      /**
       * Get the current value of the level key in global state
       */
      level: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("level")) as bigint | undefined },
      /**
       * Get the current value of the btcHoldings key in global state
       */
      btcHoldings: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("btcHoldings")) as bigint | undefined },
      /**
       * Get the current value of the algoHoldings key in global state
       */
      algoHoldings: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("algoHoldings")) as bigint | undefined },
      /**
       * Get the current value of the usdcHoldings key in global state
       */
      usdcHoldings: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("usdcHoldings")) as bigint | undefined },
      /**
       * Get the current value of the totalInvested key in global state
       */
      totalInvested: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalInvested")) as bigint | undefined },
      /**
       * Get the current value of the unrealizedPnL key in global state
       */
      unrealizedPnL: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("unrealizedPnL")) as bigint | undefined },
      /**
       * Get the current value of the createdAt key in global state
       */
      createdAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("createdAt")) as bigint | undefined },
      /**
       * Get the current value of the lastUpdate key in global state
       */
      lastUpdate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastUpdate")) as bigint | undefined },
      /**
       * Get the current value of the authorizedUpdater key in global state
       */
      authorizedUpdater: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("authorizedUpdater")) as string | undefined },
      /**
       * Get the current value of the isLocked key in global state
       */
      isLocked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("isLocked")) as bigint | undefined },
    },
  }

  public newGroup(): CultivestPortfolioNftComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a updatePortfolio(uint64,uint64,uint64,uint64)void method call against the CultivestPortfolioNFT contract
       */
      updatePortfolio(params: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePortfolio(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a recordInvestment(uint64)void method call against the CultivestPortfolioNFT contract
       */
      recordInvestment(params: CallParams<CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void'] | CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordInvestment(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transferOwnership(account)void method call against the CultivestPortfolioNFT contract
       */
      transferOwnership(params: CallParams<CultivestPortfolioNftArgs['obj']['transferOwnership(account)void'] | CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferOwnership(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the CultivestPortfolioNFT contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CultivestPortfolioNftComposer
  }
}
export type CultivestPortfolioNftComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the updatePortfolio(uint64,uint64,uint64,uint64)void ABI method.
   *
   * Update portfolio holdings and values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePortfolio(params?: CallParams<CultivestPortfolioNftArgs['obj']['updatePortfolio(uint64,uint64,uint64,uint64)void'] | CultivestPortfolioNftArgs['tuple']['updatePortfolio(uint64,uint64,uint64,uint64)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['updatePortfolio(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the recordInvestment(uint64)void ABI method.
   *
   * Record new investment
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordInvestment(params?: CallParams<CultivestPortfolioNftArgs['obj']['recordInvestment(uint64)void'] | CultivestPortfolioNftArgs['tuple']['recordInvestment(uint64)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['recordInvestment(uint64)void'] | undefined]>

  /**
   * Calls the transferOwnership(account)void ABI method.
   *
   * Transfer portfolio ownership
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(params?: CallParams<CultivestPortfolioNftArgs['obj']['transferOwnership(account)void'] | CultivestPortfolioNftArgs['tuple']['transferOwnership(account)void']>): CultivestPortfolioNftComposer<[...TReturns, CultivestPortfolioNftReturns['transferOwnership(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CultivestPortfolioNFT smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CultivestPortfolioNftComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CultivestPortfolioNftComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CultivestPortfolioNftComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CultivestPortfolioNftComposerResults<TReturns>>
}
export type CultivestPortfolioNftComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

