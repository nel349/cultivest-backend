### Cultivest Backend API Tests

@baseUrl=http://localhost:3000/api/v1


### 1. Hello World
GET {{baseUrl}}/hello

### Check Twilio SMS Status
GET {{baseUrl}}/debug/twilio-status

### Check Algorand Network Status
GET {{baseUrl}}/debug/algorand-status

# --- User Management & Authentication ---

### 1. Register a new user (Request OTP) - DATABASE INTEGRATION TEST
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "phoneNumber": "+19154082030",
  "name": "Norman E. Lopez",
  "country": "USA"
}

### Manual Wallet Creation Test
POST {{baseUrl}}/wallet/create
Content-Type: application/json

{
  "userId": "34f9176d-172d-431d-adb2-000d6459d4d2"
}

### Algorand status
GET {{baseUrl}}/debug/algorand-status

### Wallet Balance (Database only)
GET {{baseUrl}}/wallet/balance?userId=1c8fb4d3-c4e0-4184-8e7b-d5347019d28e

### Wallet Balance (With Live On-Chain Data)
GET {{baseUrl}}/wallet/balance?userId=1c8fb4d3-c4e0-4184-8e7b-d5347019d28e&live=true

### Live Balance by Address
GET {{baseUrl}}/wallet/balance/live/6ABVCEUUO5IX6DUFJRZANIKKY7QPOWQRETQHRW5IK4AN2TKUXKBF5LFB6M

### Sync Database Balance with On-Chain
POST {{baseUrl}}/wallet/balance/sync
Content-Type: application/json

{
  "userId": "1c8fb4d3-c4e0-4184-8e7b-d5347019d28e"
}

### 2. Verify OTP for signup/login - DATABASE INTEGRATION TEST
POST {{baseUrl}}/auth/verify-otp
Content-Type: application/json

{
  "userID": "91a1269d-eda9-4720-817e-ed57a880bdcd",
  "otpCode": "664043"
}

### 3. User Login (Request OTP)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "phoneNumber": "+15551234567"
}

### 4. Process KYC (assuming user is authenticated, might need Authorization header)
# @name kycRequest
POST {{baseUrl}}/user/kyc
Content-Type: application/json
# Authorization: Bearer {{auth_token}}  // Uncomment and replace with token after login/verify

{
  "name": "Jane Doe",
  "country": "US"
}

### 5. Get User Profile (Requires Authentication)
# @name getProfile
GET {{baseUrl}}/user/profile
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token after login/verify


# --- Wallet Management (Custodial) ---
# Note: Wallet creation will likely be internal/automated upon signup.

### 6. Get Wallet Balance (Requires Authentication)
# @name getWalletBalance
GET {{baseUrl}}/wallet/balance
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token


# --- Fiat-to-USDCa Deposit ---

### 7. Initiate Deposit (requires Authentication)
# @name initiateDeposit
POST {{baseUrl}}/deposit/initiate
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "amount": 10,
  "fiatCurrency": "USD",
  "paymentMethod": "MoonPay" // or "Flutterwave"
}

### 8. Simulate Deposit Webhook (for testing your backend's webhook endpoint)
# This would typically be sent by MoonPay/Flutterwave, not directly by your frontend
# You'd need to mock the structure they send. Example for MoonPay:
POST {{baseUrl}}/deposit/webhook
Content-Type: application/json

{
  "type": "transaction_status_change",
  "data": {
    "id": "external_tx_id_from_moonpay_or_flutterwave",
    "status": "completed",
    "fiatAmount": 10,
    "cryptoAmount": 9.95,
    "fiatCurrency": "USD",
    "cryptoCurrency": "USDCa",
    "address": "ALGOGRAND_USER_WALLET_ADDRESS"
  },
  "signature": "your_webhook_secret_signature" // IMPORTANT for verification
}


# --- Yield Investment ---

### 9. Initiate Investment (Requires Authentication)
# @name initiateInvestment
POST {{baseUrl}}/investment/initiate
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "amountUSDCa": 5
}

### 10. Get Investment Positions (Requires Authentication)
# @name getInvestmentPositions
GET {{baseUrl}}/investment/positions
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token


# --- Gamified Dashboard ---

### 11. Get Dashboard Data (Requires Authentication)
# @name getDashboardData
GET {{baseUrl}}/dashboard/data
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token


# --- Educational Components ---

### 12. Get Educational Content
# @name getEducationalContent
GET {{baseUrl}}/education/content?type=video&id=someVideoId


### 13. Submit Quiz Results (Requires Authentication)
# @name submitQuizResults
POST {{baseUrl}}/education/quiz/submit
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "contentID": "quiz_safe_saver",
  "userAnswers": [
    {"questionId": "q1", "answer": "A"},
    {"questionId": "q2", "answer": "B"}
  ]
}

# --- Withdrawal ---

### 14. Initiate Withdrawal (Requires Authentication)
# @name initiateWithdrawal
POST {{baseUrl}}/withdrawal/initiate
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "amountUSDCa": 2,
  "bankDetails": {
    "accountName": "John Doe",
    "accountNumber": "123456789",
    "bankName": "Bank of America",
    "routingNumber": "987654321"
  },
  "fiatCurrency": "USD"
}

### 15. Simulate Withdrawal Webhook (for testing your backend's webhook endpoint)
# This would typically be sent by MoonPay/Flutterwave
POST {{baseUrl}}/withdrawal/webhook
Content-Type: application/json

{
  "type": "payout_status_change",
  "data": {
    "id": "external_payout_id",
    "status": "completed",
    "fiatAmount": 2,
    "fiatCurrency": "USD",
    "bankAccount": "..."
  },
  "signature": "your_webhook_secret_signature"
}

# --- AI Integration ---

### 16. Get AI Round-up Suggestion (Requires Authentication)
# @name getAIRoundupSuggestion
POST {{baseUrl}}/ai/roundup_suggestion
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "spendingAmount": 3.50,
  "spendingCategory": "Coffee"
}