### Cultivest Backend API Tests

@baseUrl=http://localhost:3000/api/v1
@remoteUrl=https://cultivest-backend.vercel.app/api/v1
@auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ZWQ4MWQ1ZC1kMTViLTQxZjEtODI1Yy04ZWZmNTVhMWE5ZmQiLCJwaG9uZU51bWJlciI6IisxOTE1NDA4MjAzMCIsImlhdCI6MTc1MDcyNTIyMCwiZXhwIjoxNzUwODExNjIwfQ._mHDru0F7WvZMcegWagPihBElK_sFeAMUSF8zjWFlGU


### 1. Hello World
GET {{remoteUrl}}/hello

### Check Twilio SMS Status
GET {{remoteUrl}}/debug/twilio-status

### Check Algorand Network Status
GET {{remoteUrl}}/debug/algorand-status

### Opt-in to USDCa (Debug Endpoint) - Requires Authentication
POST {{baseUrl}}/debug/opt-in-usdca
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "userID": "34f9176d-172d-431d-adb2-000d6459d4d2"
}

### Opt-in to USDCa - TEST WITHOUT AUTH (if you bypass auth)
POST {{baseUrl}}/debug/opt-in-usdca
Content-Type: application/json

{
  "userID": "34f9176d-172d-431d-adb2-000d6459d4d2"
}

# --- User Management & Authentication ---

### 1. Register a new user (Request OTP) - DATABASE INTEGRATION TEST
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "phoneNumber": "+19154082030",
  "name": "Norman E. Lopez",
  "country": "USA"
}

### Manual Wallet Creation Test
POST {{baseUrl}}/wallet/create
Content-Type: application/json

{
  "userId": "d31ecd4a-4f4c-44aa-9143-88266bdbeb82"
}

### Algorand status
GET {{baseUrl}}/debug/algorand-status

### Wallet Balance (Database only)
GET {{baseUrl}}/wallet/balance?userId=5f5ee119-9f95-4b86-863c-44944507eced

### Wallet Balance (With Live On-Chain Data)
GET {{baseUrl}}/wallet/balance?userId=5f5ee119-9f95-4b86-863c-44944507eced&live=true

### Live Algorand Balance by Address
GET {{baseUrl}}/wallet/balance/live/DSQQXQDGTFAZAU2NYIFKOT7324RHA5DXK4NZ2SUE47S2I5WFYOWMA7RVNA
### Test with your Algorand wallet address
GET {{baseUrl}}/wallet/balance/live/NWPHQ7ZQJJQKBVD5RY4HYSBXHI5SLXDTBH3MUYZ3LK4MRY6JBKVEVTQOHA

### Live Bitcoin Balance by Address (NEW)
GET {{baseUrl}}/wallet/balance/bitcoin/tb1q37kwfqz8rsypragqnw9pp3jkdwadqhp97z4wcq

### Test Bitcoin Balance with Real Address (Example)
GET {{baseUrl}}/wallet/balance/bitcoin/tb1q37kwfqz8rsypragqnw9pp3jkdwadqhp97z4wcq

### Sync Database Balance with On-Chain
POST {{baseUrl}}/wallet/balance/sync
Content-Type: application/json

{
  "userId": "34f9176d-172d-431d-adb2-000d6459d4d2"
}

### Get Wallet Mnemonic (12-word phrase) - ⚠️ SENSITIVE DATA
GET {{baseUrl}}/wallet/mnemonic?userId=34f9176d-172d-431d-adb2-000d6459d4d2

### Get Wallet Mnemonic for another user (if exists)
GET {{baseUrl}}/wallet/mnemonic?userId=1c8fb4d3-c4e0-4184-8e7b-d5347019d28e

### 2. Verify OTP for signup/login - DATABASE INTEGRATION TEST
POST {{baseUrl}}/auth/verify-otp
Content-Type: application/json

{
  "userID": "6ed81d5d-d15b-41f1-825c-8eff55a1a9fd",
  "otpCode": "177770"
}

### 3. User Login (Request OTP)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "phoneNumber": "+15551234567"
}

### 4. Process KYC (assuming user is authenticated, might need Authorization header)
# @name kycRequest
POST {{baseUrl}}/user/kyc
Content-Type: application/json
# Authorization: Bearer {{auth_token}}  // Uncomment and replace with token after login/verify

{
  "name": "Jane Doe",
  "country": "US"
}

### 5. Get User Profile (Requires Authentication)
# @name getProfile
GET {{baseUrl}}/user/profile
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token after login/verify


# --- Wallet Management (Custodial) ---
# Note: Wallet creation will likely be internal/automated upon signup.

### 6. Get Wallet Balance (Requires Authentication)
# @name getWalletBalance
GET {{baseUrl}}/wallet/balance
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token


# --- Fiat-to-USDCa Deposit ---

### 7. Initiate Deposit (Requires Authentication)
# @name initiateDeposit
POST {{baseUrl}}/deposit/initiate
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "amountUSD": 10,
  "targetCurrency": "usdca"
}

### 8. Simulate Deposit Webhook (for testing your backend's webhook endpoint)
# This would typically be sent by MoonPay/Flutterwave, not directly by your frontend
# You'd need to mock the structure they send. Example for MoonPay:
POST {{baseUrl}}/deposit/webhook
Content-Type: application/json

{
  "type": "transaction_status_change",
  "data": {
    "id": "external_tx_id_from_moonpay_or_flutterwave",
    "status": "completed",
    "fiatAmount": 10,
    "cryptoAmount": 9.95,
    "fiatCurrency": "USD",
    "cryptoCurrency": "USDCa",
    "address": "ALGOGRAND_USER_WALLET_ADDRESS"
  },
  "signature": "your_webhook_secret_signature" // IMPORTANT for verification
}


# --- Yield Investment ---

### 9. Initiate Investment (Requires Authentication)
# @name initiateInvestment
POST {{baseUrl}}/investment/initiate
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "amountUSDCa": 5
}

### 10. Get Investment Positions (Requires Authentication)
# @name getInvestmentPositions
GET {{baseUrl}}/investment/positions
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token


# --- Gamified Dashboard ---

### 11. Get Dashboard Data (Requires Authentication)
# @name getDashboardData
GET {{baseUrl}}/dashboard/data
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token


# --- Educational Components ---

### 12. Get Educational Content
# @name getEducationalContent
GET {{baseUrl}}/education/content?type=video&id=someVideoId


### 13. Submit Quiz Results (Requires Authentication)
# @name submitQuizResults
POST {{baseUrl}}/education/quiz/submit
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "contentID": "quiz_safe_saver",
  "userAnswers": [
    {"questionId": "q1", "answer": "A"},
    {"questionId": "q2", "answer": "B"}
  ]
}

# --- Withdrawal ---

### 14. Initiate Withdrawal (Requires Authentication)
# @name initiateWithdrawal
POST {{baseUrl}}/withdrawal/initiate
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "amountUSDCa": 2,
  "bankDetails": {
    "accountName": "John Doe",
    "accountNumber": "123456789",
    "bankName": "Bank of America",
    "routingNumber": "987654321"
  },
  "fiatCurrency": "USD"
}

### 15. Simulate Withdrawal Webhook (for testing your backend's webhook endpoint)
# This would typically be sent by MoonPay/Flutterwave
POST {{baseUrl}}/withdrawal/webhook
Content-Type: application/json

{
  "type": "payout_status_change",
  "data": {
    "id": "external_payout_id",
    "status": "completed",
    "fiatAmount": 2,
    "fiatCurrency": "USD",
    "bankAccount": "..."
  },
  "signature": "your_webhook_secret_signature"
}

# --- AI Integration ---

### 16. Get AI Round-up Suggestion (Requires Authentication)
# @name getAIRoundupSuggestion
POST {{baseUrl}}/ai/roundup_suggestion
Content-Type: application/json
# Authorization: Bearer {{auth_token}} // Uncomment and replace with token

{
  "spendingAmount": 3.50,
  "spendingCategory": "Coffee"
}

# --- Bitcoin Investment APIs (NEW) ---

### 17. Bitcoin Investment - Initiate (Requires Authentication & Risk Acceptance)
# @name initiateBitcoinInvestment
POST {{baseUrl}}/investment/bitcoin/initiate
Content-Type: application/json
# Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "userID": "6ed81d5d-d15b-41f1-825c-8eff55a1a9fd",
  "amountUSD": 25,
  "riskAccepted": true,
  "investmentType": "market_buy"
}

### 18. Bitcoin Investment - Without Risk Acceptance (Should Fail)
# @name bitcoinInvestmentNoRisk
POST {{baseUrl}}/investment/bitcoin/initiate
Content-Type: application/json
# Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "amountUSD": 25,
  "riskAccepted": false
}

### 19. Bitcoin Investment - Invalid Amount (Should Fail)
# @name bitcoinInvestmentInvalidAmount
POST {{baseUrl}}/investment/bitcoin/initiate
Content-Type: application/json
# Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "amountUSD": 0.50,
  "riskAccepted": true
}

### 20. Get Bitcoin Investment Positions (Requires Authentication)
# @name getBitcoinPositions
POST {{baseUrl}}/investment/bitcoin/positions
Content-Type: application/json
# Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "userID": "6ed81d5d-d15b-41f1-825c-8eff55a1a9fd"
}

### 21. Get Multi-Chain Portfolio Overview (Requires Authentication)
# @name getPortfolioOverview
POST {{baseUrl}}/investment/portfolio
Content-Type: application/json

# Authorization: Bearer YOUR_JWT_TOKEN_HERE
{
  "userID": "6ed81d5d-d15b-41f1-825c-8eff55a1a9fd"
}

### 22. Bitcoin Deposit - Direct Bitcoin Purchase (Requires Authentication)
# @name initiateBitcoinDeposit
POST {{baseUrl}}/deposit/initiate
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "amountUSD": 50,
  "targetCurrency": "btc"
}

### 23. Algorand Deposit - USDCa Purchase (Requires Authentication)
# @name initiateAlgorandDeposit
POST {{baseUrl}}/deposit/initiate
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "amountUSD": 30,
  "targetCurrency": "usdca"
}

### 24. Deposit Status Check
# @name checkDepositStatus
GET {{baseUrl}}/deposit/status/9d6c3aac-61f6-4b52-8a54-d4f30913f055?userID=6ed81d5d-d15b-41f1-825c-8eff55a1a9fd

### 25. Calculate Bitcoin Investment Fees
# @name calculateBitcoinFees
GET {{baseUrl}}/deposit/calculate-fees?amountUSD=100&currency=btc

# --- Multi-Chain Wallet Tests ---

### 26. Create Multi-Chain Wallet (Bitcoin + Algorand)
# @name createMultiChainWallet
POST {{baseUrl}}/wallet/create
Content-Type: application/json

{
  "userId": "6ed81d5d-d15b-41f1-825c-8eff55a1a9fd"
}

### 27. Get Multi-Chain Wallet Balance (Database + Live)
# @name getMultiChainBalance
GET {{baseUrl}}/wallet/balance?userId=6ed81d5d-d15b-41f1-825c-8eff55a1a9fd&live=true

### 28. Get Live Bitcoin Balance for User's Address
# @name getLiveBitcoinBalance
GET {{baseUrl}}/wallet/balance/bitcoin/tb1q37kwfqz8rsypragqnw9pp3jkdwadqhp97z4wcq

### 29. Multi-Chain Balance Sync
# @name syncMultiChainBalance
POST {{baseUrl}}/wallet/balance/sync
Content-Type: application/json

{
  "userId": "6ed81d5d-d15b-41f1-825c-8eff55a1a9fd"
}

# --- Authentication Flow for Testing ---

### 28. Complete Authentication Flow - Step 1: Signup
# @name testSignup
POST {{baseUrl}}/auth/signup
Content-Type: application/json

{
  "phoneNumber": "+1234567890",
  "name": "Bitcoin Test User",
  "country": "USA"
}

### 29. Complete Authentication Flow - Step 2: Verify OTP
# @name testVerifyOtp
POST {{baseUrl}}/auth/verify-otp
Content-Type: application/json

{
  "userID": "USER_ID_FROM_STEP_1",
  "otpCode": "OTP_CODE_FROM_SMS"
}

# --- Debug & Status Endpoints ---

### 30. Test Bitcoin Integration Status (Debug)
# @name testBitcoinStatus
GET {{baseUrl}}/debug/bitcoin-status

### 31. Test MoonPay Bitcoin Integration (Requires Authentication)
POST {{baseUrl}}/moonpay/sign-url
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "url": "https://buy-sandbox.moonpay.com?apiKey=pk_test_123&currencyCode=btc&baseCurrencyAmount=25&walletAddress=tb1qtest"
}

# --- Portfolio NFT Tests (Future Implementation) ---

### 32. Create Portfolio NFT (Future)
# @name createPortfolioNFT
POST {{baseUrl}}/nft/portfolio/create
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "portfolioValue": 100,
  "assets": ["BTC", "ALGO"]
}

### 33. Get Portfolio NFT Status (Future)
# @name getPortfolioNFT
GET {{baseUrl}}/nft/portfolio
Authorization: Bearer YOUR_JWT_TOKEN_HERE

# --- Testing Instructions ---
# 
# To test the Bitcoin investment flow:
# 1. Run signup (#28) with a real phone number
# 2. Get OTP via SMS and verify (#29) 
# 3. Copy the JWT token from response
# 4. Replace "YOUR_JWT_TOKEN_HERE" in tests #17-27
# 5. Test Bitcoin investment initiation (#17)
# 6. Test portfolio overview (#21)
# 7. Test Bitcoin positions (#20)
#
# Expected Responses:
# - #17: Should return MoonPay URL for Bitcoin purchase
# - #18: Should fail with risk disclosure requirement
# - #19: Should fail with invalid amount error
# - #20: Should return Bitcoin investment positions
# - #21: Should return complete portfolio with BTC + ALGO breakdown
# - #22: Should initiate Bitcoin deposit via MoonPay
# - #23: Should initiate USDCa deposit via MoonPay